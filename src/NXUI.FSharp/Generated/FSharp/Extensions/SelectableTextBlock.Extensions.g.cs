// <auto-generated />
namespace NXUI.FSharp.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.SelectableTextBlock"/> class property extension methods.
/// </summary>
public static partial class SelectableTextBlockExtensions
{
    // Avalonia.Controls.SelectableTextBlock.SelectionStartProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SelectableTextBlock.SelectionStartProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T selectionStart<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.SelectableTextBlock
    {
        obj[Avalonia.Controls.SelectableTextBlock.SelectionStartProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SelectableTextBlock.SelectionStartProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T selectionStart<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SelectableTextBlock
    {
        var descriptor = Avalonia.Controls.SelectableTextBlock.SelectionStartProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SelectableTextBlock.SelectionStartProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T selectionStart<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SelectableTextBlock
    {
        var descriptor = Avalonia.Controls.SelectableTextBlock.SelectionStartProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.SelectableTextBlock.SelectionStartProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.SelectableTextBlock.SelectionStartProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectionStart(
        this Avalonia.Controls.SelectableTextBlock obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.SelectableTextBlock.SelectionStartProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.SelectableTextBlock.SelectionStartProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveSelectionStart(this Avalonia.Controls.SelectableTextBlock obj)
    {
        return obj.GetObservable(Avalonia.Controls.SelectableTextBlock.SelectionStartProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.SelectableTextBlock.SelectionStartProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectionStart<T>(this T obj, Action<Avalonia.Controls.SelectableTextBlock, IObservable<System.Int32>> handler) where T : Avalonia.Controls.SelectableTextBlock
    {
        var observable = obj.GetObservable(Avalonia.Controls.SelectableTextBlock.SelectionStartProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.SelectableTextBlock.SelectionEndProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SelectableTextBlock.SelectionEndProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T selectionEnd<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.SelectableTextBlock
    {
        obj[Avalonia.Controls.SelectableTextBlock.SelectionEndProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SelectableTextBlock.SelectionEndProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T selectionEnd<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SelectableTextBlock
    {
        var descriptor = Avalonia.Controls.SelectableTextBlock.SelectionEndProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SelectableTextBlock.SelectionEndProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T selectionEnd<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SelectableTextBlock
    {
        var descriptor = Avalonia.Controls.SelectableTextBlock.SelectionEndProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.SelectableTextBlock.SelectionEndProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.SelectableTextBlock.SelectionEndProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectionEnd(
        this Avalonia.Controls.SelectableTextBlock obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.SelectableTextBlock.SelectionEndProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.SelectableTextBlock.SelectionEndProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveSelectionEnd(this Avalonia.Controls.SelectableTextBlock obj)
    {
        return obj.GetObservable(Avalonia.Controls.SelectableTextBlock.SelectionEndProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.SelectableTextBlock.SelectionEndProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectionEnd<T>(this T obj, Action<Avalonia.Controls.SelectableTextBlock, IObservable<System.Int32>> handler) where T : Avalonia.Controls.SelectableTextBlock
    {
        var observable = obj.GetObservable(Avalonia.Controls.SelectableTextBlock.SelectionEndProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.SelectableTextBlock.SelectedTextProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.SelectableTextBlock.SelectedTextProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.SelectableTextBlock.SelectedTextProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectedText(
        this Avalonia.Controls.SelectableTextBlock obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.SelectableTextBlock.SelectedTextProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.SelectableTextBlock.SelectedTextProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.String> ObserveSelectedText(this Avalonia.Controls.SelectableTextBlock obj)
    {
        return obj.GetObservable(Avalonia.Controls.SelectableTextBlock.SelectedTextProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.SelectableTextBlock.SelectedTextProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.SelectableTextBlock OnSelectedText(this Avalonia.Controls.SelectableTextBlock obj, Action<Avalonia.Controls.SelectableTextBlock, IObservable<System.String>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.SelectableTextBlock.SelectedTextProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.SelectableTextBlock.SelectionBrushProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SelectableTextBlock.SelectionBrushProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T selectionBrush<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.SelectableTextBlock
    {
        obj[Avalonia.Controls.SelectableTextBlock.SelectionBrushProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SelectableTextBlock.SelectionBrushProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T selectionBrush<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SelectableTextBlock
    {
        var descriptor = Avalonia.Controls.SelectableTextBlock.SelectionBrushProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SelectableTextBlock.SelectionBrushProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T selectionBrush<T>(
        this T obj,
        IObservable<Avalonia.Media.IBrush> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SelectableTextBlock
    {
        var descriptor = Avalonia.Controls.SelectableTextBlock.SelectionBrushProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.SelectableTextBlock.SelectionBrushProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.SelectableTextBlock.SelectionBrushProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectionBrush(
        this Avalonia.Controls.SelectableTextBlock obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.SelectableTextBlock.SelectionBrushProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.SelectableTextBlock.SelectionBrushProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IBrush> ObserveSelectionBrush(this Avalonia.Controls.SelectableTextBlock obj)
    {
        return obj.GetObservable(Avalonia.Controls.SelectableTextBlock.SelectionBrushProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.SelectableTextBlock.SelectionBrushProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectionBrush<T>(this T obj, Action<Avalonia.Controls.SelectableTextBlock, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.SelectableTextBlock
    {
        var observable = obj.GetObservable(Avalonia.Controls.SelectableTextBlock.SelectionBrushProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.SelectableTextBlock.SelectionForegroundBrushProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SelectableTextBlock.SelectionForegroundBrushProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T selectionForegroundBrush<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.SelectableTextBlock
    {
        obj[Avalonia.Controls.SelectableTextBlock.SelectionForegroundBrushProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SelectableTextBlock.SelectionForegroundBrushProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T selectionForegroundBrush<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SelectableTextBlock
    {
        var descriptor = Avalonia.Controls.SelectableTextBlock.SelectionForegroundBrushProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SelectableTextBlock.SelectionForegroundBrushProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T selectionForegroundBrush<T>(
        this T obj,
        IObservable<Avalonia.Media.IBrush> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SelectableTextBlock
    {
        var descriptor = Avalonia.Controls.SelectableTextBlock.SelectionForegroundBrushProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.SelectableTextBlock.SelectionForegroundBrushProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.SelectableTextBlock.SelectionForegroundBrushProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectionForegroundBrush(
        this Avalonia.Controls.SelectableTextBlock obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.SelectableTextBlock.SelectionForegroundBrushProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.SelectableTextBlock.SelectionForegroundBrushProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IBrush> ObserveSelectionForegroundBrush(this Avalonia.Controls.SelectableTextBlock obj)
    {
        return obj.GetObservable(Avalonia.Controls.SelectableTextBlock.SelectionForegroundBrushProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.SelectableTextBlock.SelectionForegroundBrushProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectionForegroundBrush<T>(this T obj, Action<Avalonia.Controls.SelectableTextBlock, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.SelectableTextBlock
    {
        var observable = obj.GetObservable(Avalonia.Controls.SelectableTextBlock.SelectionForegroundBrushProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.SelectableTextBlock.CanCopyProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.SelectableTextBlock.CanCopyProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.SelectableTextBlock.CanCopyProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCanCopy(
        this Avalonia.Controls.SelectableTextBlock obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.SelectableTextBlock.CanCopyProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.SelectableTextBlock.CanCopyProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveCanCopy(this Avalonia.Controls.SelectableTextBlock obj)
    {
        return obj.GetObservable(Avalonia.Controls.SelectableTextBlock.CanCopyProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.SelectableTextBlock.CanCopyProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.SelectableTextBlock OnCanCopy(this Avalonia.Controls.SelectableTextBlock obj, Action<Avalonia.Controls.SelectableTextBlock, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.SelectableTextBlock.CanCopyProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.SelectableTextBlock.CopyingToClipboardEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.SelectableTextBlock.CopyingToClipboardEvent"/> event on an object of type <see cref="Avalonia.Controls.SelectableTextBlock"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnCopyingToClipboardHandler<T>(
        this T obj,
        Action<T, Avalonia.Interactivity.RoutedEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.SelectableTextBlock
    {
        obj.AddHandler(Avalonia.Controls.SelectableTextBlock.CopyingToClipboardEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.SelectableTextBlock.CopyingToClipboardEvent"/> event on an object of type <see cref="Avalonia.Controls.SelectableTextBlock"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnCopyingToClipboard<T>(
        this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.SelectableTextBlock
    {
        var observable = obj.GetObservable(Avalonia.Controls.SelectableTextBlock.CopyingToClipboardEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.SelectableTextBlock.CopyingToClipboardEvent"/> event on an object of type <see cref="Avalonia.Controls.SelectableTextBlock"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnCopyingToClipboard(
        this Avalonia.Controls.SelectableTextBlock obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.SelectableTextBlock.CopyingToClipboardEvent, routes);
    }

    // Avalonia.Controls.SelectableTextBlock.CopyingToClipboard

    /// <summary>
    /// Adds a handler to the `CopyingToClipboard` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCopyingToClipboardEvent<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler) where T : Avalonia.Controls.SelectableTextBlock
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.CopyingToClipboard += h, 
                h => obj.CopyingToClipboard -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `CopyingToClipboard` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `CopyingToClipboard` event on the specified object.</returns>
    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnCopyingToClipboardEvent(this Avalonia.Controls.SelectableTextBlock obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.CopyingToClipboard += h, 
                h => obj.CopyingToClipboard -= h)
            .Select(x => x.EventArgs);
    }
}
