// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Animation.Animation"/> class property extension methods.
/// </summary>
public static partial class AnimationExtensions
{
    // Avalonia.Animation.Animation.DurationProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.DurationProperty"/> value on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation Duration(this Avalonia.Animation.Animation obj, System.TimeSpan value)
    {
        obj[Avalonia.Animation.Animation.DurationProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.DurationProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation Duration(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.DurationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.DurationProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation Duration(
        this Avalonia.Animation.Animation obj,
        IObservable<System.TimeSpan> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.DurationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Animation.Animation.DurationProperty"/> binding on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Animation.Animation.DurationProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDuration(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.DurationProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Animation.Animation.DurationProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.TimeSpan> ObserveDuration(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.DurationProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Animation.Animation.DurationProperty"/> property on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnDuration(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<System.TimeSpan>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Animation.Animation.DurationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Animation.Animation.DurationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.TimeSpan>> ObserveBindingDuration(this Avalonia.Animation.Animation obj)
    {
        return obj.GetBindingObservable(Avalonia.Animation.Animation.DurationProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Animation.Animation.DurationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnBindingDuration(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<BindingValue<System.TimeSpan>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Animation.Animation.DurationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Animation.Animation.DurationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDurationChanged(this Avalonia.Animation.Animation obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Animation.Animation.DurationProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Animation.Animation.DurationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnDurationChanged(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Animation.Animation.DurationProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Animation.Animation.IterationCountProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.IterationCountProperty"/> value on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation IterationCount(this Avalonia.Animation.Animation obj, Avalonia.Animation.IterationCount value)
    {
        obj[Avalonia.Animation.Animation.IterationCountProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.IterationCountProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation IterationCount(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.IterationCountProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.IterationCountProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation IterationCount(
        this Avalonia.Animation.Animation obj,
        IObservable<Avalonia.Animation.IterationCount> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.IterationCountProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Animation.Animation.IterationCountProperty"/> binding on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Animation.Animation.IterationCountProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIterationCount(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.IterationCountProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Animation.Animation.IterationCountProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<Avalonia.Animation.IterationCount> ObserveIterationCount(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.IterationCountProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Animation.Animation.IterationCountProperty"/> property on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnIterationCount(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<Avalonia.Animation.IterationCount>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Animation.Animation.IterationCountProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Animation.Animation.IterationCountProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Animation.IterationCount>> ObserveBindingIterationCount(this Avalonia.Animation.Animation obj)
    {
        return obj.GetBindingObservable(Avalonia.Animation.Animation.IterationCountProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Animation.Animation.IterationCountProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnBindingIterationCount(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<BindingValue<Avalonia.Animation.IterationCount>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Animation.Animation.IterationCountProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Animation.Animation.IterationCountProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIterationCountChanged(this Avalonia.Animation.Animation obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Animation.Animation.IterationCountProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Animation.Animation.IterationCountProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnIterationCountChanged(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Animation.Animation.IterationCountProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Animation.Animation.PlaybackDirectionProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> value on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation PlaybackDirection(this Avalonia.Animation.Animation obj, Avalonia.Animation.PlaybackDirection value)
    {
        obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation PlaybackDirection(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.PlaybackDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation PlaybackDirection(
        this Avalonia.Animation.Animation obj,
        IObservable<Avalonia.Animation.PlaybackDirection> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.PlaybackDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> binding on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPlaybackDirection(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.PlaybackDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<Avalonia.Animation.PlaybackDirection> ObservePlaybackDirection(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.PlaybackDirectionProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> property on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnPlaybackDirection(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<Avalonia.Animation.PlaybackDirection>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Animation.Animation.PlaybackDirectionProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Animation.PlaybackDirection>> ObserveBindingPlaybackDirection(this Avalonia.Animation.Animation obj)
    {
        return obj.GetBindingObservable(Avalonia.Animation.Animation.PlaybackDirectionProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnBindingPlaybackDirection(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<BindingValue<Avalonia.Animation.PlaybackDirection>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Animation.Animation.PlaybackDirectionProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObservePlaybackDirectionChanged(this Avalonia.Animation.Animation obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Animation.Animation.PlaybackDirectionProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnPlaybackDirectionChanged(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Animation.Animation.PlaybackDirectionProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> property value to <see cref="Avalonia.Animation.PlaybackDirection.Normal"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation PlaybackDirectionNormal(this Avalonia.Animation.Animation obj)
    {
        obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = Avalonia.Animation.PlaybackDirection.Normal;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> property value to <see cref="Avalonia.Animation.PlaybackDirection.Reverse"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation PlaybackDirectionReverse(this Avalonia.Animation.Animation obj)
    {
        obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = Avalonia.Animation.PlaybackDirection.Reverse;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> property value to <see cref="Avalonia.Animation.PlaybackDirection.Alternate"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation PlaybackDirectionAlternate(this Avalonia.Animation.Animation obj)
    {
        obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = Avalonia.Animation.PlaybackDirection.Alternate;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.PlaybackDirectionProperty"/> property value to <see cref="Avalonia.Animation.PlaybackDirection.AlternateReverse"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation PlaybackDirectionAlternateReverse(this Avalonia.Animation.Animation obj)
    {
        obj[Avalonia.Animation.Animation.PlaybackDirectionProperty] = Avalonia.Animation.PlaybackDirection.AlternateReverse;
        return obj;
    }

    // Avalonia.Animation.Animation.FillModeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.FillModeProperty"/> value on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation FillMode(this Avalonia.Animation.Animation obj, Avalonia.Animation.FillMode value)
    {
        obj[Avalonia.Animation.Animation.FillModeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.FillModeProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation FillMode(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.FillModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.FillModeProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation FillMode(
        this Avalonia.Animation.Animation obj,
        IObservable<Avalonia.Animation.FillMode> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.FillModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Animation.Animation.FillModeProperty"/> binding on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Animation.Animation.FillModeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindFillMode(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.FillModeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Animation.Animation.FillModeProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<Avalonia.Animation.FillMode> ObserveFillMode(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.FillModeProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Animation.Animation.FillModeProperty"/> property on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnFillMode(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<Avalonia.Animation.FillMode>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Animation.Animation.FillModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Animation.Animation.FillModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Animation.FillMode>> ObserveBindingFillMode(this Avalonia.Animation.Animation obj)
    {
        return obj.GetBindingObservable(Avalonia.Animation.Animation.FillModeProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Animation.Animation.FillModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnBindingFillMode(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<BindingValue<Avalonia.Animation.FillMode>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Animation.Animation.FillModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Animation.Animation.FillModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveFillModeChanged(this Avalonia.Animation.Animation obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Animation.Animation.FillModeProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Animation.Animation.FillModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnFillModeChanged(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Animation.Animation.FillModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.FillModeProperty"/> property value to <see cref="Avalonia.Animation.FillMode.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation FillModeNone(this Avalonia.Animation.Animation obj)
    {
        obj[Avalonia.Animation.Animation.FillModeProperty] = Avalonia.Animation.FillMode.None;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.FillModeProperty"/> property value to <see cref="Avalonia.Animation.FillMode.Forward"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation FillModeForward(this Avalonia.Animation.Animation obj)
    {
        obj[Avalonia.Animation.Animation.FillModeProperty] = Avalonia.Animation.FillMode.Forward;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.FillModeProperty"/> property value to <see cref="Avalonia.Animation.FillMode.Backward"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation FillModeBackward(this Avalonia.Animation.Animation obj)
    {
        obj[Avalonia.Animation.Animation.FillModeProperty] = Avalonia.Animation.FillMode.Backward;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.FillModeProperty"/> property value to <see cref="Avalonia.Animation.FillMode.Both"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation FillModeBoth(this Avalonia.Animation.Animation obj)
    {
        obj[Avalonia.Animation.Animation.FillModeProperty] = Avalonia.Animation.FillMode.Both;
        return obj;
    }

    // Avalonia.Animation.Animation.EasingProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.EasingProperty"/> value on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation Easing(this Avalonia.Animation.Animation obj, Avalonia.Animation.Easings.Easing value)
    {
        obj[Avalonia.Animation.Animation.EasingProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.EasingProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation Easing(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.EasingProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.EasingProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation Easing(
        this Avalonia.Animation.Animation obj,
        IObservable<Avalonia.Animation.Easings.Easing> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.EasingProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Animation.Animation.EasingProperty"/> binding on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Animation.Animation.EasingProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindEasing(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.EasingProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Animation.Animation.EasingProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<Avalonia.Animation.Easings.Easing> ObserveEasing(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.EasingProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Animation.Animation.EasingProperty"/> property on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnEasing(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<Avalonia.Animation.Easings.Easing>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Animation.Animation.EasingProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Animation.Animation.EasingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Animation.Easings.Easing>> ObserveBindingEasing(this Avalonia.Animation.Animation obj)
    {
        return obj.GetBindingObservable(Avalonia.Animation.Animation.EasingProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Animation.Animation.EasingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnBindingEasing(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<BindingValue<Avalonia.Animation.Easings.Easing>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Animation.Animation.EasingProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Animation.Animation.EasingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveEasingChanged(this Avalonia.Animation.Animation obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Animation.Animation.EasingProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Animation.Animation.EasingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnEasingChanged(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Animation.Animation.EasingProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Animation.Animation.DelayProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.DelayProperty"/> value on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation Delay(this Avalonia.Animation.Animation obj, System.TimeSpan value)
    {
        obj[Avalonia.Animation.Animation.DelayProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.DelayProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation Delay(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.DelayProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.DelayProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation Delay(
        this Avalonia.Animation.Animation obj,
        IObservable<System.TimeSpan> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.DelayProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Animation.Animation.DelayProperty"/> binding on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Animation.Animation.DelayProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDelay(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.DelayProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Animation.Animation.DelayProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.TimeSpan> ObserveDelay(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.DelayProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Animation.Animation.DelayProperty"/> property on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnDelay(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<System.TimeSpan>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Animation.Animation.DelayProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Animation.Animation.DelayProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.TimeSpan>> ObserveBindingDelay(this Avalonia.Animation.Animation obj)
    {
        return obj.GetBindingObservable(Avalonia.Animation.Animation.DelayProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Animation.Animation.DelayProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnBindingDelay(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<BindingValue<System.TimeSpan>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Animation.Animation.DelayProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Animation.Animation.DelayProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDelayChanged(this Avalonia.Animation.Animation obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Animation.Animation.DelayProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Animation.Animation.DelayProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnDelayChanged(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Animation.Animation.DelayProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Animation.Animation.DelayBetweenIterationsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/> value on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation DelayBetweenIterations(this Avalonia.Animation.Animation obj, System.TimeSpan value)
    {
        obj[Avalonia.Animation.Animation.DelayBetweenIterationsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation DelayBetweenIterations(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.DelayBetweenIterationsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation DelayBetweenIterations(
        this Avalonia.Animation.Animation obj,
        IObservable<System.TimeSpan> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.DelayBetweenIterationsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/> binding on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDelayBetweenIterations(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.DelayBetweenIterationsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.TimeSpan> ObserveDelayBetweenIterations(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.DelayBetweenIterationsProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/> property on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnDelayBetweenIterations(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<System.TimeSpan>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Animation.Animation.DelayBetweenIterationsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.TimeSpan>> ObserveBindingDelayBetweenIterations(this Avalonia.Animation.Animation obj)
    {
        return obj.GetBindingObservable(Avalonia.Animation.Animation.DelayBetweenIterationsProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnBindingDelayBetweenIterations(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<BindingValue<System.TimeSpan>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Animation.Animation.DelayBetweenIterationsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDelayBetweenIterationsChanged(this Avalonia.Animation.Animation obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Animation.Animation.DelayBetweenIterationsProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Animation.Animation.DelayBetweenIterationsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnDelayBetweenIterationsChanged(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Animation.Animation.DelayBetweenIterationsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Animation.Animation.SpeedRatioProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/> value on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation SpeedRatio(this Avalonia.Animation.Animation obj, System.Double value)
    {
        obj[Avalonia.Animation.Animation.SpeedRatioProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation SpeedRatio(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.SpeedRatioProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Animation.Animation SpeedRatio(
        this Avalonia.Animation.Animation obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.SpeedRatioProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/> binding on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSpeedRatio(
        this Avalonia.Animation.Animation obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Animation.Animation.SpeedRatioProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/> on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.Double> ObserveSpeedRatio(this Avalonia.Animation.Animation obj)
    {
        return obj.GetObservable(Avalonia.Animation.Animation.SpeedRatioProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/> property on an object of type <see cref="Avalonia.Animation.Animation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnSpeedRatio(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Animation.Animation.SpeedRatioProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingSpeedRatio(this Avalonia.Animation.Animation obj)
    {
        return obj.GetBindingObservable(Avalonia.Animation.Animation.SpeedRatioProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnBindingSpeedRatio(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<BindingValue<System.Double>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Animation.Animation.SpeedRatioProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveSpeedRatioChanged(this Avalonia.Animation.Animation obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Animation.Animation.SpeedRatioProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Animation.Animation.SpeedRatioProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Animation.Animation OnSpeedRatioChanged(this Avalonia.Animation.Animation obj, Action<Avalonia.Animation.Animation, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Animation.Animation.SpeedRatioProperty);
        handler(obj, observable);
        return obj;
    }
}
