// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.TreeView"/> class property extension methods.
/// </summary>
public static partial class TreeViewExtensions
{
    // Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AutoScrollToSelectedItem<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TreeView
    {
        obj[Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AutoScrollToSelectedItem<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeView
    {
        var descriptor = Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AutoScrollToSelectedItem<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeView
    {
        var descriptor = Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAutoScrollToSelectedItem(
        this Avalonia.Controls.TreeView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveAutoScrollToSelectedItem(this Avalonia.Controls.TreeView obj)
    {
        return obj.GetObservable(Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAutoScrollToSelectedItem<T>(this T obj, Action<Avalonia.Controls.TreeView, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.TreeView
    {
        var observable = obj.GetObservable(Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingAutoScrollToSelectedItem(this Avalonia.Controls.TreeView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingAutoScrollToSelectedItem<T>(this T obj, Action<Avalonia.Controls.TreeView, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.TreeView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAutoScrollToSelectedItemChanged(this Avalonia.Controls.TreeView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAutoScrollToSelectedItemChanged<T>(this T obj, Action<Avalonia.Controls.TreeView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.TreeView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.TreeView.AutoScrollToSelectedItemProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TreeView.SelectedItemProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TreeView.SelectedItemProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedItem<T>(this T obj, System.Object value) where T : Avalonia.Controls.TreeView
    {
        obj[Avalonia.Controls.TreeView.SelectedItemProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeView.SelectedItemProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedItem<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeView
    {
        var descriptor = Avalonia.Controls.TreeView.SelectedItemProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeView.SelectedItemProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedItem<T>(
        this T obj,
        IObservable<System.Object> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeView
    {
        var descriptor = Avalonia.Controls.TreeView.SelectedItemProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TreeView.SelectedItemProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TreeView.SelectedItemProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectedItem(
        this Avalonia.Controls.TreeView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TreeView.SelectedItemProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TreeView.SelectedItemProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObserveSelectedItem(this Avalonia.Controls.TreeView obj)
    {
        return obj.GetObservable(Avalonia.Controls.TreeView.SelectedItemProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TreeView.SelectedItemProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectedItem<T>(this T obj, Action<Avalonia.Controls.TreeView, IObservable<System.Object>> handler) where T : Avalonia.Controls.TreeView
    {
        var observable = obj.GetObservable(Avalonia.Controls.TreeView.SelectedItemProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.TreeView.SelectedItemProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Object>> ObserveBindingSelectedItem(this Avalonia.Controls.TreeView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.TreeView.SelectedItemProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.TreeView.SelectedItemProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingSelectedItem<T>(this T obj, Action<Avalonia.Controls.TreeView, IObservable<BindingValue<System.Object>>> handler) where T : Avalonia.Controls.TreeView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.TreeView.SelectedItemProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.TreeView.SelectedItemProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveSelectedItemChanged(this Avalonia.Controls.TreeView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.TreeView.SelectedItemProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.TreeView.SelectedItemProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectedItemChanged<T>(this T obj, Action<Avalonia.Controls.TreeView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.TreeView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.TreeView.SelectedItemProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TreeView.SelectedItemsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TreeView.SelectedItemsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedItems<T>(this T obj, System.Collections.IList value) where T : Avalonia.Controls.TreeView
    {
        obj[Avalonia.Controls.TreeView.SelectedItemsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeView.SelectedItemsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedItems<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeView
    {
        var descriptor = Avalonia.Controls.TreeView.SelectedItemsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeView.SelectedItemsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedItems<T>(
        this T obj,
        IObservable<System.Collections.IList> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeView
    {
        var descriptor = Avalonia.Controls.TreeView.SelectedItemsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TreeView.SelectedItemsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TreeView.SelectedItemsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectedItems(
        this Avalonia.Controls.TreeView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TreeView.SelectedItemsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TreeView.SelectedItemsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Collections.IList> ObserveSelectedItems(this Avalonia.Controls.TreeView obj)
    {
        return obj.GetObservable(Avalonia.Controls.TreeView.SelectedItemsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TreeView.SelectedItemsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectedItems<T>(this T obj, Action<Avalonia.Controls.TreeView, IObservable<System.Collections.IList>> handler) where T : Avalonia.Controls.TreeView
    {
        var observable = obj.GetObservable(Avalonia.Controls.TreeView.SelectedItemsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.TreeView.SelectedItemsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Collections.IList>> ObserveBindingSelectedItems(this Avalonia.Controls.TreeView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.TreeView.SelectedItemsProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.TreeView.SelectedItemsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingSelectedItems<T>(this T obj, Action<Avalonia.Controls.TreeView, IObservable<BindingValue<System.Collections.IList>>> handler) where T : Avalonia.Controls.TreeView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.TreeView.SelectedItemsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.TreeView.SelectedItemsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveSelectedItemsChanged(this Avalonia.Controls.TreeView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.TreeView.SelectedItemsProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.TreeView.SelectedItemsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectedItemsChanged<T>(this T obj, Action<Avalonia.Controls.TreeView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.TreeView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.TreeView.SelectedItemsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TreeView.SelectionModeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TreeView.SelectionModeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionMode<T>(this T obj, Avalonia.Controls.SelectionMode value) where T : Avalonia.Controls.TreeView
    {
        obj[Avalonia.Controls.TreeView.SelectionModeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeView.SelectionModeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionMode<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeView
    {
        var descriptor = Avalonia.Controls.TreeView.SelectionModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeView.SelectionModeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionMode<T>(
        this T obj,
        IObservable<Avalonia.Controls.SelectionMode> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeView
    {
        var descriptor = Avalonia.Controls.TreeView.SelectionModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TreeView.SelectionModeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TreeView.SelectionModeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectionMode(
        this Avalonia.Controls.TreeView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TreeView.SelectionModeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TreeView.SelectionModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.SelectionMode> ObserveSelectionMode(this Avalonia.Controls.TreeView obj)
    {
        return obj.GetObservable(Avalonia.Controls.TreeView.SelectionModeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TreeView.SelectionModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectionMode<T>(this T obj, Action<Avalonia.Controls.TreeView, IObservable<Avalonia.Controls.SelectionMode>> handler) where T : Avalonia.Controls.TreeView
    {
        var observable = obj.GetObservable(Avalonia.Controls.TreeView.SelectionModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.TreeView.SelectionModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.SelectionMode>> ObserveBindingSelectionMode(this Avalonia.Controls.TreeView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.TreeView.SelectionModeProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.TreeView.SelectionModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingSelectionMode<T>(this T obj, Action<Avalonia.Controls.TreeView, IObservable<BindingValue<Avalonia.Controls.SelectionMode>>> handler) where T : Avalonia.Controls.TreeView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.TreeView.SelectionModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.TreeView.SelectionModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveSelectionModeChanged(this Avalonia.Controls.TreeView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.TreeView.SelectionModeProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.TreeView.SelectionModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectionModeChanged<T>(this T obj, Action<Avalonia.Controls.TreeView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.TreeView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.TreeView.SelectionModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TreeView.SelectionModeProperty"/> property value to <see cref="Avalonia.Controls.SelectionMode.Single"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionModeSingle<T>(this T obj) where T : Avalonia.Controls.TreeView
    {
        obj[Avalonia.Controls.TreeView.SelectionModeProperty] = Avalonia.Controls.SelectionMode.Single;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TreeView.SelectionModeProperty"/> property value to <see cref="Avalonia.Controls.SelectionMode.Multiple"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionModeMultiple<T>(this T obj) where T : Avalonia.Controls.TreeView
    {
        obj[Avalonia.Controls.TreeView.SelectionModeProperty] = Avalonia.Controls.SelectionMode.Multiple;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TreeView.SelectionModeProperty"/> property value to <see cref="Avalonia.Controls.SelectionMode.Toggle"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionModeToggle<T>(this T obj) where T : Avalonia.Controls.TreeView
    {
        obj[Avalonia.Controls.TreeView.SelectionModeProperty] = Avalonia.Controls.SelectionMode.Toggle;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TreeView.SelectionModeProperty"/> property value to <see cref="Avalonia.Controls.SelectionMode.AlwaysSelected"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionModeAlwaysSelected<T>(this T obj) where T : Avalonia.Controls.TreeView
    {
        obj[Avalonia.Controls.TreeView.SelectionModeProperty] = Avalonia.Controls.SelectionMode.AlwaysSelected;
        return obj;
    }
}
