// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.ColumnDefinition"/> class property extension methods.
/// </summary>
public static partial class ColumnDefinitionExtensions
{
    // Avalonia.Controls.ColumnDefinition.MaxWidthProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColumnDefinition.MaxWidthProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxWidth<T>(this T obj, System.Double value) where T : Avalonia.Controls.ColumnDefinition
    {
        obj[Avalonia.Controls.ColumnDefinition.MaxWidthProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColumnDefinition.MaxWidthProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxWidth<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColumnDefinition
    {
        var descriptor = Avalonia.Controls.ColumnDefinition.MaxWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColumnDefinition.MaxWidthProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxWidth<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColumnDefinition
    {
        var descriptor = Avalonia.Controls.ColumnDefinition.MaxWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColumnDefinition.MaxWidthProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColumnDefinition.MaxWidthProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMaxWidth(
        this Avalonia.Controls.ColumnDefinition obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColumnDefinition.MaxWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColumnDefinition.MaxWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveMaxWidth(this Avalonia.Controls.ColumnDefinition obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColumnDefinition.MaxWidthProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColumnDefinition.MaxWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxWidth<T>(this T obj, Action<Avalonia.Controls.ColumnDefinition, IObservable<System.Double>> handler) where T : Avalonia.Controls.ColumnDefinition
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColumnDefinition.MaxWidthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColumnDefinition.MaxWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingMaxWidth(this Avalonia.Controls.ColumnDefinition obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColumnDefinition.MaxWidthProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColumnDefinition.MaxWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMaxWidth<T>(this T obj, Action<Avalonia.Controls.ColumnDefinition, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Controls.ColumnDefinition
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColumnDefinition.MaxWidthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColumnDefinition.MaxWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMaxWidthChanged(this Avalonia.Controls.ColumnDefinition obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColumnDefinition.MaxWidthProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColumnDefinition.MaxWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxWidthChanged<T>(this T obj, Action<Avalonia.Controls.ColumnDefinition, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColumnDefinition
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColumnDefinition.MaxWidthProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColumnDefinition.MinWidthProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColumnDefinition.MinWidthProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinWidth<T>(this T obj, System.Double value) where T : Avalonia.Controls.ColumnDefinition
    {
        obj[Avalonia.Controls.ColumnDefinition.MinWidthProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColumnDefinition.MinWidthProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinWidth<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColumnDefinition
    {
        var descriptor = Avalonia.Controls.ColumnDefinition.MinWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColumnDefinition.MinWidthProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinWidth<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColumnDefinition
    {
        var descriptor = Avalonia.Controls.ColumnDefinition.MinWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColumnDefinition.MinWidthProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColumnDefinition.MinWidthProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinWidth(
        this Avalonia.Controls.ColumnDefinition obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColumnDefinition.MinWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColumnDefinition.MinWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveMinWidth(this Avalonia.Controls.ColumnDefinition obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColumnDefinition.MinWidthProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColumnDefinition.MinWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinWidth<T>(this T obj, Action<Avalonia.Controls.ColumnDefinition, IObservable<System.Double>> handler) where T : Avalonia.Controls.ColumnDefinition
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColumnDefinition.MinWidthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColumnDefinition.MinWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingMinWidth(this Avalonia.Controls.ColumnDefinition obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColumnDefinition.MinWidthProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColumnDefinition.MinWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMinWidth<T>(this T obj, Action<Avalonia.Controls.ColumnDefinition, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Controls.ColumnDefinition
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColumnDefinition.MinWidthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColumnDefinition.MinWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMinWidthChanged(this Avalonia.Controls.ColumnDefinition obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColumnDefinition.MinWidthProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColumnDefinition.MinWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinWidthChanged<T>(this T obj, Action<Avalonia.Controls.ColumnDefinition, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColumnDefinition
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColumnDefinition.MinWidthProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColumnDefinition.WidthProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColumnDefinition.WidthProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Width<T>(this T obj, Avalonia.Controls.GridLength value) where T : Avalonia.Controls.ColumnDefinition
    {
        obj[Avalonia.Controls.ColumnDefinition.WidthProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColumnDefinition.WidthProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Width<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColumnDefinition
    {
        var descriptor = Avalonia.Controls.ColumnDefinition.WidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColumnDefinition.WidthProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Width<T>(
        this T obj,
        IObservable<Avalonia.Controls.GridLength> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColumnDefinition
    {
        var descriptor = Avalonia.Controls.ColumnDefinition.WidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColumnDefinition.WidthProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColumnDefinition.WidthProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindWidth(
        this Avalonia.Controls.ColumnDefinition obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColumnDefinition.WidthProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColumnDefinition.WidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.GridLength> ObserveWidth(this Avalonia.Controls.ColumnDefinition obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColumnDefinition.WidthProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColumnDefinition.WidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnWidth<T>(this T obj, Action<Avalonia.Controls.ColumnDefinition, IObservable<Avalonia.Controls.GridLength>> handler) where T : Avalonia.Controls.ColumnDefinition
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColumnDefinition.WidthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColumnDefinition.WidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.GridLength>> ObserveBindingWidth(this Avalonia.Controls.ColumnDefinition obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColumnDefinition.WidthProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColumnDefinition.WidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingWidth<T>(this T obj, Action<Avalonia.Controls.ColumnDefinition, IObservable<BindingValue<Avalonia.Controls.GridLength>>> handler) where T : Avalonia.Controls.ColumnDefinition
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColumnDefinition.WidthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColumnDefinition.WidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveWidthChanged(this Avalonia.Controls.ColumnDefinition obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColumnDefinition.WidthProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColumnDefinition.WidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnWidthChanged<T>(this T obj, Action<Avalonia.Controls.ColumnDefinition, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColumnDefinition
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColumnDefinition.WidthProperty);
        handler(obj, observable);
        return obj;
    }
}
