// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.ContextMenu"/> class property extension methods.
/// </summary>
public static partial class ContextMenuExtensions
{
    // Avalonia.Controls.ContextMenu.HorizontalOffsetProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.HorizontalOffsetProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalOffset<T>(this T obj, System.Double value) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.HorizontalOffsetProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.HorizontalOffsetProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalOffset<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.HorizontalOffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.HorizontalOffsetProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalOffset<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.HorizontalOffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ContextMenu.HorizontalOffsetProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ContextMenu.HorizontalOffsetProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHorizontalOffset(
        this Avalonia.Controls.ContextMenu obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ContextMenu.HorizontalOffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ContextMenu.HorizontalOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveHorizontalOffset(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetObservable(Avalonia.Controls.ContextMenu.HorizontalOffsetProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ContextMenu.HorizontalOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHorizontalOffset<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<System.Double>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetObservable(Avalonia.Controls.ContextMenu.HorizontalOffsetProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ContextMenu.HorizontalOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingHorizontalOffset(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ContextMenu.HorizontalOffsetProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ContextMenu.HorizontalOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingHorizontalOffset<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ContextMenu.HorizontalOffsetProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ContextMenu.HorizontalOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveHorizontalOffsetChanged(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.HorizontalOffsetProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ContextMenu.HorizontalOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHorizontalOffsetChanged<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.HorizontalOffsetProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ContextMenu.VerticalOffsetProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.VerticalOffsetProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalOffset<T>(this T obj, System.Double value) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.VerticalOffsetProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.VerticalOffsetProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalOffset<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.VerticalOffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.VerticalOffsetProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalOffset<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.VerticalOffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ContextMenu.VerticalOffsetProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ContextMenu.VerticalOffsetProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindVerticalOffset(
        this Avalonia.Controls.ContextMenu obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ContextMenu.VerticalOffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ContextMenu.VerticalOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveVerticalOffset(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetObservable(Avalonia.Controls.ContextMenu.VerticalOffsetProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ContextMenu.VerticalOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnVerticalOffset<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<System.Double>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetObservable(Avalonia.Controls.ContextMenu.VerticalOffsetProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ContextMenu.VerticalOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingVerticalOffset(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ContextMenu.VerticalOffsetProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ContextMenu.VerticalOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingVerticalOffset<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ContextMenu.VerticalOffsetProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ContextMenu.VerticalOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveVerticalOffsetChanged(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.VerticalOffsetProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ContextMenu.VerticalOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnVerticalOffsetChanged<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.VerticalOffsetProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ContextMenu.PlacementAnchorProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementAnchor<T>(this T obj, Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor value) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementAnchorProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementAnchor<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementAnchorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementAnchor<T>(
        this T obj,
        IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementAnchorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPlacementAnchor(
        this Avalonia.Controls.ContextMenu obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementAnchorProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor> ObservePlacementAnchor(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetObservable(Avalonia.Controls.ContextMenu.PlacementAnchorProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPlacementAnchor<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetObservable(Avalonia.Controls.ContextMenu.PlacementAnchorProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor>> ObserveBindingPlacementAnchor(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ContextMenu.PlacementAnchorProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingPlacementAnchor<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<BindingValue<Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor>>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ContextMenu.PlacementAnchorProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObservePlacementAnchorChanged(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.PlacementAnchorProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPlacementAnchorChanged<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.PlacementAnchorProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementAnchorNone<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.None;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.Top"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementAnchorTop<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.Top;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.Bottom"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementAnchorBottom<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.Bottom;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.VerticalMask"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementAnchorVerticalMask<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.VerticalMask;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.Left"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementAnchorLeft<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.Left;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.TopLeft"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementAnchorTopLeft<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.TopLeft;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.BottomLeft"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementAnchorBottomLeft<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.BottomLeft;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.Right"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementAnchorRight<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.Right;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.TopRight"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementAnchorTopRight<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.TopRight;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.BottomRight"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementAnchorBottomRight<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.BottomRight;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.HorizontalMask"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementAnchorHorizontalMask<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.HorizontalMask;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementAnchorProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.AllMask"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementAnchorAllMask<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementAnchorProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupAnchor.AllMask;
        return obj;
    }

    // Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementConstraintAdjustment<T>(this T obj, Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment value) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementConstraintAdjustment<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementConstraintAdjustment<T>(
        this T obj,
        IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPlacementConstraintAdjustment(
        this Avalonia.Controls.ContextMenu obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment> ObservePlacementConstraintAdjustment(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetObservable(Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPlacementConstraintAdjustment<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetObservable(Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment>> ObserveBindingPlacementConstraintAdjustment(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingPlacementConstraintAdjustment<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<BindingValue<Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment>>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObservePlacementConstraintAdjustmentChanged(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPlacementConstraintAdjustmentChanged<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementConstraintAdjustmentNone<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.None;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.SlideX"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementConstraintAdjustmentSlideX<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.SlideX;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.SlideY"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementConstraintAdjustmentSlideY<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.SlideY;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.FlipX"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementConstraintAdjustmentFlipX<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.FlipX;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.FlipY"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementConstraintAdjustmentFlipY<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.FlipY;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.ResizeX"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementConstraintAdjustmentResizeX<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.ResizeX;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.ResizeY"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementConstraintAdjustmentResizeY<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.ResizeY;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.All"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementConstraintAdjustmentAll<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementConstraintAdjustmentProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupPositionerConstraintAdjustment.All;
        return obj;
    }

    // Avalonia.Controls.ContextMenu.PlacementGravityProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementGravity<T>(this T obj, Avalonia.Controls.Primitives.PopupPositioning.PopupGravity value) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementGravityProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementGravity<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementGravityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementGravity<T>(
        this T obj,
        IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupGravity> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementGravityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPlacementGravity(
        this Avalonia.Controls.ContextMenu obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementGravityProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupGravity> ObservePlacementGravity(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetObservable(Avalonia.Controls.ContextMenu.PlacementGravityProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPlacementGravity<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<Avalonia.Controls.Primitives.PopupPositioning.PopupGravity>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetObservable(Avalonia.Controls.ContextMenu.PlacementGravityProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.Primitives.PopupPositioning.PopupGravity>> ObserveBindingPlacementGravity(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ContextMenu.PlacementGravityProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingPlacementGravity<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<BindingValue<Avalonia.Controls.Primitives.PopupPositioning.PopupGravity>>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ContextMenu.PlacementGravityProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObservePlacementGravityChanged(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.PlacementGravityProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPlacementGravityChanged<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.PlacementGravityProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementGravityNone<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.None;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.Top"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementGravityTop<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.Top;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.Bottom"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementGravityBottom<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.Bottom;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.Left"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementGravityLeft<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.Left;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.TopLeft"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementGravityTopLeft<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.TopLeft;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.BottomLeft"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementGravityBottomLeft<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.BottomLeft;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.Right"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementGravityRight<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.Right;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.TopRight"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementGravityTopRight<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.TopRight;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementGravityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.BottomRight"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementGravityBottomRight<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementGravityProperty] = Avalonia.Controls.Primitives.PopupPositioning.PopupGravity.BottomRight;
        return obj;
    }

    // Avalonia.Controls.ContextMenu.PlacementProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Placement<T>(this T obj, Avalonia.Controls.PlacementMode value) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Placement<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Placement<T>(
        this T obj,
        IObservable<Avalonia.Controls.PlacementMode> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPlacement(
        this Avalonia.Controls.ContextMenu obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.PlacementMode> ObservePlacement(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetObservable(Avalonia.Controls.ContextMenu.PlacementProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPlacement<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<Avalonia.Controls.PlacementMode>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetObservable(Avalonia.Controls.ContextMenu.PlacementProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.PlacementMode>> ObserveBindingPlacement(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ContextMenu.PlacementProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingPlacement<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<BindingValue<Avalonia.Controls.PlacementMode>>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ContextMenu.PlacementProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObservePlacementChanged(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.PlacementProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPlacementChanged<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.PlacementProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> property value to <see cref="Avalonia.Controls.PlacementMode.Pointer"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementPointer<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementProperty] = Avalonia.Controls.PlacementMode.Pointer;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> property value to <see cref="Avalonia.Controls.PlacementMode.Bottom"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementBottom<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementProperty] = Avalonia.Controls.PlacementMode.Bottom;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> property value to <see cref="Avalonia.Controls.PlacementMode.Right"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementRight<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementProperty] = Avalonia.Controls.PlacementMode.Right;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> property value to <see cref="Avalonia.Controls.PlacementMode.Left"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementLeft<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementProperty] = Avalonia.Controls.PlacementMode.Left;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> property value to <see cref="Avalonia.Controls.PlacementMode.Top"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementTop<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementProperty] = Avalonia.Controls.PlacementMode.Top;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> property value to <see cref="Avalonia.Controls.PlacementMode.Center"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementCenter<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementProperty] = Avalonia.Controls.PlacementMode.Center;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> property value to <see cref="Avalonia.Controls.PlacementMode.AnchorAndGravity"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementAnchorAndGravity<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementProperty] = Avalonia.Controls.PlacementMode.AnchorAndGravity;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> property value to <see cref="Avalonia.Controls.PlacementMode.TopEdgeAlignedLeft"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementTopEdgeAlignedLeft<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementProperty] = Avalonia.Controls.PlacementMode.TopEdgeAlignedLeft;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> property value to <see cref="Avalonia.Controls.PlacementMode.TopEdgeAlignedRight"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementTopEdgeAlignedRight<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementProperty] = Avalonia.Controls.PlacementMode.TopEdgeAlignedRight;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> property value to <see cref="Avalonia.Controls.PlacementMode.BottomEdgeAlignedLeft"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementBottomEdgeAlignedLeft<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementProperty] = Avalonia.Controls.PlacementMode.BottomEdgeAlignedLeft;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> property value to <see cref="Avalonia.Controls.PlacementMode.BottomEdgeAlignedRight"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementBottomEdgeAlignedRight<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementProperty] = Avalonia.Controls.PlacementMode.BottomEdgeAlignedRight;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> property value to <see cref="Avalonia.Controls.PlacementMode.LeftEdgeAlignedTop"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementLeftEdgeAlignedTop<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementProperty] = Avalonia.Controls.PlacementMode.LeftEdgeAlignedTop;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> property value to <see cref="Avalonia.Controls.PlacementMode.LeftEdgeAlignedBottom"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementLeftEdgeAlignedBottom<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementProperty] = Avalonia.Controls.PlacementMode.LeftEdgeAlignedBottom;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> property value to <see cref="Avalonia.Controls.PlacementMode.RightEdgeAlignedTop"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementRightEdgeAlignedTop<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementProperty] = Avalonia.Controls.PlacementMode.RightEdgeAlignedTop;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> property value to <see cref="Avalonia.Controls.PlacementMode.RightEdgeAlignedBottom"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementRightEdgeAlignedBottom<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementProperty] = Avalonia.Controls.PlacementMode.RightEdgeAlignedBottom;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementProperty"/> property value to <see cref="Avalonia.Controls.PlacementMode.Custom"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementCustom<T>(this T obj) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementProperty] = Avalonia.Controls.PlacementMode.Custom;
        return obj;
    }

    // Avalonia.Controls.ContextMenu.PlacementRectProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementRectProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementRect<T>(this T obj, System.Nullable<Avalonia.Rect> value) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementRectProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.PlacementRectProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementRect<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementRectProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.PlacementRectProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementRect<T>(
        this T obj,
        IObservable<System.Nullable<Avalonia.Rect>> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementRectProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ContextMenu.PlacementRectProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ContextMenu.PlacementRectProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPlacementRect(
        this Avalonia.Controls.ContextMenu obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementRectProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ContextMenu.PlacementRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Nullable<Avalonia.Rect>> ObservePlacementRect(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetObservable(Avalonia.Controls.ContextMenu.PlacementRectProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ContextMenu.PlacementRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPlacementRect<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<System.Nullable<Avalonia.Rect>>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetObservable(Avalonia.Controls.ContextMenu.PlacementRectProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ContextMenu.PlacementRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Nullable<Avalonia.Rect>>> ObserveBindingPlacementRect(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ContextMenu.PlacementRectProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ContextMenu.PlacementRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingPlacementRect<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<BindingValue<System.Nullable<Avalonia.Rect>>>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ContextMenu.PlacementRectProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ContextMenu.PlacementRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObservePlacementRectChanged(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.PlacementRectProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ContextMenu.PlacementRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPlacementRectChanged<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.PlacementRectProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T WindowManagerAddShadowHint<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T WindowManagerAddShadowHint<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T WindowManagerAddShadowHint<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindWindowManagerAddShadowHint(
        this Avalonia.Controls.ContextMenu obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveWindowManagerAddShadowHint(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetObservable(Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnWindowManagerAddShadowHint<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetObservable(Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingWindowManagerAddShadowHint(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingWindowManagerAddShadowHint<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveWindowManagerAddShadowHintChanged(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnWindowManagerAddShadowHintChanged<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.WindowManagerAddShadowHintProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ContextMenu.PlacementTargetProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.PlacementTargetProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementTarget<T>(this T obj, Avalonia.Controls.Control value) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.PlacementTargetProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.PlacementTargetProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementTarget<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementTargetProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.PlacementTargetProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PlacementTarget<T>(
        this T obj,
        IObservable<Avalonia.Controls.Control> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementTargetProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ContextMenu.PlacementTargetProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ContextMenu.PlacementTargetProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPlacementTarget(
        this Avalonia.Controls.ContextMenu obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ContextMenu.PlacementTargetProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ContextMenu.PlacementTargetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Control> ObservePlacementTarget(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetObservable(Avalonia.Controls.ContextMenu.PlacementTargetProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ContextMenu.PlacementTargetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPlacementTarget<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<Avalonia.Controls.Control>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetObservable(Avalonia.Controls.ContextMenu.PlacementTargetProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ContextMenu.PlacementTargetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.Control>> ObserveBindingPlacementTarget(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ContextMenu.PlacementTargetProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ContextMenu.PlacementTargetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingPlacementTarget<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<BindingValue<Avalonia.Controls.Control>>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ContextMenu.PlacementTargetProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ContextMenu.PlacementTargetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObservePlacementTargetChanged(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.PlacementTargetProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ContextMenu.PlacementTargetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPlacementTargetChanged<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.PlacementTargetProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CustomPopupPlacementCallback<T>(this T obj, Avalonia.Controls.Primitives.PopupPositioning.CustomPopupPlacementCallback value) where T : Avalonia.Controls.ContextMenu
    {
        obj[Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CustomPopupPlacementCallback<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CustomPopupPlacementCallback<T>(
        this T obj,
        IObservable<Avalonia.Controls.Primitives.PopupPositioning.CustomPopupPlacementCallback> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ContextMenu
    {
        var descriptor = Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCustomPopupPlacementCallback(
        this Avalonia.Controls.ContextMenu obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Primitives.PopupPositioning.CustomPopupPlacementCallback> ObserveCustomPopupPlacementCallback(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetObservable(Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCustomPopupPlacementCallback<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<Avalonia.Controls.Primitives.PopupPositioning.CustomPopupPlacementCallback>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetObservable(Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.Primitives.PopupPositioning.CustomPopupPlacementCallback>> ObserveBindingCustomPopupPlacementCallback(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingCustomPopupPlacementCallback<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<BindingValue<Avalonia.Controls.Primitives.PopupPositioning.CustomPopupPlacementCallback>>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveCustomPopupPlacementCallbackChanged(this Avalonia.Controls.ContextMenu obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCustomPopupPlacementCallbackChanged<T>(this T obj, Action<Avalonia.Controls.ContextMenu, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ContextMenu
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ContextMenu.CustomPopupPlacementCallbackProperty);
        handler(obj, observable);
        return obj;
    }
}
