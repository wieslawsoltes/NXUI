// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Media.TileBrush"/> class property extension methods.
/// </summary>
public static partial class TileBrushExtensions
{
    // Avalonia.Media.TileBrush.AlignmentXProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.AlignmentXProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignmentX<T>(this T obj, Avalonia.Media.AlignmentX value) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentXProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TileBrush.AlignmentXProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignmentX<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TileBrush
    {
        var descriptor = Avalonia.Media.TileBrush.AlignmentXProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TileBrush.AlignmentXProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignmentX<T>(
        this T obj,
        IObservable<Avalonia.Media.AlignmentX> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TileBrush
    {
        var descriptor = Avalonia.Media.TileBrush.AlignmentXProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.TileBrush.AlignmentXProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.TileBrush.AlignmentXProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAlignmentX(
        this Avalonia.Media.TileBrush obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.TileBrush.AlignmentXProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.TileBrush.AlignmentXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.AlignmentX> ObserveAlignmentX(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetObservable(Avalonia.Media.TileBrush.AlignmentXProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.TileBrush.AlignmentXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignmentX<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<Avalonia.Media.AlignmentX>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetObservable(Avalonia.Media.TileBrush.AlignmentXProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.TileBrush.AlignmentXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.AlignmentX>> ObserveBindingAlignmentX(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.TileBrush.AlignmentXProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.TileBrush.AlignmentXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingAlignmentX<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<BindingValue<Avalonia.Media.AlignmentX>>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.TileBrush.AlignmentXProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.TileBrush.AlignmentXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAlignmentXChanged(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.TileBrush.AlignmentXProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.TileBrush.AlignmentXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignmentXChanged<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.TileBrush.AlignmentXProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.AlignmentXProperty"/> property value to <see cref="Avalonia.Media.AlignmentX.Left"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignmentXLeft<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentXProperty] = Avalonia.Media.AlignmentX.Left;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.AlignmentXProperty"/> property value to <see cref="Avalonia.Media.AlignmentX.Center"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignmentXCenter<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentXProperty] = Avalonia.Media.AlignmentX.Center;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.AlignmentXProperty"/> property value to <see cref="Avalonia.Media.AlignmentX.Right"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignmentXRight<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentXProperty] = Avalonia.Media.AlignmentX.Right;
        return obj;
    }

    // Avalonia.Media.TileBrush.AlignmentYProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.AlignmentYProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignmentY<T>(this T obj, Avalonia.Media.AlignmentY value) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentYProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TileBrush.AlignmentYProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignmentY<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TileBrush
    {
        var descriptor = Avalonia.Media.TileBrush.AlignmentYProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TileBrush.AlignmentYProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignmentY<T>(
        this T obj,
        IObservable<Avalonia.Media.AlignmentY> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TileBrush
    {
        var descriptor = Avalonia.Media.TileBrush.AlignmentYProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.TileBrush.AlignmentYProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.TileBrush.AlignmentYProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAlignmentY(
        this Avalonia.Media.TileBrush obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.TileBrush.AlignmentYProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.TileBrush.AlignmentYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.AlignmentY> ObserveAlignmentY(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetObservable(Avalonia.Media.TileBrush.AlignmentYProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.TileBrush.AlignmentYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignmentY<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<Avalonia.Media.AlignmentY>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetObservable(Avalonia.Media.TileBrush.AlignmentYProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.TileBrush.AlignmentYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.AlignmentY>> ObserveBindingAlignmentY(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.TileBrush.AlignmentYProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.TileBrush.AlignmentYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingAlignmentY<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<BindingValue<Avalonia.Media.AlignmentY>>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.TileBrush.AlignmentYProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.TileBrush.AlignmentYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAlignmentYChanged(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.TileBrush.AlignmentYProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.TileBrush.AlignmentYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignmentYChanged<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.TileBrush.AlignmentYProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.AlignmentYProperty"/> property value to <see cref="Avalonia.Media.AlignmentY.Top"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignmentYTop<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentYProperty] = Avalonia.Media.AlignmentY.Top;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.AlignmentYProperty"/> property value to <see cref="Avalonia.Media.AlignmentY.Center"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignmentYCenter<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentYProperty] = Avalonia.Media.AlignmentY.Center;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.AlignmentYProperty"/> property value to <see cref="Avalonia.Media.AlignmentY.Bottom"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignmentYBottom<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.AlignmentYProperty] = Avalonia.Media.AlignmentY.Bottom;
        return obj;
    }

    // Avalonia.Media.TileBrush.DestinationRectProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.DestinationRectProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DestinationRect<T>(this T obj, Avalonia.RelativeRect value) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.DestinationRectProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TileBrush.DestinationRectProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DestinationRect<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TileBrush
    {
        var descriptor = Avalonia.Media.TileBrush.DestinationRectProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TileBrush.DestinationRectProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DestinationRect<T>(
        this T obj,
        IObservable<Avalonia.RelativeRect> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TileBrush
    {
        var descriptor = Avalonia.Media.TileBrush.DestinationRectProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.TileBrush.DestinationRectProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.TileBrush.DestinationRectProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDestinationRect(
        this Avalonia.Media.TileBrush obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.TileBrush.DestinationRectProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.TileBrush.DestinationRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.RelativeRect> ObserveDestinationRect(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetObservable(Avalonia.Media.TileBrush.DestinationRectProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.TileBrush.DestinationRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDestinationRect<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<Avalonia.RelativeRect>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetObservable(Avalonia.Media.TileBrush.DestinationRectProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.TileBrush.DestinationRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.RelativeRect>> ObserveBindingDestinationRect(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.TileBrush.DestinationRectProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.TileBrush.DestinationRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingDestinationRect<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<BindingValue<Avalonia.RelativeRect>>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.TileBrush.DestinationRectProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.TileBrush.DestinationRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDestinationRectChanged(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.TileBrush.DestinationRectProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.TileBrush.DestinationRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDestinationRectChanged<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.TileBrush.DestinationRectProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.TileBrush.SourceRectProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.SourceRectProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SourceRect<T>(this T obj, Avalonia.RelativeRect value) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.SourceRectProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TileBrush.SourceRectProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SourceRect<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TileBrush
    {
        var descriptor = Avalonia.Media.TileBrush.SourceRectProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TileBrush.SourceRectProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SourceRect<T>(
        this T obj,
        IObservable<Avalonia.RelativeRect> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TileBrush
    {
        var descriptor = Avalonia.Media.TileBrush.SourceRectProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.TileBrush.SourceRectProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.TileBrush.SourceRectProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSourceRect(
        this Avalonia.Media.TileBrush obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.TileBrush.SourceRectProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.TileBrush.SourceRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.RelativeRect> ObserveSourceRect(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetObservable(Avalonia.Media.TileBrush.SourceRectProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.TileBrush.SourceRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSourceRect<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<Avalonia.RelativeRect>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetObservable(Avalonia.Media.TileBrush.SourceRectProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.TileBrush.SourceRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.RelativeRect>> ObserveBindingSourceRect(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.TileBrush.SourceRectProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.TileBrush.SourceRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingSourceRect<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<BindingValue<Avalonia.RelativeRect>>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.TileBrush.SourceRectProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.TileBrush.SourceRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveSourceRectChanged(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.TileBrush.SourceRectProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.TileBrush.SourceRectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSourceRectChanged<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.TileBrush.SourceRectProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.TileBrush.StretchProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.StretchProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Stretch<T>(this T obj, Avalonia.Media.Stretch value) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.StretchProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TileBrush.StretchProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Stretch<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TileBrush
    {
        var descriptor = Avalonia.Media.TileBrush.StretchProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TileBrush.StretchProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Stretch<T>(
        this T obj,
        IObservable<Avalonia.Media.Stretch> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TileBrush
    {
        var descriptor = Avalonia.Media.TileBrush.StretchProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.TileBrush.StretchProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.TileBrush.StretchProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStretch(
        this Avalonia.Media.TileBrush obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.TileBrush.StretchProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.TileBrush.StretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.Stretch> ObserveStretch(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetObservable(Avalonia.Media.TileBrush.StretchProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.TileBrush.StretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStretch<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<Avalonia.Media.Stretch>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetObservable(Avalonia.Media.TileBrush.StretchProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.TileBrush.StretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.Stretch>> ObserveBindingStretch(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.TileBrush.StretchProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.TileBrush.StretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingStretch<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<BindingValue<Avalonia.Media.Stretch>>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.TileBrush.StretchProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.TileBrush.StretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveStretchChanged(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.TileBrush.StretchProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.TileBrush.StretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStretchChanged<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.TileBrush.StretchProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.StretchProperty"/> property value to <see cref="Avalonia.Media.Stretch.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchNone<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.StretchProperty] = Avalonia.Media.Stretch.None;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.StretchProperty"/> property value to <see cref="Avalonia.Media.Stretch.Fill"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchFill<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.StretchProperty] = Avalonia.Media.Stretch.Fill;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.StretchProperty"/> property value to <see cref="Avalonia.Media.Stretch.Uniform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchUniform<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.StretchProperty] = Avalonia.Media.Stretch.Uniform;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.StretchProperty"/> property value to <see cref="Avalonia.Media.Stretch.UniformToFill"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchUniformToFill<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.StretchProperty] = Avalonia.Media.Stretch.UniformToFill;
        return obj;
    }

    // Avalonia.Media.TileBrush.TileModeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.TileModeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TileMode<T>(this T obj, Avalonia.Media.TileMode value) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.TileModeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TileBrush.TileModeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TileMode<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TileBrush
    {
        var descriptor = Avalonia.Media.TileBrush.TileModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TileBrush.TileModeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TileMode<T>(
        this T obj,
        IObservable<Avalonia.Media.TileMode> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TileBrush
    {
        var descriptor = Avalonia.Media.TileBrush.TileModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.TileBrush.TileModeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.TileBrush.TileModeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindTileMode(
        this Avalonia.Media.TileBrush obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.TileBrush.TileModeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.TileBrush.TileModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.TileMode> ObserveTileMode(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetObservable(Avalonia.Media.TileBrush.TileModeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.TileBrush.TileModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnTileMode<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<Avalonia.Media.TileMode>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetObservable(Avalonia.Media.TileBrush.TileModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.TileBrush.TileModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.TileMode>> ObserveBindingTileMode(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.TileBrush.TileModeProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.TileBrush.TileModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingTileMode<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<BindingValue<Avalonia.Media.TileMode>>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.TileBrush.TileModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.TileBrush.TileModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveTileModeChanged(this Avalonia.Media.TileBrush obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.TileBrush.TileModeProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.TileBrush.TileModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnTileModeChanged<T>(this T obj, Action<Avalonia.Media.TileBrush, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.TileBrush
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.TileBrush.TileModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.TileModeProperty"/> property value to <see cref="Avalonia.Media.TileMode.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TileModeNone<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.TileModeProperty] = Avalonia.Media.TileMode.None;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.TileModeProperty"/> property value to <see cref="Avalonia.Media.TileMode.FlipX"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TileModeFlipX<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.TileModeProperty] = Avalonia.Media.TileMode.FlipX;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.TileModeProperty"/> property value to <see cref="Avalonia.Media.TileMode.FlipY"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TileModeFlipY<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.TileModeProperty] = Avalonia.Media.TileMode.FlipY;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.TileModeProperty"/> property value to <see cref="Avalonia.Media.TileMode.FlipXY"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TileModeFlipXY<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.TileModeProperty] = Avalonia.Media.TileMode.FlipXY;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TileBrush.TileModeProperty"/> property value to <see cref="Avalonia.Media.TileMode.Tile"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TileModeTile<T>(this T obj) where T : Avalonia.Media.TileBrush
    {
        obj[Avalonia.Media.TileBrush.TileModeProperty] = Avalonia.Media.TileMode.Tile;
        return obj;
    }
}
