// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell"/> class property extension methods.
/// </summary>
public static partial class TreeDataGridTextCellExtensions
{
    // Avalonia.Controls.Primitives.TreeDataGridTextCell.TextTrimmingProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextTrimmingProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextTrimmingProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindTextTrimming(
        this Avalonia.Controls.Primitives.TreeDataGridTextCell obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.TreeDataGridTextCell.TextTrimmingProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextTrimmingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.TextTrimming> ObserveTextTrimming(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextTrimmingProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextTrimmingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.TreeDataGridTextCell OnTextTrimming(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj, Action<Avalonia.Controls.Primitives.TreeDataGridTextCell, IObservable<Avalonia.Media.TextTrimming>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextTrimmingProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextTrimmingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.TextTrimming>> ObserveBindingTextTrimming(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextTrimmingProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextTrimmingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.TreeDataGridTextCell OnBindingTextTrimming(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj, Action<Avalonia.Controls.Primitives.TreeDataGridTextCell, IObservable<BindingValue<Avalonia.Media.TextTrimming>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextTrimmingProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextTrimmingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveTextTrimmingChanged(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextTrimmingProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextTrimmingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.TreeDataGridTextCell OnTextTrimmingChanged(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj, Action<Avalonia.Controls.Primitives.TreeDataGridTextCell, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextTrimmingProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.TreeDataGridTextCell.TextWrappingProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextWrappingProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextWrappingProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindTextWrapping(
        this Avalonia.Controls.Primitives.TreeDataGridTextCell obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.TreeDataGridTextCell.TextWrappingProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextWrappingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.TextWrapping> ObserveTextWrapping(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextWrappingProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextWrappingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.TreeDataGridTextCell OnTextWrapping(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj, Action<Avalonia.Controls.Primitives.TreeDataGridTextCell, IObservable<Avalonia.Media.TextWrapping>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextWrappingProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextWrappingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.TextWrapping>> ObserveBindingTextWrapping(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextWrappingProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextWrappingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.TreeDataGridTextCell OnBindingTextWrapping(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj, Action<Avalonia.Controls.Primitives.TreeDataGridTextCell, IObservable<BindingValue<Avalonia.Media.TextWrapping>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextWrappingProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextWrappingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveTextWrappingChanged(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextWrappingProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextWrappingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.TreeDataGridTextCell OnTextWrappingChanged(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj, Action<Avalonia.Controls.Primitives.TreeDataGridTextCell, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextWrappingProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Value<T>(this T obj, System.String value) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        obj[Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Value<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        var descriptor = Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Value<T>(
        this T obj,
        IObservable<System.String> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        var descriptor = Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindValue(
        this Avalonia.Controls.Primitives.TreeDataGridTextCell obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.String> ObserveValue(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnValue<T>(this T obj, Action<Avalonia.Controls.Primitives.TreeDataGridTextCell, IObservable<System.String>> handler) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.String>> ObserveBindingValue(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingValue<T>(this T obj, Action<Avalonia.Controls.Primitives.TreeDataGridTextCell, IObservable<BindingValue<System.String>>> handler) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveValueChanged(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnValueChanged<T>(this T obj, Action<Avalonia.Controls.Primitives.TreeDataGridTextCell, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.ValueProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TextAlignment<T>(this T obj, Avalonia.Media.TextAlignment value) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        obj[Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TextAlignment<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        var descriptor = Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TextAlignment<T>(
        this T obj,
        IObservable<Avalonia.Media.TextAlignment> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        var descriptor = Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindTextAlignment(
        this Avalonia.Controls.Primitives.TreeDataGridTextCell obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.TextAlignment> ObserveTextAlignment(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnTextAlignment<T>(this T obj, Action<Avalonia.Controls.Primitives.TreeDataGridTextCell, IObservable<Avalonia.Media.TextAlignment>> handler) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.TextAlignment>> ObserveBindingTextAlignment(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingTextAlignment<T>(this T obj, Action<Avalonia.Controls.Primitives.TreeDataGridTextCell, IObservable<BindingValue<Avalonia.Media.TextAlignment>>> handler) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveTextAlignmentChanged(this Avalonia.Controls.Primitives.TreeDataGridTextCell obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnTextAlignmentChanged<T>(this T obj, Action<Avalonia.Controls.Primitives.TreeDataGridTextCell, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/> property value to <see cref="Avalonia.Media.TextAlignment.Left"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TextAlignmentLeft<T>(this T obj) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        obj[Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty] = Avalonia.Media.TextAlignment.Left;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/> property value to <see cref="Avalonia.Media.TextAlignment.Center"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TextAlignmentCenter<T>(this T obj) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        obj[Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty] = Avalonia.Media.TextAlignment.Center;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/> property value to <see cref="Avalonia.Media.TextAlignment.Right"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TextAlignmentRight<T>(this T obj) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        obj[Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty] = Avalonia.Media.TextAlignment.Right;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/> property value to <see cref="Avalonia.Media.TextAlignment.Start"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TextAlignmentStart<T>(this T obj) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        obj[Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty] = Avalonia.Media.TextAlignment.Start;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/> property value to <see cref="Avalonia.Media.TextAlignment.End"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TextAlignmentEnd<T>(this T obj) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        obj[Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty] = Avalonia.Media.TextAlignment.End;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/> property value to <see cref="Avalonia.Media.TextAlignment.DetectFromContent"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TextAlignmentDetectFromContent<T>(this T obj) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        obj[Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty] = Avalonia.Media.TextAlignment.DetectFromContent;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty"/> property value to <see cref="Avalonia.Media.TextAlignment.Justify"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T TextAlignmentJustify<T>(this T obj) where T : Avalonia.Controls.Primitives.TreeDataGridTextCell
    {
        obj[Avalonia.Controls.Primitives.TreeDataGridTextCell.TextAlignmentProperty] = Avalonia.Media.TextAlignment.Justify;
        return obj;
    }
}
