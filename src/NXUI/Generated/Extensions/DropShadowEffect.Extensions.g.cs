// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Media.DropShadowEffect"/> class property extension methods.
/// </summary>
public static partial class DropShadowEffectExtensions
{
    // Avalonia.Media.DropShadowEffect.OffsetXProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.DropShadowEffect.OffsetXProperty"/> value on an object of type <see cref="Avalonia.Media.DropShadowEffect"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.DropShadowEffect OffsetX(this Avalonia.Media.DropShadowEffect obj, System.Double value)
    {
        obj[Avalonia.Media.DropShadowEffect.OffsetXProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.DropShadowEffect.OffsetXProperty"/> on an object of type <see cref="Avalonia.Media.DropShadowEffect"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.DropShadowEffect OffsetX(
        this Avalonia.Media.DropShadowEffect obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.DropShadowEffect.OffsetXProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.DropShadowEffect.OffsetXProperty"/> on an object of type <see cref="Avalonia.Media.DropShadowEffect"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.DropShadowEffect OffsetX(
        this Avalonia.Media.DropShadowEffect obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.DropShadowEffect.OffsetXProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.DropShadowEffect.OffsetXProperty"/> binding on an object of type <see cref="Avalonia.Media.DropShadowEffect"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.DropShadowEffect.OffsetXProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindOffsetX(
        this Avalonia.Media.DropShadowEffect obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.DropShadowEffect.OffsetXProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.DropShadowEffect.OffsetXProperty"/> on an object of type <see cref="Avalonia.Media.DropShadowEffect"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.Double> ObserveOffsetX(this Avalonia.Media.DropShadowEffect obj)
    {
        return obj.GetObservable(Avalonia.Media.DropShadowEffect.OffsetXProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.DropShadowEffect.OffsetXProperty"/> property on an object of type <see cref="Avalonia.Media.DropShadowEffect"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.DropShadowEffect OnOffsetX(this Avalonia.Media.DropShadowEffect obj, Action<Avalonia.Media.DropShadowEffect, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.DropShadowEffect.OffsetXProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.DropShadowEffect.OffsetXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingOffsetX(this Avalonia.Media.DropShadowEffect obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.DropShadowEffect.OffsetXProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.DropShadowEffect.OffsetXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.DropShadowEffect OnBindingOffsetX(this Avalonia.Media.DropShadowEffect obj, Action<Avalonia.Media.DropShadowEffect, IObservable<BindingValue<System.Double>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.DropShadowEffect.OffsetXProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.DropShadowEffect.OffsetXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveOffsetXChanged(this Avalonia.Media.DropShadowEffect obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.DropShadowEffect.OffsetXProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.DropShadowEffect.OffsetXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.DropShadowEffect OnOffsetXChanged(this Avalonia.Media.DropShadowEffect obj, Action<Avalonia.Media.DropShadowEffect, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.DropShadowEffect.OffsetXProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.DropShadowEffect.OffsetYProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.DropShadowEffect.OffsetYProperty"/> value on an object of type <see cref="Avalonia.Media.DropShadowEffect"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.DropShadowEffect OffsetY(this Avalonia.Media.DropShadowEffect obj, System.Double value)
    {
        obj[Avalonia.Media.DropShadowEffect.OffsetYProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.DropShadowEffect.OffsetYProperty"/> on an object of type <see cref="Avalonia.Media.DropShadowEffect"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.DropShadowEffect OffsetY(
        this Avalonia.Media.DropShadowEffect obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.DropShadowEffect.OffsetYProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.DropShadowEffect.OffsetYProperty"/> on an object of type <see cref="Avalonia.Media.DropShadowEffect"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.DropShadowEffect OffsetY(
        this Avalonia.Media.DropShadowEffect obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.DropShadowEffect.OffsetYProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.DropShadowEffect.OffsetYProperty"/> binding on an object of type <see cref="Avalonia.Media.DropShadowEffect"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.DropShadowEffect.OffsetYProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindOffsetY(
        this Avalonia.Media.DropShadowEffect obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.DropShadowEffect.OffsetYProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.DropShadowEffect.OffsetYProperty"/> on an object of type <see cref="Avalonia.Media.DropShadowEffect"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.Double> ObserveOffsetY(this Avalonia.Media.DropShadowEffect obj)
    {
        return obj.GetObservable(Avalonia.Media.DropShadowEffect.OffsetYProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.DropShadowEffect.OffsetYProperty"/> property on an object of type <see cref="Avalonia.Media.DropShadowEffect"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.DropShadowEffect OnOffsetY(this Avalonia.Media.DropShadowEffect obj, Action<Avalonia.Media.DropShadowEffect, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.DropShadowEffect.OffsetYProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.DropShadowEffect.OffsetYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingOffsetY(this Avalonia.Media.DropShadowEffect obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.DropShadowEffect.OffsetYProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.DropShadowEffect.OffsetYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.DropShadowEffect OnBindingOffsetY(this Avalonia.Media.DropShadowEffect obj, Action<Avalonia.Media.DropShadowEffect, IObservable<BindingValue<System.Double>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.DropShadowEffect.OffsetYProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.DropShadowEffect.OffsetYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveOffsetYChanged(this Avalonia.Media.DropShadowEffect obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.DropShadowEffect.OffsetYProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.DropShadowEffect.OffsetYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.DropShadowEffect OnOffsetYChanged(this Avalonia.Media.DropShadowEffect obj, Action<Avalonia.Media.DropShadowEffect, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.DropShadowEffect.OffsetYProperty);
        handler(obj, observable);
        return obj;
    }
}
