// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Media.TextDecoration"/> class property extension methods.
/// </summary>
public static partial class TextDecorationExtensions
{
    // Avalonia.Media.TextDecoration.LocationProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.LocationProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Location<T>(this T obj, Avalonia.Media.TextDecorationLocation value) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.LocationProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.LocationProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Location<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.LocationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.LocationProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Location<T>(
        this T obj,
        IObservable<Avalonia.Media.TextDecorationLocation> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.LocationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.TextDecoration.LocationProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.TextDecoration.LocationProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindLocation(
        this Avalonia.Media.TextDecoration obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.TextDecoration.LocationProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.TextDecoration.LocationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.TextDecorationLocation> ObserveLocation(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetObservable(Avalonia.Media.TextDecoration.LocationProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.TextDecoration.LocationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnLocation<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<Avalonia.Media.TextDecorationLocation>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetObservable(Avalonia.Media.TextDecoration.LocationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.TextDecoration.LocationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.TextDecorationLocation>> ObserveBindingLocation(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.TextDecoration.LocationProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.TextDecoration.LocationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingLocation<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<BindingValue<Avalonia.Media.TextDecorationLocation>>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.TextDecoration.LocationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.TextDecoration.LocationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveLocationChanged(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.LocationProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.TextDecoration.LocationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnLocationChanged<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.LocationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.LocationProperty"/> property value to <see cref="Avalonia.Media.TextDecorationLocation.Underline"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T LocationUnderline<T>(this T obj) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.LocationProperty] = Avalonia.Media.TextDecorationLocation.Underline;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.LocationProperty"/> property value to <see cref="Avalonia.Media.TextDecorationLocation.Overline"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T LocationOverline<T>(this T obj) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.LocationProperty] = Avalonia.Media.TextDecorationLocation.Overline;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.LocationProperty"/> property value to <see cref="Avalonia.Media.TextDecorationLocation.Strikethrough"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T LocationStrikethrough<T>(this T obj) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.LocationProperty] = Avalonia.Media.TextDecorationLocation.Strikethrough;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.LocationProperty"/> property value to <see cref="Avalonia.Media.TextDecorationLocation.Baseline"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T LocationBaseline<T>(this T obj) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.LocationProperty] = Avalonia.Media.TextDecorationLocation.Baseline;
        return obj;
    }

    // Avalonia.Media.TextDecoration.StrokeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.StrokeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Stroke<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.StrokeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.StrokeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Stroke<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.StrokeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Stroke<T>(
        this T obj,
        IObservable<Avalonia.Media.IBrush> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.TextDecoration.StrokeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.TextDecoration.StrokeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStroke(
        this Avalonia.Media.TextDecoration obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.TextDecoration.StrokeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IBrush> ObserveStroke(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetObservable(Avalonia.Media.TextDecoration.StrokeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.TextDecoration.StrokeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStroke<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetObservable(Avalonia.Media.TextDecoration.StrokeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.TextDecoration.StrokeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.IBrush>> ObserveBindingStroke(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.TextDecoration.StrokeProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.TextDecoration.StrokeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingStroke<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<BindingValue<Avalonia.Media.IBrush>>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.TextDecoration.StrokeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.TextDecoration.StrokeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveStrokeChanged(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.StrokeProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.TextDecoration.StrokeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeChanged<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.StrokeProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeThicknessUnit<T>(this T obj, Avalonia.Media.TextDecorationUnit value) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeThicknessUnit<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeThicknessUnit<T>(
        this T obj,
        IObservable<Avalonia.Media.TextDecorationUnit> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStrokeThicknessUnit(
        this Avalonia.Media.TextDecoration obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.TextDecorationUnit> ObserveStrokeThicknessUnit(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetObservable(Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeThicknessUnit<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<Avalonia.Media.TextDecorationUnit>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetObservable(Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.TextDecorationUnit>> ObserveBindingStrokeThicknessUnit(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingStrokeThicknessUnit<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<BindingValue<Avalonia.Media.TextDecorationUnit>>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveStrokeThicknessUnitChanged(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeThicknessUnitChanged<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty"/> property value to <see cref="Avalonia.Media.TextDecorationUnit.FontRecommended"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeThicknessUnitFontRecommended<T>(this T obj) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty] = Avalonia.Media.TextDecorationUnit.FontRecommended;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty"/> property value to <see cref="Avalonia.Media.TextDecorationUnit.FontRenderingEmSize"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeThicknessUnitFontRenderingEmSize<T>(this T obj) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty] = Avalonia.Media.TextDecorationUnit.FontRenderingEmSize;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty"/> property value to <see cref="Avalonia.Media.TextDecorationUnit.Pixel"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeThicknessUnitPixel<T>(this T obj) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.StrokeThicknessUnitProperty] = Avalonia.Media.TextDecorationUnit.Pixel;
        return obj;
    }

    // Avalonia.Media.TextDecoration.StrokeDashArrayProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.StrokeDashArrayProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeDashArray<T>(this T obj, Avalonia.Collections.AvaloniaList<System.Double> value) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.StrokeDashArrayProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.StrokeDashArrayProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeDashArray<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeDashArrayProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.StrokeDashArrayProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeDashArray<T>(
        this T obj,
        IObservable<Avalonia.Collections.AvaloniaList<System.Double>> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeDashArrayProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.TextDecoration.StrokeDashArrayProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.TextDecoration.StrokeDashArrayProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStrokeDashArray(
        this Avalonia.Media.TextDecoration obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeDashArrayProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.TextDecoration.StrokeDashArrayProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Collections.AvaloniaList<System.Double>> ObserveStrokeDashArray(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetObservable(Avalonia.Media.TextDecoration.StrokeDashArrayProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.TextDecoration.StrokeDashArrayProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeDashArray<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<Avalonia.Collections.AvaloniaList<System.Double>>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetObservable(Avalonia.Media.TextDecoration.StrokeDashArrayProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.TextDecoration.StrokeDashArrayProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Collections.AvaloniaList<System.Double>>> ObserveBindingStrokeDashArray(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.TextDecoration.StrokeDashArrayProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.TextDecoration.StrokeDashArrayProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingStrokeDashArray<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<BindingValue<Avalonia.Collections.AvaloniaList<System.Double>>>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.TextDecoration.StrokeDashArrayProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.TextDecoration.StrokeDashArrayProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveStrokeDashArrayChanged(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.StrokeDashArrayProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.TextDecoration.StrokeDashArrayProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeDashArrayChanged<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.StrokeDashArrayProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.TextDecoration.StrokeDashOffsetProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.StrokeDashOffsetProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeDashOffset<T>(this T obj, System.Double value) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.StrokeDashOffsetProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.StrokeDashOffsetProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeDashOffset<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeDashOffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.StrokeDashOffsetProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeDashOffset<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeDashOffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.TextDecoration.StrokeDashOffsetProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.TextDecoration.StrokeDashOffsetProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStrokeDashOffset(
        this Avalonia.Media.TextDecoration obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeDashOffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.TextDecoration.StrokeDashOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveStrokeDashOffset(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetObservable(Avalonia.Media.TextDecoration.StrokeDashOffsetProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.TextDecoration.StrokeDashOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeDashOffset<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<System.Double>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetObservable(Avalonia.Media.TextDecoration.StrokeDashOffsetProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.TextDecoration.StrokeDashOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingStrokeDashOffset(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.TextDecoration.StrokeDashOffsetProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.TextDecoration.StrokeDashOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingStrokeDashOffset<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.TextDecoration.StrokeDashOffsetProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.TextDecoration.StrokeDashOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveStrokeDashOffsetChanged(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.StrokeDashOffsetProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.TextDecoration.StrokeDashOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeDashOffsetChanged<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.StrokeDashOffsetProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.TextDecoration.StrokeThicknessProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.StrokeThicknessProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeThickness<T>(this T obj, System.Double value) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.StrokeThicknessProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.StrokeThicknessProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeThickness<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeThicknessProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.StrokeThicknessProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeThickness<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeThicknessProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.TextDecoration.StrokeThicknessProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.TextDecoration.StrokeThicknessProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStrokeThickness(
        this Avalonia.Media.TextDecoration obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeThicknessProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.TextDecoration.StrokeThicknessProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveStrokeThickness(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetObservable(Avalonia.Media.TextDecoration.StrokeThicknessProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.TextDecoration.StrokeThicknessProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeThickness<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<System.Double>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetObservable(Avalonia.Media.TextDecoration.StrokeThicknessProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.TextDecoration.StrokeThicknessProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingStrokeThickness(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.TextDecoration.StrokeThicknessProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.TextDecoration.StrokeThicknessProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingStrokeThickness<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.TextDecoration.StrokeThicknessProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.TextDecoration.StrokeThicknessProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveStrokeThicknessChanged(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.StrokeThicknessProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.TextDecoration.StrokeThicknessProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeThicknessChanged<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.StrokeThicknessProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.TextDecoration.StrokeLineCapProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.StrokeLineCapProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeLineCap<T>(this T obj, Avalonia.Media.PenLineCap value) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.StrokeLineCapProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.StrokeLineCapProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeLineCap<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeLineCapProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.StrokeLineCapProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeLineCap<T>(
        this T obj,
        IObservable<Avalonia.Media.PenLineCap> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeLineCapProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.TextDecoration.StrokeLineCapProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.TextDecoration.StrokeLineCapProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStrokeLineCap(
        this Avalonia.Media.TextDecoration obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeLineCapProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.TextDecoration.StrokeLineCapProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.PenLineCap> ObserveStrokeLineCap(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetObservable(Avalonia.Media.TextDecoration.StrokeLineCapProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.TextDecoration.StrokeLineCapProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeLineCap<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<Avalonia.Media.PenLineCap>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetObservable(Avalonia.Media.TextDecoration.StrokeLineCapProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.TextDecoration.StrokeLineCapProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.PenLineCap>> ObserveBindingStrokeLineCap(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.TextDecoration.StrokeLineCapProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.TextDecoration.StrokeLineCapProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingStrokeLineCap<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<BindingValue<Avalonia.Media.PenLineCap>>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.TextDecoration.StrokeLineCapProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.TextDecoration.StrokeLineCapProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveStrokeLineCapChanged(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.StrokeLineCapProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.TextDecoration.StrokeLineCapProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeLineCapChanged<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.StrokeLineCapProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.StrokeLineCapProperty"/> property value to <see cref="Avalonia.Media.PenLineCap.Flat"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeLineCapFlat<T>(this T obj) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.StrokeLineCapProperty] = Avalonia.Media.PenLineCap.Flat;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.StrokeLineCapProperty"/> property value to <see cref="Avalonia.Media.PenLineCap.Round"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeLineCapRound<T>(this T obj) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.StrokeLineCapProperty] = Avalonia.Media.PenLineCap.Round;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.StrokeLineCapProperty"/> property value to <see cref="Avalonia.Media.PenLineCap.Square"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeLineCapSquare<T>(this T obj) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.StrokeLineCapProperty] = Avalonia.Media.PenLineCap.Square;
        return obj;
    }

    // Avalonia.Media.TextDecoration.StrokeOffsetProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.StrokeOffsetProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeOffset<T>(this T obj, System.Double value) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.StrokeOffsetProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.StrokeOffsetProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeOffset<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeOffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.StrokeOffsetProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeOffset<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeOffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.TextDecoration.StrokeOffsetProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.TextDecoration.StrokeOffsetProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStrokeOffset(
        this Avalonia.Media.TextDecoration obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeOffsetProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.TextDecoration.StrokeOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveStrokeOffset(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetObservable(Avalonia.Media.TextDecoration.StrokeOffsetProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.TextDecoration.StrokeOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeOffset<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<System.Double>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetObservable(Avalonia.Media.TextDecoration.StrokeOffsetProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.TextDecoration.StrokeOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingStrokeOffset(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.TextDecoration.StrokeOffsetProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.TextDecoration.StrokeOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingStrokeOffset<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.TextDecoration.StrokeOffsetProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.TextDecoration.StrokeOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveStrokeOffsetChanged(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.StrokeOffsetProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.TextDecoration.StrokeOffsetProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeOffsetChanged<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.StrokeOffsetProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeOffsetUnit<T>(this T obj, Avalonia.Media.TextDecorationUnit value) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeOffsetUnit<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeOffsetUnit<T>(
        this T obj,
        IObservable<Avalonia.Media.TextDecorationUnit> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.TextDecoration
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStrokeOffsetUnit(
        this Avalonia.Media.TextDecoration obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.TextDecorationUnit> ObserveStrokeOffsetUnit(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetObservable(Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeOffsetUnit<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<Avalonia.Media.TextDecorationUnit>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetObservable(Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.TextDecorationUnit>> ObserveBindingStrokeOffsetUnit(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingStrokeOffsetUnit<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<BindingValue<Avalonia.Media.TextDecorationUnit>>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveStrokeOffsetUnitChanged(this Avalonia.Media.TextDecoration obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStrokeOffsetUnitChanged<T>(this T obj, Action<Avalonia.Media.TextDecoration, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.TextDecoration
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty"/> property value to <see cref="Avalonia.Media.TextDecorationUnit.FontRecommended"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeOffsetUnitFontRecommended<T>(this T obj) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty] = Avalonia.Media.TextDecorationUnit.FontRecommended;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty"/> property value to <see cref="Avalonia.Media.TextDecorationUnit.FontRenderingEmSize"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeOffsetUnitFontRenderingEmSize<T>(this T obj) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty] = Avalonia.Media.TextDecorationUnit.FontRenderingEmSize;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty"/> property value to <see cref="Avalonia.Media.TextDecorationUnit.Pixel"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StrokeOffsetUnitPixel<T>(this T obj) where T : Avalonia.Media.TextDecoration
    {
        obj[Avalonia.Media.TextDecoration.StrokeOffsetUnitProperty] = Avalonia.Media.TextDecorationUnit.Pixel;
        return obj;
    }
}
