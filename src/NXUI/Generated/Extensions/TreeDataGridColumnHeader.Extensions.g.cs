// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader"/> class property extension methods.
/// </summary>
public static partial class TreeDataGridColumnHeaderExtensions
{
    // Avalonia.Controls.Primitives.TreeDataGridColumnHeader.CanUserResizeProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.CanUserResizeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.CanUserResizeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCanUserResize(
        this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.TreeDataGridColumnHeader.CanUserResizeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.CanUserResizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveCanUserResize(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.CanUserResizeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.CanUserResizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.TreeDataGridColumnHeader OnCanUserResize(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj, Action<Avalonia.Controls.Primitives.TreeDataGridColumnHeader, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.CanUserResizeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.CanUserResizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingCanUserResize(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.CanUserResizeProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.CanUserResizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.TreeDataGridColumnHeader OnBindingCanUserResize(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj, Action<Avalonia.Controls.Primitives.TreeDataGridColumnHeader, IObservable<BindingValue<System.Boolean>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.CanUserResizeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.CanUserResizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveCanUserResizeChanged(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.CanUserResizeProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.CanUserResizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.TreeDataGridColumnHeader OnCanUserResizeChanged(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj, Action<Avalonia.Controls.Primitives.TreeDataGridColumnHeader, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.CanUserResizeProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.TreeDataGridColumnHeader.HeaderProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.HeaderProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.HeaderProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHeader(
        this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.TreeDataGridColumnHeader.HeaderProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.HeaderProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObserveHeader(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.HeaderProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.HeaderProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.TreeDataGridColumnHeader OnHeader(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj, Action<Avalonia.Controls.Primitives.TreeDataGridColumnHeader, IObservable<System.Object>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.HeaderProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.HeaderProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Object>> ObserveBindingHeader(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.HeaderProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.HeaderProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.TreeDataGridColumnHeader OnBindingHeader(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj, Action<Avalonia.Controls.Primitives.TreeDataGridColumnHeader, IObservable<BindingValue<System.Object>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.HeaderProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.HeaderProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveHeaderChanged(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.HeaderProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.HeaderProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.TreeDataGridColumnHeader OnHeaderChanged(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj, Action<Avalonia.Controls.Primitives.TreeDataGridColumnHeader, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.HeaderProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.TreeDataGridColumnHeader.SortDirectionProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.SortDirectionProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.SortDirectionProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSortDirection(
        this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.TreeDataGridColumnHeader.SortDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.SortDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Nullable<System.ComponentModel.ListSortDirection>> ObserveSortDirection(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.SortDirectionProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.SortDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.TreeDataGridColumnHeader OnSortDirection(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj, Action<Avalonia.Controls.Primitives.TreeDataGridColumnHeader, IObservable<System.Nullable<System.ComponentModel.ListSortDirection>>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.SortDirectionProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.SortDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Nullable<System.ComponentModel.ListSortDirection>>> ObserveBindingSortDirection(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.SortDirectionProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.SortDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.TreeDataGridColumnHeader OnBindingSortDirection(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj, Action<Avalonia.Controls.Primitives.TreeDataGridColumnHeader, IObservable<BindingValue<System.Nullable<System.ComponentModel.ListSortDirection>>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.SortDirectionProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.SortDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveSortDirectionChanged(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.SortDirectionProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.TreeDataGridColumnHeader.SortDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.TreeDataGridColumnHeader OnSortDirectionChanged(this Avalonia.Controls.Primitives.TreeDataGridColumnHeader obj, Action<Avalonia.Controls.Primitives.TreeDataGridColumnHeader, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.TreeDataGridColumnHeader.SortDirectionProperty);
        handler(obj, observable);
        return obj;
    }
}
