// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.TransitioningContentControl"/> class property extension methods.
/// </summary>
public static partial class TransitioningContentControlExtensions
{
    // Avalonia.Controls.TransitioningContentControl.PageTransitionProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TransitioningContentControl.PageTransitionProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PageTransition<T>(this T obj, Avalonia.Animation.IPageTransition value) where T : Avalonia.Controls.TransitioningContentControl
    {
        obj[Avalonia.Controls.TransitioningContentControl.PageTransitionProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TransitioningContentControl.PageTransitionProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PageTransition<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TransitioningContentControl
    {
        var descriptor = Avalonia.Controls.TransitioningContentControl.PageTransitionProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TransitioningContentControl.PageTransitionProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PageTransition<T>(
        this T obj,
        IObservable<Avalonia.Animation.IPageTransition> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TransitioningContentControl
    {
        var descriptor = Avalonia.Controls.TransitioningContentControl.PageTransitionProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TransitioningContentControl.PageTransitionProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TransitioningContentControl.PageTransitionProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPageTransition(
        this Avalonia.Controls.TransitioningContentControl obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TransitioningContentControl.PageTransitionProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TransitioningContentControl.PageTransitionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Animation.IPageTransition> ObservePageTransition(this Avalonia.Controls.TransitioningContentControl obj)
    {
        return obj.GetObservable(Avalonia.Controls.TransitioningContentControl.PageTransitionProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TransitioningContentControl.PageTransitionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPageTransition<T>(this T obj, Action<Avalonia.Controls.TransitioningContentControl, IObservable<Avalonia.Animation.IPageTransition>> handler) where T : Avalonia.Controls.TransitioningContentControl
    {
        var observable = obj.GetObservable(Avalonia.Controls.TransitioningContentControl.PageTransitionProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TransitioningContentControl.IsTransitionReversedProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TransitioningContentControl.IsTransitionReversedProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsTransitionReversed<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TransitioningContentControl
    {
        obj[Avalonia.Controls.TransitioningContentControl.IsTransitionReversedProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TransitioningContentControl.IsTransitionReversedProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsTransitionReversed<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TransitioningContentControl
    {
        var descriptor = Avalonia.Controls.TransitioningContentControl.IsTransitionReversedProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TransitioningContentControl.IsTransitionReversedProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsTransitionReversed<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TransitioningContentControl
    {
        var descriptor = Avalonia.Controls.TransitioningContentControl.IsTransitionReversedProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TransitioningContentControl.IsTransitionReversedProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TransitioningContentControl.IsTransitionReversedProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsTransitionReversed(
        this Avalonia.Controls.TransitioningContentControl obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TransitioningContentControl.IsTransitionReversedProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TransitioningContentControl.IsTransitionReversedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsTransitionReversed(this Avalonia.Controls.TransitioningContentControl obj)
    {
        return obj.GetObservable(Avalonia.Controls.TransitioningContentControl.IsTransitionReversedProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TransitioningContentControl.IsTransitionReversedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsTransitionReversed<T>(this T obj, Action<Avalonia.Controls.TransitioningContentControl, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.TransitioningContentControl
    {
        var observable = obj.GetObservable(Avalonia.Controls.TransitioningContentControl.IsTransitionReversedProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TransitioningContentControl.TransitionCompletedEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.TransitioningContentControl.TransitionCompletedEvent"/> event on an object of type <see cref="Avalonia.Controls.TransitioningContentControl"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnTransitionCompletedHandler<T>(
        this T obj,
        Action<T, Avalonia.Controls.TransitionCompletedEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct) where T : Avalonia.Controls.TransitioningContentControl
    {
        obj.AddHandler(Avalonia.Controls.TransitioningContentControl.TransitionCompletedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.TransitioningContentControl.TransitionCompletedEvent"/> event on an object of type <see cref="Avalonia.Controls.TransitioningContentControl"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnTransitionCompleted<T>(
        this T obj, Action<T, IObservable<Avalonia.Controls.TransitionCompletedEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct) where T : Avalonia.Controls.TransitioningContentControl
    {
        var observable = obj.GetObservable(Avalonia.Controls.TransitioningContentControl.TransitionCompletedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.TransitioningContentControl.TransitionCompletedEvent"/> event on an object of type <see cref="Avalonia.Controls.TransitioningContentControl"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Controls.TransitionCompletedEventArgs> ObserveOnTransitionCompleted(
        this Avalonia.Controls.TransitioningContentControl obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct)
    {
        return obj.GetObservable(Avalonia.Controls.TransitioningContentControl.TransitionCompletedEvent, routes);
    }

    // Avalonia.Controls.TransitioningContentControl.TransitionCompleted

    /// <summary>
    /// Adds a handler to the `TransitionCompleted` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnTransitionCompletedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.TransitionCompletedEventArgs>> handler) where T : Avalonia.Controls.TransitioningContentControl
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Controls.TransitionCompletedEventArgs>, Avalonia.Controls.TransitionCompletedEventArgs>(
                h => obj.TransitionCompleted += h, 
                h => obj.TransitionCompleted -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `TransitionCompleted` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `TransitionCompleted` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.TransitionCompletedEventArgs> ObserveOnTransitionCompletedEvent(this Avalonia.Controls.TransitioningContentControl obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Controls.TransitionCompletedEventArgs>, Avalonia.Controls.TransitionCompletedEventArgs>(
                h => obj.TransitionCompleted += h, 
                h => obj.TransitionCompleted -= h)
            .Select(x => x.EventArgs);
    }
}
