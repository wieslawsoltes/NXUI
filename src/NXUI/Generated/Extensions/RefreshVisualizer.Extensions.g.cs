// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.RefreshVisualizer"/> class property extension methods.
/// </summary>
public static partial class RefreshVisualizerExtensions
{
    // Avalonia.Controls.RefreshVisualizer.RefreshVisualizerStateProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.RefreshVisualizer.RefreshVisualizerStateProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.RefreshVisualizer.RefreshVisualizerStateProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRefreshVisualizerState(
        this Avalonia.Controls.RefreshVisualizer obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.RefreshVisualizer.RefreshVisualizerStateProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.RefreshVisualizer.RefreshVisualizerStateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.RefreshVisualizerState> ObserveRefreshVisualizerState(this Avalonia.Controls.RefreshVisualizer obj)
    {
        return obj.GetObservable(Avalonia.Controls.RefreshVisualizer.RefreshVisualizerStateProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.RefreshVisualizer.RefreshVisualizerStateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.RefreshVisualizer OnRefreshVisualizerState(this Avalonia.Controls.RefreshVisualizer obj, Action<Avalonia.Controls.RefreshVisualizer, IObservable<Avalonia.Controls.RefreshVisualizerState>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.RefreshVisualizer.RefreshVisualizerStateProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.RefreshVisualizer.RefreshVisualizerStateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.RefreshVisualizerState>> ObserveBindingRefreshVisualizerState(this Avalonia.Controls.RefreshVisualizer obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.RefreshVisualizer.RefreshVisualizerStateProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.RefreshVisualizer.RefreshVisualizerStateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.RefreshVisualizer OnBindingRefreshVisualizerState(this Avalonia.Controls.RefreshVisualizer obj, Action<Avalonia.Controls.RefreshVisualizer, IObservable<BindingValue<Avalonia.Controls.RefreshVisualizerState>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.RefreshVisualizer.RefreshVisualizerStateProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.RefreshVisualizer.RefreshVisualizerStateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveRefreshVisualizerStateChanged(this Avalonia.Controls.RefreshVisualizer obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.RefreshVisualizer.RefreshVisualizerStateProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.RefreshVisualizer.RefreshVisualizerStateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.RefreshVisualizer OnRefreshVisualizerStateChanged(this Avalonia.Controls.RefreshVisualizer obj, Action<Avalonia.Controls.RefreshVisualizer, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.RefreshVisualizer.RefreshVisualizerStateProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.RefreshVisualizer.OrientationProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RefreshVisualizer.OrientationProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Orientation<T>(this T obj, Avalonia.Controls.RefreshVisualizerOrientation value) where T : Avalonia.Controls.RefreshVisualizer
    {
        obj[Avalonia.Controls.RefreshVisualizer.OrientationProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RefreshVisualizer.OrientationProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Orientation<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.RefreshVisualizer
    {
        var descriptor = Avalonia.Controls.RefreshVisualizer.OrientationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RefreshVisualizer.OrientationProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Orientation<T>(
        this T obj,
        IObservable<Avalonia.Controls.RefreshVisualizerOrientation> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.RefreshVisualizer
    {
        var descriptor = Avalonia.Controls.RefreshVisualizer.OrientationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.RefreshVisualizer.OrientationProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.RefreshVisualizer.OrientationProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindOrientation(
        this Avalonia.Controls.RefreshVisualizer obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.RefreshVisualizer.OrientationProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.RefreshVisualizer.OrientationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.RefreshVisualizerOrientation> ObserveOrientation(this Avalonia.Controls.RefreshVisualizer obj)
    {
        return obj.GetObservable(Avalonia.Controls.RefreshVisualizer.OrientationProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.RefreshVisualizer.OrientationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnOrientation<T>(this T obj, Action<Avalonia.Controls.RefreshVisualizer, IObservable<Avalonia.Controls.RefreshVisualizerOrientation>> handler) where T : Avalonia.Controls.RefreshVisualizer
    {
        var observable = obj.GetObservable(Avalonia.Controls.RefreshVisualizer.OrientationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.RefreshVisualizer.OrientationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.RefreshVisualizerOrientation>> ObserveBindingOrientation(this Avalonia.Controls.RefreshVisualizer obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.RefreshVisualizer.OrientationProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.RefreshVisualizer.OrientationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingOrientation<T>(this T obj, Action<Avalonia.Controls.RefreshVisualizer, IObservable<BindingValue<Avalonia.Controls.RefreshVisualizerOrientation>>> handler) where T : Avalonia.Controls.RefreshVisualizer
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.RefreshVisualizer.OrientationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.RefreshVisualizer.OrientationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveOrientationChanged(this Avalonia.Controls.RefreshVisualizer obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.RefreshVisualizer.OrientationProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.RefreshVisualizer.OrientationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnOrientationChanged<T>(this T obj, Action<Avalonia.Controls.RefreshVisualizer, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.RefreshVisualizer
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.RefreshVisualizer.OrientationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RefreshVisualizer.OrientationProperty"/> property value to <see cref="Avalonia.Controls.RefreshVisualizerOrientation.Auto"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OrientationAuto<T>(this T obj) where T : Avalonia.Controls.RefreshVisualizer
    {
        obj[Avalonia.Controls.RefreshVisualizer.OrientationProperty] = Avalonia.Controls.RefreshVisualizerOrientation.Auto;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RefreshVisualizer.OrientationProperty"/> property value to <see cref="Avalonia.Controls.RefreshVisualizerOrientation.Normal"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OrientationNormal<T>(this T obj) where T : Avalonia.Controls.RefreshVisualizer
    {
        obj[Avalonia.Controls.RefreshVisualizer.OrientationProperty] = Avalonia.Controls.RefreshVisualizerOrientation.Normal;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RefreshVisualizer.OrientationProperty"/> property value to <see cref="Avalonia.Controls.RefreshVisualizerOrientation.Rotate90DegreesCounterclockwise"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OrientationRotate90DegreesCounterclockwise<T>(this T obj) where T : Avalonia.Controls.RefreshVisualizer
    {
        obj[Avalonia.Controls.RefreshVisualizer.OrientationProperty] = Avalonia.Controls.RefreshVisualizerOrientation.Rotate90DegreesCounterclockwise;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RefreshVisualizer.OrientationProperty"/> property value to <see cref="Avalonia.Controls.RefreshVisualizerOrientation.Rotate270DegreesCounterclockwise"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OrientationRotate270DegreesCounterclockwise<T>(this T obj) where T : Avalonia.Controls.RefreshVisualizer
    {
        obj[Avalonia.Controls.RefreshVisualizer.OrientationProperty] = Avalonia.Controls.RefreshVisualizerOrientation.Rotate270DegreesCounterclockwise;
        return obj;
    }

    // Avalonia.Controls.RefreshVisualizer.RefreshRequestedEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.RefreshVisualizer.RefreshRequestedEvent"/> event on an object of type <see cref="Avalonia.Controls.RefreshVisualizer"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnRefreshRequestedHandler<T>(
        this T obj,
        Action<T, Avalonia.Controls.RefreshRequestedEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.RefreshVisualizer
    {
        obj.AddHandler(Avalonia.Controls.RefreshVisualizer.RefreshRequestedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.RefreshVisualizer.RefreshRequestedEvent"/> event on an object of type <see cref="Avalonia.Controls.RefreshVisualizer"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnRefreshRequested<T>(
        this T obj, Action<T, IObservable<Avalonia.Controls.RefreshRequestedEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.RefreshVisualizer
    {
        var observable = obj.GetObservable(Avalonia.Controls.RefreshVisualizer.RefreshRequestedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.RefreshVisualizer.RefreshRequestedEvent"/> event on an object of type <see cref="Avalonia.Controls.RefreshVisualizer"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Controls.RefreshRequestedEventArgs> ObserveOnRefreshRequested(
        this Avalonia.Controls.RefreshVisualizer obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.RefreshVisualizer.RefreshRequestedEvent, routes);
    }

    // Avalonia.Controls.RefreshVisualizer.RefreshRequested

    /// <summary>
    /// Adds a handler to the `RefreshRequested` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRefreshRequestedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.RefreshRequestedEventArgs>> handler) where T : Avalonia.Controls.RefreshVisualizer
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.RefreshRequestedEventArgs>, Avalonia.Controls.RefreshRequestedEventArgs>(
                h => obj.RefreshRequested += h, 
                h => obj.RefreshRequested -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `RefreshRequested` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `RefreshRequested` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.RefreshRequestedEventArgs> ObserveOnRefreshRequestedEvent(this Avalonia.Controls.RefreshVisualizer obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.RefreshRequestedEventArgs>, Avalonia.Controls.RefreshRequestedEventArgs>(
                h => obj.RefreshRequested += h, 
                h => obj.RefreshRequested -= h)
            .Select(x => x.EventArgs);
    }
}
