// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.SplitView"/> class property extension methods.
/// </summary>
public static partial class SplitViewExtensions
{
    // Avalonia.Controls.SplitView.CompactPaneLengthProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SplitView.CompactPaneLengthProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CompactPaneLength<T>(this T obj, System.Double value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.CompactPaneLengthProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.CompactPaneLengthProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CompactPaneLength<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.CompactPaneLengthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.CompactPaneLengthProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CompactPaneLength<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.CompactPaneLengthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.SplitView.CompactPaneLengthProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.SplitView.CompactPaneLengthProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCompactPaneLength(
        this Avalonia.Controls.SplitView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.SplitView.CompactPaneLengthProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.SplitView.CompactPaneLengthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveCompactPaneLength(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.CompactPaneLengthProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.SplitView.CompactPaneLengthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCompactPaneLength<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<System.Double>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.CompactPaneLengthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.SplitView.CompactPaneLengthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingCompactPaneLength(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.SplitView.CompactPaneLengthProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.SplitView.CompactPaneLengthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingCompactPaneLength<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.SplitView.CompactPaneLengthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.SplitView.CompactPaneLengthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveCompactPaneLengthChanged(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.CompactPaneLengthProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.SplitView.CompactPaneLengthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCompactPaneLengthChanged<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.CompactPaneLengthProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.SplitView.DisplayModeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SplitView.DisplayModeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayMode<T>(this T obj, Avalonia.Controls.SplitViewDisplayMode value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.DisplayModeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.DisplayModeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayMode<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.DisplayModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.DisplayModeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayMode<T>(
        this T obj,
        IObservable<Avalonia.Controls.SplitViewDisplayMode> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.DisplayModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.SplitView.DisplayModeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.SplitView.DisplayModeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDisplayMode(
        this Avalonia.Controls.SplitView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.SplitView.DisplayModeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.SplitView.DisplayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.SplitViewDisplayMode> ObserveDisplayMode(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.DisplayModeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.SplitView.DisplayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDisplayMode<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<Avalonia.Controls.SplitViewDisplayMode>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.DisplayModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.SplitView.DisplayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.SplitViewDisplayMode>> ObserveBindingDisplayMode(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.SplitView.DisplayModeProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.SplitView.DisplayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingDisplayMode<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<BindingValue<Avalonia.Controls.SplitViewDisplayMode>>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.SplitView.DisplayModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.SplitView.DisplayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDisplayModeChanged(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.DisplayModeProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.SplitView.DisplayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDisplayModeChanged<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.DisplayModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SplitView.DisplayModeProperty"/> property value to <see cref="Avalonia.Controls.SplitViewDisplayMode.Inline"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayModeInline<T>(this T obj) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.DisplayModeProperty] = Avalonia.Controls.SplitViewDisplayMode.Inline;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SplitView.DisplayModeProperty"/> property value to <see cref="Avalonia.Controls.SplitViewDisplayMode.CompactInline"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayModeCompactInline<T>(this T obj) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.DisplayModeProperty] = Avalonia.Controls.SplitViewDisplayMode.CompactInline;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SplitView.DisplayModeProperty"/> property value to <see cref="Avalonia.Controls.SplitViewDisplayMode.Overlay"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayModeOverlay<T>(this T obj) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.DisplayModeProperty] = Avalonia.Controls.SplitViewDisplayMode.Overlay;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SplitView.DisplayModeProperty"/> property value to <see cref="Avalonia.Controls.SplitViewDisplayMode.CompactOverlay"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayModeCompactOverlay<T>(this T obj) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.DisplayModeProperty] = Avalonia.Controls.SplitViewDisplayMode.CompactOverlay;
        return obj;
    }

    // Avalonia.Controls.SplitView.IsPaneOpenProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SplitView.IsPaneOpenProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsPaneOpen<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.IsPaneOpenProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.IsPaneOpenProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsPaneOpen<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.IsPaneOpenProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.IsPaneOpenProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsPaneOpen<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.IsPaneOpenProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.SplitView.IsPaneOpenProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.SplitView.IsPaneOpenProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsPaneOpen(
        this Avalonia.Controls.SplitView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.SplitView.IsPaneOpenProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.SplitView.IsPaneOpenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsPaneOpen(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.IsPaneOpenProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.SplitView.IsPaneOpenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsPaneOpen<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.IsPaneOpenProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.SplitView.IsPaneOpenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsPaneOpen(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.SplitView.IsPaneOpenProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.SplitView.IsPaneOpenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsPaneOpen<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.SplitView.IsPaneOpenProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.SplitView.IsPaneOpenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsPaneOpenChanged(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.IsPaneOpenProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.SplitView.IsPaneOpenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsPaneOpenChanged<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.IsPaneOpenProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.SplitView.OpenPaneLengthProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SplitView.OpenPaneLengthProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OpenPaneLength<T>(this T obj, System.Double value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.OpenPaneLengthProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.OpenPaneLengthProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OpenPaneLength<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.OpenPaneLengthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.OpenPaneLengthProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OpenPaneLength<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.OpenPaneLengthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.SplitView.OpenPaneLengthProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.SplitView.OpenPaneLengthProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindOpenPaneLength(
        this Avalonia.Controls.SplitView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.SplitView.OpenPaneLengthProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.SplitView.OpenPaneLengthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveOpenPaneLength(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.OpenPaneLengthProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.SplitView.OpenPaneLengthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnOpenPaneLength<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<System.Double>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.OpenPaneLengthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.SplitView.OpenPaneLengthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingOpenPaneLength(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.SplitView.OpenPaneLengthProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.SplitView.OpenPaneLengthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingOpenPaneLength<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.SplitView.OpenPaneLengthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.SplitView.OpenPaneLengthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveOpenPaneLengthChanged(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.OpenPaneLengthProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.SplitView.OpenPaneLengthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnOpenPaneLengthChanged<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.OpenPaneLengthProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.SplitView.PaneBackgroundProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SplitView.PaneBackgroundProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PaneBackground<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.PaneBackgroundProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.PaneBackgroundProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PaneBackground<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.PaneBackgroundProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.PaneBackgroundProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PaneBackground<T>(
        this T obj,
        IObservable<Avalonia.Media.IBrush> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.PaneBackgroundProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.SplitView.PaneBackgroundProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.SplitView.PaneBackgroundProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPaneBackground(
        this Avalonia.Controls.SplitView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.SplitView.PaneBackgroundProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.SplitView.PaneBackgroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IBrush> ObservePaneBackground(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.PaneBackgroundProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.SplitView.PaneBackgroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPaneBackground<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.PaneBackgroundProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.SplitView.PaneBackgroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.IBrush>> ObserveBindingPaneBackground(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.SplitView.PaneBackgroundProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.SplitView.PaneBackgroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingPaneBackground<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<BindingValue<Avalonia.Media.IBrush>>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.SplitView.PaneBackgroundProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.SplitView.PaneBackgroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObservePaneBackgroundChanged(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.PaneBackgroundProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.SplitView.PaneBackgroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPaneBackgroundChanged<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.PaneBackgroundProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.SplitView.PanePlacementProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SplitView.PanePlacementProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PanePlacement<T>(this T obj, Avalonia.Controls.SplitViewPanePlacement value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.PanePlacementProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.PanePlacementProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PanePlacement<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.PanePlacementProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.PanePlacementProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PanePlacement<T>(
        this T obj,
        IObservable<Avalonia.Controls.SplitViewPanePlacement> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.PanePlacementProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.SplitView.PanePlacementProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.SplitView.PanePlacementProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPanePlacement(
        this Avalonia.Controls.SplitView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.SplitView.PanePlacementProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.SplitView.PanePlacementProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.SplitViewPanePlacement> ObservePanePlacement(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.PanePlacementProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.SplitView.PanePlacementProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPanePlacement<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<Avalonia.Controls.SplitViewPanePlacement>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.PanePlacementProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.SplitView.PanePlacementProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.SplitViewPanePlacement>> ObserveBindingPanePlacement(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.SplitView.PanePlacementProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.SplitView.PanePlacementProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingPanePlacement<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<BindingValue<Avalonia.Controls.SplitViewPanePlacement>>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.SplitView.PanePlacementProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.SplitView.PanePlacementProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObservePanePlacementChanged(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.PanePlacementProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.SplitView.PanePlacementProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPanePlacementChanged<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.PanePlacementProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SplitView.PanePlacementProperty"/> property value to <see cref="Avalonia.Controls.SplitViewPanePlacement.Left"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PanePlacementLeft<T>(this T obj) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.PanePlacementProperty] = Avalonia.Controls.SplitViewPanePlacement.Left;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SplitView.PanePlacementProperty"/> property value to <see cref="Avalonia.Controls.SplitViewPanePlacement.Right"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PanePlacementRight<T>(this T obj) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.PanePlacementProperty] = Avalonia.Controls.SplitViewPanePlacement.Right;
        return obj;
    }

    // Avalonia.Controls.SplitView.PaneProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SplitView.PaneProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Pane<T>(this T obj, System.Object value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.PaneProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.PaneProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Pane<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.PaneProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.PaneProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Pane<T>(
        this T obj,
        IObservable<System.Object> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.PaneProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.SplitView.PaneProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.SplitView.PaneProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPane(
        this Avalonia.Controls.SplitView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.SplitView.PaneProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.SplitView.PaneProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObservePane(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.PaneProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.SplitView.PaneProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPane<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<System.Object>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.PaneProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.SplitView.PaneProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Object>> ObserveBindingPane(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.SplitView.PaneProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.SplitView.PaneProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingPane<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<BindingValue<System.Object>>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.SplitView.PaneProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.SplitView.PaneProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObservePaneChanged(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.PaneProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.SplitView.PaneProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPaneChanged<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.PaneProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.SplitView.PaneTemplateProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SplitView.PaneTemplateProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PaneTemplate<T>(this T obj, Avalonia.Controls.Templates.IDataTemplate value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.PaneTemplateProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.PaneTemplateProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PaneTemplate<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.PaneTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.PaneTemplateProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PaneTemplate<T>(
        this T obj,
        IObservable<Avalonia.Controls.Templates.IDataTemplate> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.PaneTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.SplitView.PaneTemplateProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.SplitView.PaneTemplateProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPaneTemplate(
        this Avalonia.Controls.SplitView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.SplitView.PaneTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.SplitView.PaneTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Templates.IDataTemplate> ObservePaneTemplate(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.PaneTemplateProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.SplitView.PaneTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPaneTemplate<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<Avalonia.Controls.Templates.IDataTemplate>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.PaneTemplateProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.SplitView.PaneTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.Templates.IDataTemplate>> ObserveBindingPaneTemplate(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.SplitView.PaneTemplateProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.SplitView.PaneTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingPaneTemplate<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<BindingValue<Avalonia.Controls.Templates.IDataTemplate>>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.SplitView.PaneTemplateProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.SplitView.PaneTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObservePaneTemplateChanged(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.PaneTemplateProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.SplitView.PaneTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPaneTemplateChanged<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.PaneTemplateProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T UseLightDismissOverlayMode<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.SplitView
    {
        obj[Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T UseLightDismissOverlayMode<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T UseLightDismissOverlayMode<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.SplitView
    {
        var descriptor = Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindUseLightDismissOverlayMode(
        this Avalonia.Controls.SplitView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveUseLightDismissOverlayMode(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnUseLightDismissOverlayMode<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingUseLightDismissOverlayMode(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingUseLightDismissOverlayMode<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveUseLightDismissOverlayModeChanged(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnUseLightDismissOverlayModeChanged<T>(this T obj, Action<Avalonia.Controls.SplitView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.UseLightDismissOverlayModeProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.SplitView.TemplateSettingsProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.SplitView.TemplateSettingsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.SplitView.TemplateSettingsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindTemplateSettings(
        this Avalonia.Controls.SplitView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.SplitView.TemplateSettingsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.SplitView.TemplateSettingsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Primitives.SplitViewTemplateSettings> ObserveTemplateSettings(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.TemplateSettingsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.SplitView.TemplateSettingsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.SplitView OnTemplateSettings(this Avalonia.Controls.SplitView obj, Action<Avalonia.Controls.SplitView, IObservable<Avalonia.Controls.Primitives.SplitViewTemplateSettings>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.TemplateSettingsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.SplitView.TemplateSettingsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.Primitives.SplitViewTemplateSettings>> ObserveBindingTemplateSettings(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.SplitView.TemplateSettingsProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.SplitView.TemplateSettingsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.SplitView OnBindingTemplateSettings(this Avalonia.Controls.SplitView obj, Action<Avalonia.Controls.SplitView, IObservable<BindingValue<Avalonia.Controls.Primitives.SplitViewTemplateSettings>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.SplitView.TemplateSettingsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.SplitView.TemplateSettingsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveTemplateSettingsChanged(this Avalonia.Controls.SplitView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.TemplateSettingsProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.SplitView.TemplateSettingsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.SplitView OnTemplateSettingsChanged(this Avalonia.Controls.SplitView obj, Action<Avalonia.Controls.SplitView, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.SplitView.TemplateSettingsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.SplitView.PaneClosedEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.SplitView.PaneClosedEvent"/> event on an object of type <see cref="Avalonia.Controls.SplitView"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnPaneClosedHandler<T>(
        this T obj,
        Action<T, Avalonia.Interactivity.RoutedEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.SplitView
    {
        obj.AddHandler(Avalonia.Controls.SplitView.PaneClosedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.SplitView.PaneClosedEvent"/> event on an object of type <see cref="Avalonia.Controls.SplitView"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnPaneClosed<T>(
        this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.PaneClosedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.SplitView.PaneClosedEvent"/> event on an object of type <see cref="Avalonia.Controls.SplitView"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnPaneClosed(
        this Avalonia.Controls.SplitView obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.PaneClosedEvent, routes);
    }

    // Avalonia.Controls.SplitView.PaneClosingEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.SplitView.PaneClosingEvent"/> event on an object of type <see cref="Avalonia.Controls.SplitView"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnPaneClosingHandler<T>(
        this T obj,
        Action<T, Avalonia.Interactivity.CancelRoutedEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.SplitView
    {
        obj.AddHandler(Avalonia.Controls.SplitView.PaneClosingEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.SplitView.PaneClosingEvent"/> event on an object of type <see cref="Avalonia.Controls.SplitView"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnPaneClosing<T>(
        this T obj, Action<T, IObservable<Avalonia.Interactivity.CancelRoutedEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.PaneClosingEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.SplitView.PaneClosingEvent"/> event on an object of type <see cref="Avalonia.Controls.SplitView"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Interactivity.CancelRoutedEventArgs> ObserveOnPaneClosing(
        this Avalonia.Controls.SplitView obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.PaneClosingEvent, routes);
    }

    // Avalonia.Controls.SplitView.PaneOpenedEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.SplitView.PaneOpenedEvent"/> event on an object of type <see cref="Avalonia.Controls.SplitView"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnPaneOpenedHandler<T>(
        this T obj,
        Action<T, Avalonia.Interactivity.RoutedEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.SplitView
    {
        obj.AddHandler(Avalonia.Controls.SplitView.PaneOpenedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.SplitView.PaneOpenedEvent"/> event on an object of type <see cref="Avalonia.Controls.SplitView"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnPaneOpened<T>(
        this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.PaneOpenedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.SplitView.PaneOpenedEvent"/> event on an object of type <see cref="Avalonia.Controls.SplitView"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnPaneOpened(
        this Avalonia.Controls.SplitView obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.PaneOpenedEvent, routes);
    }

    // Avalonia.Controls.SplitView.PaneOpeningEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.SplitView.PaneOpeningEvent"/> event on an object of type <see cref="Avalonia.Controls.SplitView"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnPaneOpeningHandler<T>(
        this T obj,
        Action<T, Avalonia.Interactivity.CancelRoutedEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.SplitView
    {
        obj.AddHandler(Avalonia.Controls.SplitView.PaneOpeningEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.SplitView.PaneOpeningEvent"/> event on an object of type <see cref="Avalonia.Controls.SplitView"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnPaneOpening<T>(
        this T obj, Action<T, IObservable<Avalonia.Interactivity.CancelRoutedEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.SplitView
    {
        var observable = obj.GetObservable(Avalonia.Controls.SplitView.PaneOpeningEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.SplitView.PaneOpeningEvent"/> event on an object of type <see cref="Avalonia.Controls.SplitView"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Interactivity.CancelRoutedEventArgs> ObserveOnPaneOpening(
        this Avalonia.Controls.SplitView obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.SplitView.PaneOpeningEvent, routes);
    }

    // Avalonia.Controls.SplitView.PaneClosed

    /// <summary>
    /// Adds a handler to the `PaneClosed` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPaneClosedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.PaneClosed += h, 
                h => obj.PaneClosed -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `PaneClosed` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `PaneClosed` event on the specified object.</returns>
    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnPaneClosedEvent(this Avalonia.Controls.SplitView obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.PaneClosed += h, 
                h => obj.PaneClosed -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.SplitView.PaneClosing

    /// <summary>
    /// Adds a handler to the `PaneClosing` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPaneClosingEvent<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.CancelRoutedEventArgs>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Interactivity.CancelRoutedEventArgs>, Avalonia.Interactivity.CancelRoutedEventArgs>(
                h => obj.PaneClosing += h, 
                h => obj.PaneClosing -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `PaneClosing` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `PaneClosing` event on the specified object.</returns>
    public static IObservable<Avalonia.Interactivity.CancelRoutedEventArgs> ObserveOnPaneClosingEvent(this Avalonia.Controls.SplitView obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Interactivity.CancelRoutedEventArgs>, Avalonia.Interactivity.CancelRoutedEventArgs>(
                h => obj.PaneClosing += h, 
                h => obj.PaneClosing -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.SplitView.PaneOpened

    /// <summary>
    /// Adds a handler to the `PaneOpened` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPaneOpenedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.PaneOpened += h, 
                h => obj.PaneOpened -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `PaneOpened` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `PaneOpened` event on the specified object.</returns>
    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnPaneOpenedEvent(this Avalonia.Controls.SplitView obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Interactivity.RoutedEventArgs>, Avalonia.Interactivity.RoutedEventArgs>(
                h => obj.PaneOpened += h, 
                h => obj.PaneOpened -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.SplitView.PaneOpening

    /// <summary>
    /// Adds a handler to the `PaneOpening` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPaneOpeningEvent<T>(this T obj, Action<T, IObservable<Avalonia.Interactivity.CancelRoutedEventArgs>> handler) where T : Avalonia.Controls.SplitView
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Interactivity.CancelRoutedEventArgs>, Avalonia.Interactivity.CancelRoutedEventArgs>(
                h => obj.PaneOpening += h, 
                h => obj.PaneOpening -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `PaneOpening` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `PaneOpening` event on the specified object.</returns>
    public static IObservable<Avalonia.Interactivity.CancelRoutedEventArgs> ObserveOnPaneOpeningEvent(this Avalonia.Controls.SplitView obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Interactivity.CancelRoutedEventArgs>, Avalonia.Interactivity.CancelRoutedEventArgs>(
                h => obj.PaneOpening += h, 
                h => obj.PaneOpening -= h)
            .Select(x => x.EventArgs);
    }
}
