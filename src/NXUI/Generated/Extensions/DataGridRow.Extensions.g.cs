// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.DataGridRow"/> class property extension methods.
/// </summary>
public static partial class DataGridRowExtensions
{
    // Avalonia.Controls.DataGridRow.HeaderProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGridRow.HeaderProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Header<T>(this T obj, System.Object value) where T : Avalonia.Controls.DataGridRow
    {
        obj[Avalonia.Controls.DataGridRow.HeaderProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRow.HeaderProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Header<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRow
    {
        var descriptor = Avalonia.Controls.DataGridRow.HeaderProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRow.HeaderProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Header<T>(
        this T obj,
        IObservable<System.Object> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRow
    {
        var descriptor = Avalonia.Controls.DataGridRow.HeaderProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGridRow.HeaderProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGridRow.HeaderProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHeader(
        this Avalonia.Controls.DataGridRow obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGridRow.HeaderProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGridRow.HeaderProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObserveHeader(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGridRow.HeaderProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGridRow.HeaderProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHeader<T>(this T obj, Action<Avalonia.Controls.DataGridRow, IObservable<System.Object>> handler) where T : Avalonia.Controls.DataGridRow
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGridRow.HeaderProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DataGridRow.HeaderProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Object>> ObserveBindingHeader(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DataGridRow.HeaderProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DataGridRow.HeaderProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingHeader<T>(this T obj, Action<Avalonia.Controls.DataGridRow, IObservable<BindingValue<System.Object>>> handler) where T : Avalonia.Controls.DataGridRow
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DataGridRow.HeaderProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DataGridRow.HeaderProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveHeaderChanged(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRow.HeaderProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DataGridRow.HeaderProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHeaderChanged<T>(this T obj, Action<Avalonia.Controls.DataGridRow, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DataGridRow
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRow.HeaderProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGridRow.IsSelectedProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGridRow.IsSelectedProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsSelected<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.DataGridRow
    {
        obj[Avalonia.Controls.DataGridRow.IsSelectedProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRow.IsSelectedProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsSelected<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRow
    {
        var descriptor = Avalonia.Controls.DataGridRow.IsSelectedProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRow.IsSelectedProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsSelected<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRow
    {
        var descriptor = Avalonia.Controls.DataGridRow.IsSelectedProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGridRow.IsSelectedProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGridRow.IsSelectedProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsSelected(
        this Avalonia.Controls.DataGridRow obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGridRow.IsSelectedProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGridRow.IsSelectedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsSelected(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGridRow.IsSelectedProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGridRow.IsSelectedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsSelected<T>(this T obj, Action<Avalonia.Controls.DataGridRow, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.DataGridRow
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGridRow.IsSelectedProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DataGridRow.IsSelectedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsSelected(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DataGridRow.IsSelectedProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DataGridRow.IsSelectedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsSelected<T>(this T obj, Action<Avalonia.Controls.DataGridRow, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.DataGridRow
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DataGridRow.IsSelectedProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DataGridRow.IsSelectedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsSelectedChanged(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRow.IsSelectedProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DataGridRow.IsSelectedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsSelectedChanged<T>(this T obj, Action<Avalonia.Controls.DataGridRow, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DataGridRow
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRow.IsSelectedProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGridRow.IsValidProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGridRow.IsValidProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGridRow.IsValidProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsValid(
        this Avalonia.Controls.DataGridRow obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGridRow.IsValidProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGridRow.IsValidProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsValid(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGridRow.IsValidProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGridRow.IsValidProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.DataGridRow OnIsValid(this Avalonia.Controls.DataGridRow obj, Action<Avalonia.Controls.DataGridRow, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGridRow.IsValidProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DataGridRow.IsValidProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsValid(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DataGridRow.IsValidProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DataGridRow.IsValidProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.DataGridRow OnBindingIsValid(this Avalonia.Controls.DataGridRow obj, Action<Avalonia.Controls.DataGridRow, IObservable<BindingValue<System.Boolean>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DataGridRow.IsValidProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DataGridRow.IsValidProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsValidChanged(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRow.IsValidProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DataGridRow.IsValidProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.DataGridRow OnIsValidChanged(this Avalonia.Controls.DataGridRow obj, Action<Avalonia.Controls.DataGridRow, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRow.IsValidProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGridRow.DetailsTemplateProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGridRow.DetailsTemplateProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DetailsTemplate<T>(this T obj, Avalonia.Controls.Templates.IDataTemplate value) where T : Avalonia.Controls.DataGridRow
    {
        obj[Avalonia.Controls.DataGridRow.DetailsTemplateProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRow.DetailsTemplateProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DetailsTemplate<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRow
    {
        var descriptor = Avalonia.Controls.DataGridRow.DetailsTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRow.DetailsTemplateProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DetailsTemplate<T>(
        this T obj,
        IObservable<Avalonia.Controls.Templates.IDataTemplate> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRow
    {
        var descriptor = Avalonia.Controls.DataGridRow.DetailsTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGridRow.DetailsTemplateProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGridRow.DetailsTemplateProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDetailsTemplate(
        this Avalonia.Controls.DataGridRow obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGridRow.DetailsTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGridRow.DetailsTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Templates.IDataTemplate> ObserveDetailsTemplate(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGridRow.DetailsTemplateProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGridRow.DetailsTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDetailsTemplate<T>(this T obj, Action<Avalonia.Controls.DataGridRow, IObservable<Avalonia.Controls.Templates.IDataTemplate>> handler) where T : Avalonia.Controls.DataGridRow
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGridRow.DetailsTemplateProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DataGridRow.DetailsTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.Templates.IDataTemplate>> ObserveBindingDetailsTemplate(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DataGridRow.DetailsTemplateProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DataGridRow.DetailsTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingDetailsTemplate<T>(this T obj, Action<Avalonia.Controls.DataGridRow, IObservable<BindingValue<Avalonia.Controls.Templates.IDataTemplate>>> handler) where T : Avalonia.Controls.DataGridRow
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DataGridRow.DetailsTemplateProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DataGridRow.DetailsTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDetailsTemplateChanged(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRow.DetailsTemplateProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DataGridRow.DetailsTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDetailsTemplateChanged<T>(this T obj, Action<Avalonia.Controls.DataGridRow, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DataGridRow
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRow.DetailsTemplateProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AreDetailsVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.DataGridRow
    {
        obj[Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AreDetailsVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRow
    {
        var descriptor = Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AreDetailsVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRow
    {
        var descriptor = Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAreDetailsVisible(
        this Avalonia.Controls.DataGridRow obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveAreDetailsVisible(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAreDetailsVisible<T>(this T obj, Action<Avalonia.Controls.DataGridRow, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.DataGridRow
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingAreDetailsVisible(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingAreDetailsVisible<T>(this T obj, Action<Avalonia.Controls.DataGridRow, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.DataGridRow
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAreDetailsVisibleChanged(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAreDetailsVisibleChanged<T>(this T obj, Action<Avalonia.Controls.DataGridRow, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DataGridRow
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRow.AreDetailsVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGridRow.IndexProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGridRow.IndexProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Index<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.DataGridRow
    {
        obj[Avalonia.Controls.DataGridRow.IndexProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRow.IndexProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Index<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRow
    {
        var descriptor = Avalonia.Controls.DataGridRow.IndexProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRow.IndexProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Index<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRow
    {
        var descriptor = Avalonia.Controls.DataGridRow.IndexProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGridRow.IndexProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGridRow.IndexProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIndex(
        this Avalonia.Controls.DataGridRow obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGridRow.IndexProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGridRow.IndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveIndex(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGridRow.IndexProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGridRow.IndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIndex<T>(this T obj, Action<Avalonia.Controls.DataGridRow, IObservable<System.Int32>> handler) where T : Avalonia.Controls.DataGridRow
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGridRow.IndexProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DataGridRow.IndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingIndex(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DataGridRow.IndexProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DataGridRow.IndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIndex<T>(this T obj, Action<Avalonia.Controls.DataGridRow, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.DataGridRow
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DataGridRow.IndexProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DataGridRow.IndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIndexChanged(this Avalonia.Controls.DataGridRow obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRow.IndexProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DataGridRow.IndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIndexChanged<T>(this T obj, Action<Avalonia.Controls.DataGridRow, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DataGridRow
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRow.IndexProperty);
        handler(obj, observable);
        return obj;
    }
}
