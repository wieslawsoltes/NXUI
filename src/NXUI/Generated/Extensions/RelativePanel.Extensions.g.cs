// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.RelativePanel"/> class property extension methods.
/// </summary>
public static partial class RelativePanelExtensions
{
    // Avalonia.Controls.RelativePanel.AboveProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RelativePanel.AboveProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Above<T>(this T obj, System.Object value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Controls.RelativePanel.AboveProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AboveProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Above<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AboveProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AboveProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Above<T>(
        this T obj,
        IObservable<System.Object> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AboveProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.RelativePanel.AboveProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.RelativePanel.AboveProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAbove(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.RelativePanel.AboveProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.RelativePanel.AboveProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObserveAbove(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Controls.RelativePanel.AboveProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.RelativePanel.AboveProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAbove<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Object>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Controls.RelativePanel.AboveProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.RelativePanel.AboveProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Object>> ObserveBindingAbove(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AboveProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.RelativePanel.AboveProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingAbove<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Object>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AboveProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.RelativePanel.AboveProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAboveChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AboveProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.RelativePanel.AboveProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAboveChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AboveProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignBottomWithPanel<T>(this T obj, System.Boolean value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignBottomWithPanel<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignBottomWithPanel<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAlignBottomWithPanel(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveAlignBottomWithPanel(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignBottomWithPanel<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Boolean>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingAlignBottomWithPanel(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingAlignBottomWithPanel<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAlignBottomWithPanelChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignBottomWithPanelChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignBottomWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.RelativePanel.AlignBottomWithProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignBottomWith<T>(this T obj, System.Object value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Controls.RelativePanel.AlignBottomWithProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignBottomWith<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignBottomWithProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignBottomWith<T>(
        this T obj,
        IObservable<System.Object> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignBottomWithProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAlignBottomWith(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignBottomWithProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObserveAlignBottomWith(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Controls.RelativePanel.AlignBottomWithProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignBottomWith<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Object>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Controls.RelativePanel.AlignBottomWithProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Object>> ObserveBindingAlignBottomWith(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignBottomWithProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingAlignBottomWith<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Object>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignBottomWithProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAlignBottomWithChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignBottomWithProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignBottomWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignBottomWithChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignBottomWithProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignHorizontalCenterWithPanel<T>(this T obj, System.Boolean value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignHorizontalCenterWithPanel<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignHorizontalCenterWithPanel<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAlignHorizontalCenterWithPanel(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveAlignHorizontalCenterWithPanel(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignHorizontalCenterWithPanel<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Boolean>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingAlignHorizontalCenterWithPanel(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingAlignHorizontalCenterWithPanel<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAlignHorizontalCenterWithPanelChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignHorizontalCenterWithPanelChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignHorizontalCenterWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignLeftWithPanel<T>(this T obj, System.Boolean value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignLeftWithPanel<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignLeftWithPanel<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAlignLeftWithPanel(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveAlignLeftWithPanel(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignLeftWithPanel<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Boolean>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingAlignLeftWithPanel(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingAlignLeftWithPanel<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAlignLeftWithPanelChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignLeftWithPanelChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignLeftWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.RelativePanel.AlignLeftWithProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignLeftWith<T>(this T obj, System.Object value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Controls.RelativePanel.AlignLeftWithProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignLeftWith<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignLeftWithProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignLeftWith<T>(
        this T obj,
        IObservable<System.Object> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignLeftWithProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAlignLeftWith(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignLeftWithProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObserveAlignLeftWith(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Controls.RelativePanel.AlignLeftWithProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignLeftWith<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Object>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Controls.RelativePanel.AlignLeftWithProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Object>> ObserveBindingAlignLeftWith(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignLeftWithProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingAlignLeftWith<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Object>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignLeftWithProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAlignLeftWithChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignLeftWithProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignLeftWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignLeftWithChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignLeftWithProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignRightWithPanel<T>(this T obj, System.Boolean value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignRightWithPanel<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignRightWithPanel<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAlignRightWithPanel(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveAlignRightWithPanel(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignRightWithPanel<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Boolean>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingAlignRightWithPanel(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingAlignRightWithPanel<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAlignRightWithPanelChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignRightWithPanelChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignRightWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.RelativePanel.AlignRightWithProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RelativePanel.AlignRightWithProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignRightWith<T>(this T obj, System.Object value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Controls.RelativePanel.AlignRightWithProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignRightWithProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignRightWith<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignRightWithProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignRightWithProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignRightWith<T>(
        this T obj,
        IObservable<System.Object> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignRightWithProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.RelativePanel.AlignRightWithProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.RelativePanel.AlignRightWithProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAlignRightWith(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignRightWithProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignRightWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObserveAlignRightWith(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Controls.RelativePanel.AlignRightWithProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignRightWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignRightWith<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Object>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Controls.RelativePanel.AlignRightWithProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignRightWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Object>> ObserveBindingAlignRightWith(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignRightWithProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignRightWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingAlignRightWith<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Object>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignRightWithProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignRightWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAlignRightWithChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignRightWithProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignRightWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignRightWithChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignRightWithProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignTopWithPanel<T>(this T obj, System.Boolean value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignTopWithPanel<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignTopWithPanel<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAlignTopWithPanel(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveAlignTopWithPanel(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignTopWithPanel<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Boolean>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingAlignTopWithPanel(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingAlignTopWithPanel<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAlignTopWithPanelChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignTopWithPanelChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignTopWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.RelativePanel.AlignTopWithProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RelativePanel.AlignTopWithProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignTopWith<T>(this T obj, System.Object value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Controls.RelativePanel.AlignTopWithProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignTopWithProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignTopWith<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignTopWithProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignTopWithProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignTopWith<T>(
        this T obj,
        IObservable<System.Object> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignTopWithProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.RelativePanel.AlignTopWithProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.RelativePanel.AlignTopWithProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAlignTopWith(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignTopWithProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignTopWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObserveAlignTopWith(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Controls.RelativePanel.AlignTopWithProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignTopWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignTopWith<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Object>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Controls.RelativePanel.AlignTopWithProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignTopWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Object>> ObserveBindingAlignTopWith(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignTopWithProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignTopWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingAlignTopWith<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Object>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignTopWithProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignTopWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAlignTopWithChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignTopWithProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignTopWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignTopWithChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignTopWithProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignVerticalCenterWithPanel<T>(this T obj, System.Boolean value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignVerticalCenterWithPanel<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignVerticalCenterWithPanel<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAlignVerticalCenterWithPanel(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveAlignVerticalCenterWithPanel(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignVerticalCenterWithPanel<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Boolean>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingAlignVerticalCenterWithPanel(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingAlignVerticalCenterWithPanel<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAlignVerticalCenterWithPanelChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignVerticalCenterWithPanelChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignVerticalCenterWithPanelProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignVerticalCenterWith<T>(this T obj, System.Object value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignVerticalCenterWith<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AlignVerticalCenterWith<T>(
        this T obj,
        IObservable<System.Object> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAlignVerticalCenterWith(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObserveAlignVerticalCenterWith(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignVerticalCenterWith<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Object>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Object>> ObserveBindingAlignVerticalCenterWith(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingAlignVerticalCenterWith<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Object>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAlignVerticalCenterWithChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAlignVerticalCenterWithChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.AlignVerticalCenterWithProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.RelativePanel.BelowProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RelativePanel.BelowProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Below<T>(this T obj, System.Object value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Controls.RelativePanel.BelowProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.BelowProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Below<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.BelowProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.BelowProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Below<T>(
        this T obj,
        IObservable<System.Object> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.BelowProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.RelativePanel.BelowProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.RelativePanel.BelowProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindBelow(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.RelativePanel.BelowProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.RelativePanel.BelowProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObserveBelow(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Controls.RelativePanel.BelowProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.RelativePanel.BelowProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBelow<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Object>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Controls.RelativePanel.BelowProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.RelativePanel.BelowProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Object>> ObserveBindingBelow(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.RelativePanel.BelowProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.RelativePanel.BelowProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingBelow<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Object>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.RelativePanel.BelowProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.RelativePanel.BelowProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveBelowChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.BelowProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.RelativePanel.BelowProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBelowChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.BelowProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.RelativePanel.LeftOfProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RelativePanel.LeftOfProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T LeftOf<T>(this T obj, System.Object value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Controls.RelativePanel.LeftOfProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.LeftOfProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T LeftOf<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.LeftOfProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.LeftOfProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T LeftOf<T>(
        this T obj,
        IObservable<System.Object> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.LeftOfProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.RelativePanel.LeftOfProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.RelativePanel.LeftOfProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindLeftOf(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.RelativePanel.LeftOfProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.RelativePanel.LeftOfProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObserveLeftOf(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Controls.RelativePanel.LeftOfProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.RelativePanel.LeftOfProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnLeftOf<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Object>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Controls.RelativePanel.LeftOfProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.RelativePanel.LeftOfProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Object>> ObserveBindingLeftOf(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.RelativePanel.LeftOfProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.RelativePanel.LeftOfProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingLeftOf<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Object>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.RelativePanel.LeftOfProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.RelativePanel.LeftOfProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveLeftOfChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.LeftOfProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.RelativePanel.LeftOfProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnLeftOfChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.LeftOfProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.RelativePanel.RightOfProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.RelativePanel.RightOfProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RightOf<T>(this T obj, System.Object value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Controls.RelativePanel.RightOfProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.RightOfProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RightOf<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.RightOfProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.RelativePanel.RightOfProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RightOf<T>(
        this T obj,
        IObservable<System.Object> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Controls.RelativePanel.RightOfProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.RelativePanel.RightOfProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.RelativePanel.RightOfProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRightOf(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.RelativePanel.RightOfProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.RelativePanel.RightOfProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObserveRightOf(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Controls.RelativePanel.RightOfProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.RelativePanel.RightOfProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRightOf<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Object>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Controls.RelativePanel.RightOfProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.RelativePanel.RightOfProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Object>> ObserveBindingRightOf(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.RelativePanel.RightOfProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.RelativePanel.RightOfProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingRightOf<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Object>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.RelativePanel.RightOfProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.RelativePanel.RightOfProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveRightOfChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.RightOfProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.RelativePanel.RightOfProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRightOfChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.RelativePanel.RightOfProperty);
        handler(obj, observable);
        return obj;
    }
}
