// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Visual"/> class property extension methods.
/// </summary>
public static partial class VisualExtensions
{
    // Avalonia.Visual.BoundsProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Visual.BoundsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Visual.BoundsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindBounds(
        this Avalonia.Visual obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Visual.BoundsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Visual.BoundsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Rect> ObserveBounds(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.BoundsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Visual.BoundsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Visual OnBounds(this Avalonia.Visual obj, Action<Avalonia.Visual, IObservable<Avalonia.Rect>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Visual.BoundsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Visual.BoundsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Rect>> ObserveBindingBounds(this Avalonia.Visual obj)
    {
        return obj.GetBindingObservable(Avalonia.Visual.BoundsProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Visual.BoundsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Visual OnBindingBounds(this Avalonia.Visual obj, Action<Avalonia.Visual, IObservable<BindingValue<Avalonia.Rect>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Visual.BoundsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Visual.BoundsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveBoundsChanged(this Avalonia.Visual obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Visual.BoundsProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Visual.BoundsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Visual OnBoundsChanged(this Avalonia.Visual obj, Action<Avalonia.Visual, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Visual.BoundsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Visual.ClipToBoundsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Visual.ClipToBoundsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ClipToBounds<T>(this T obj, System.Boolean value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ClipToBoundsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.ClipToBoundsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ClipToBounds<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.ClipToBoundsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.ClipToBoundsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ClipToBounds<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.ClipToBoundsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Visual.ClipToBoundsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Visual.ClipToBoundsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindClipToBounds(
        this Avalonia.Visual obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Visual.ClipToBoundsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Visual.ClipToBoundsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveClipToBounds(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.ClipToBoundsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Visual.ClipToBoundsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnClipToBounds<T>(this T obj, Action<Avalonia.Visual, IObservable<System.Boolean>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.ClipToBoundsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Visual.ClipToBoundsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingClipToBounds(this Avalonia.Visual obj)
    {
        return obj.GetBindingObservable(Avalonia.Visual.ClipToBoundsProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Visual.ClipToBoundsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingClipToBounds<T>(this T obj, Action<Avalonia.Visual, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetBindingObservable(Avalonia.Visual.ClipToBoundsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Visual.ClipToBoundsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveClipToBoundsChanged(this Avalonia.Visual obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Visual.ClipToBoundsProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Visual.ClipToBoundsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnClipToBoundsChanged<T>(this T obj, Action<Avalonia.Visual, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Visual.ClipToBoundsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Visual.ClipProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Visual.ClipProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Clip<T>(this T obj, Avalonia.Media.Geometry value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ClipProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.ClipProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Clip<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.ClipProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.ClipProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Clip<T>(
        this T obj,
        IObservable<Avalonia.Media.Geometry> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.ClipProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Visual.ClipProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Visual.ClipProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindClip(
        this Avalonia.Visual obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Visual.ClipProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Visual.ClipProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.Geometry> ObserveClip(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.ClipProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Visual.ClipProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnClip<T>(this T obj, Action<Avalonia.Visual, IObservable<Avalonia.Media.Geometry>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.ClipProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Visual.ClipProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.Geometry>> ObserveBindingClip(this Avalonia.Visual obj)
    {
        return obj.GetBindingObservable(Avalonia.Visual.ClipProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Visual.ClipProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingClip<T>(this T obj, Action<Avalonia.Visual, IObservable<BindingValue<Avalonia.Media.Geometry>>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetBindingObservable(Avalonia.Visual.ClipProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Visual.ClipProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveClipChanged(this Avalonia.Visual obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Visual.ClipProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Visual.ClipProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnClipChanged<T>(this T obj, Action<Avalonia.Visual, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Visual.ClipProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Visual.IsVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Visual.IsVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.IsVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.IsVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.IsVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.IsVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.IsVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Visual.IsVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Visual.IsVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsVisible(
        this Avalonia.Visual obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Visual.IsVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Visual.IsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsVisible(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.IsVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Visual.IsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsVisible<T>(this T obj, Action<Avalonia.Visual, IObservable<System.Boolean>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.IsVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Visual.IsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsVisible(this Avalonia.Visual obj)
    {
        return obj.GetBindingObservable(Avalonia.Visual.IsVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Visual.IsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsVisible<T>(this T obj, Action<Avalonia.Visual, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetBindingObservable(Avalonia.Visual.IsVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Visual.IsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsVisibleChanged(this Avalonia.Visual obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Visual.IsVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Visual.IsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsVisibleChanged<T>(this T obj, Action<Avalonia.Visual, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Visual.IsVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Visual.OpacityProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Visual.OpacityProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Opacity<T>(this T obj, System.Double value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.OpacityProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.OpacityProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Opacity<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.OpacityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.OpacityProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Opacity<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.OpacityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Visual.OpacityProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Visual.OpacityProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindOpacity(
        this Avalonia.Visual obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Visual.OpacityProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Visual.OpacityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveOpacity(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.OpacityProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Visual.OpacityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnOpacity<T>(this T obj, Action<Avalonia.Visual, IObservable<System.Double>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.OpacityProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Visual.OpacityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingOpacity(this Avalonia.Visual obj)
    {
        return obj.GetBindingObservable(Avalonia.Visual.OpacityProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Visual.OpacityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingOpacity<T>(this T obj, Action<Avalonia.Visual, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetBindingObservable(Avalonia.Visual.OpacityProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Visual.OpacityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveOpacityChanged(this Avalonia.Visual obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Visual.OpacityProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Visual.OpacityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnOpacityChanged<T>(this T obj, Action<Avalonia.Visual, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Visual.OpacityProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Visual.OpacityMaskProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Visual.OpacityMaskProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OpacityMask<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.OpacityMaskProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.OpacityMaskProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OpacityMask<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.OpacityMaskProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.OpacityMaskProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OpacityMask<T>(
        this T obj,
        IObservable<Avalonia.Media.IBrush> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.OpacityMaskProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Visual.OpacityMaskProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Visual.OpacityMaskProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindOpacityMask(
        this Avalonia.Visual obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Visual.OpacityMaskProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Visual.OpacityMaskProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IBrush> ObserveOpacityMask(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.OpacityMaskProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Visual.OpacityMaskProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnOpacityMask<T>(this T obj, Action<Avalonia.Visual, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.OpacityMaskProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Visual.OpacityMaskProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.IBrush>> ObserveBindingOpacityMask(this Avalonia.Visual obj)
    {
        return obj.GetBindingObservable(Avalonia.Visual.OpacityMaskProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Visual.OpacityMaskProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingOpacityMask<T>(this T obj, Action<Avalonia.Visual, IObservable<BindingValue<Avalonia.Media.IBrush>>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetBindingObservable(Avalonia.Visual.OpacityMaskProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Visual.OpacityMaskProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveOpacityMaskChanged(this Avalonia.Visual obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Visual.OpacityMaskProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Visual.OpacityMaskProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnOpacityMaskChanged<T>(this T obj, Action<Avalonia.Visual, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Visual.OpacityMaskProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Visual.EffectProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Visual.EffectProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Effect<T>(this T obj, Avalonia.Media.IEffect value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.EffectProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.EffectProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Effect<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.EffectProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.EffectProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Effect<T>(
        this T obj,
        IObservable<Avalonia.Media.IEffect> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.EffectProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Visual.EffectProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Visual.EffectProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindEffect(
        this Avalonia.Visual obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Visual.EffectProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Visual.EffectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IEffect> ObserveEffect(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.EffectProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Visual.EffectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnEffect<T>(this T obj, Action<Avalonia.Visual, IObservable<Avalonia.Media.IEffect>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.EffectProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Visual.EffectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.IEffect>> ObserveBindingEffect(this Avalonia.Visual obj)
    {
        return obj.GetBindingObservable(Avalonia.Visual.EffectProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Visual.EffectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingEffect<T>(this T obj, Action<Avalonia.Visual, IObservable<BindingValue<Avalonia.Media.IEffect>>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetBindingObservable(Avalonia.Visual.EffectProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Visual.EffectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveEffectChanged(this Avalonia.Visual obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Visual.EffectProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Visual.EffectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnEffectChanged<T>(this T obj, Action<Avalonia.Visual, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Visual.EffectProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Visual.HasMirrorTransformProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Visual.HasMirrorTransformProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Visual.HasMirrorTransformProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHasMirrorTransform(
        this Avalonia.Visual obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Visual.HasMirrorTransformProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Visual.HasMirrorTransformProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveHasMirrorTransform(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.HasMirrorTransformProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Visual.HasMirrorTransformProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Visual OnHasMirrorTransform(this Avalonia.Visual obj, Action<Avalonia.Visual, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Visual.HasMirrorTransformProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Visual.HasMirrorTransformProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingHasMirrorTransform(this Avalonia.Visual obj)
    {
        return obj.GetBindingObservable(Avalonia.Visual.HasMirrorTransformProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Visual.HasMirrorTransformProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Visual OnBindingHasMirrorTransform(this Avalonia.Visual obj, Action<Avalonia.Visual, IObservable<BindingValue<System.Boolean>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Visual.HasMirrorTransformProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Visual.HasMirrorTransformProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveHasMirrorTransformChanged(this Avalonia.Visual obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Visual.HasMirrorTransformProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Visual.HasMirrorTransformProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Visual OnHasMirrorTransformChanged(this Avalonia.Visual obj, Action<Avalonia.Visual, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Visual.HasMirrorTransformProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Visual.RenderTransformProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Visual.RenderTransformProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RenderTransform<T>(this T obj, Avalonia.Media.ITransform value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.RenderTransformProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.RenderTransformProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RenderTransform<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.RenderTransformProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.RenderTransformProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RenderTransform<T>(
        this T obj,
        IObservable<Avalonia.Media.ITransform> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.RenderTransformProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Visual.RenderTransformProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Visual.RenderTransformProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRenderTransform(
        this Avalonia.Visual obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Visual.RenderTransformProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Visual.RenderTransformProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.ITransform> ObserveRenderTransform(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.RenderTransformProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Visual.RenderTransformProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRenderTransform<T>(this T obj, Action<Avalonia.Visual, IObservable<Avalonia.Media.ITransform>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.RenderTransformProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Visual.RenderTransformProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.ITransform>> ObserveBindingRenderTransform(this Avalonia.Visual obj)
    {
        return obj.GetBindingObservable(Avalonia.Visual.RenderTransformProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Visual.RenderTransformProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingRenderTransform<T>(this T obj, Action<Avalonia.Visual, IObservable<BindingValue<Avalonia.Media.ITransform>>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetBindingObservable(Avalonia.Visual.RenderTransformProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Visual.RenderTransformProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveRenderTransformChanged(this Avalonia.Visual obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Visual.RenderTransformProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Visual.RenderTransformProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRenderTransformChanged<T>(this T obj, Action<Avalonia.Visual, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Visual.RenderTransformProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Visual.RenderTransformOriginProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Visual.RenderTransformOriginProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RenderTransformOrigin<T>(this T obj, Avalonia.RelativePoint value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.RenderTransformOriginProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.RenderTransformOriginProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RenderTransformOrigin<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.RenderTransformOriginProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.RenderTransformOriginProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RenderTransformOrigin<T>(
        this T obj,
        IObservable<Avalonia.RelativePoint> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.RenderTransformOriginProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Visual.RenderTransformOriginProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Visual.RenderTransformOriginProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRenderTransformOrigin(
        this Avalonia.Visual obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Visual.RenderTransformOriginProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Visual.RenderTransformOriginProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.RelativePoint> ObserveRenderTransformOrigin(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.RenderTransformOriginProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Visual.RenderTransformOriginProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRenderTransformOrigin<T>(this T obj, Action<Avalonia.Visual, IObservable<Avalonia.RelativePoint>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.RenderTransformOriginProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Visual.RenderTransformOriginProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.RelativePoint>> ObserveBindingRenderTransformOrigin(this Avalonia.Visual obj)
    {
        return obj.GetBindingObservable(Avalonia.Visual.RenderTransformOriginProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Visual.RenderTransformOriginProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingRenderTransformOrigin<T>(this T obj, Action<Avalonia.Visual, IObservable<BindingValue<Avalonia.RelativePoint>>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetBindingObservable(Avalonia.Visual.RenderTransformOriginProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Visual.RenderTransformOriginProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveRenderTransformOriginChanged(this Avalonia.Visual obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Visual.RenderTransformOriginProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Visual.RenderTransformOriginProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRenderTransformOriginChanged<T>(this T obj, Action<Avalonia.Visual, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Visual.RenderTransformOriginProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Visual.FlowDirectionProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Visual.FlowDirectionProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FlowDirection<T>(this T obj, Avalonia.Media.FlowDirection value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.FlowDirectionProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.FlowDirectionProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FlowDirection<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.FlowDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.FlowDirectionProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FlowDirection<T>(
        this T obj,
        IObservable<Avalonia.Media.FlowDirection> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.FlowDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Visual.FlowDirectionProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Visual.FlowDirectionProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindFlowDirection(
        this Avalonia.Visual obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Visual.FlowDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Visual.FlowDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.FlowDirection> ObserveFlowDirection(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.FlowDirectionProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Visual.FlowDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFlowDirection<T>(this T obj, Action<Avalonia.Visual, IObservable<Avalonia.Media.FlowDirection>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.FlowDirectionProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Visual.FlowDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.FlowDirection>> ObserveBindingFlowDirection(this Avalonia.Visual obj)
    {
        return obj.GetBindingObservable(Avalonia.Visual.FlowDirectionProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Visual.FlowDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingFlowDirection<T>(this T obj, Action<Avalonia.Visual, IObservable<BindingValue<Avalonia.Media.FlowDirection>>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetBindingObservable(Avalonia.Visual.FlowDirectionProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Visual.FlowDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveFlowDirectionChanged(this Avalonia.Visual obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Visual.FlowDirectionProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Visual.FlowDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFlowDirectionChanged<T>(this T obj, Action<Avalonia.Visual, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Visual.FlowDirectionProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Visual.FlowDirectionProperty"/> property value to <see cref="Avalonia.Media.FlowDirection.LeftToRight"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FlowDirectionLeftToRight<T>(this T obj) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.FlowDirectionProperty] = Avalonia.Media.FlowDirection.LeftToRight;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Visual.FlowDirectionProperty"/> property value to <see cref="Avalonia.Media.FlowDirection.RightToLeft"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FlowDirectionRightToLeft<T>(this T obj) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.FlowDirectionProperty] = Avalonia.Media.FlowDirection.RightToLeft;
        return obj;
    }

    // Avalonia.Visual.VisualParentProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Visual.VisualParentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Visual.VisualParentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindVisualParent(
        this Avalonia.Visual obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Visual.VisualParentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Visual.VisualParentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Visual> ObserveVisualParent(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.VisualParentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Visual.VisualParentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Visual OnVisualParent(this Avalonia.Visual obj, Action<Avalonia.Visual, IObservable<Avalonia.Visual>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Visual.VisualParentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Visual.VisualParentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Visual>> ObserveBindingVisualParent(this Avalonia.Visual obj)
    {
        return obj.GetBindingObservable(Avalonia.Visual.VisualParentProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Visual.VisualParentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Visual OnBindingVisualParent(this Avalonia.Visual obj, Action<Avalonia.Visual, IObservable<BindingValue<Avalonia.Visual>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Visual.VisualParentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Visual.VisualParentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveVisualParentChanged(this Avalonia.Visual obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Visual.VisualParentProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Visual.VisualParentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Visual OnVisualParentChanged(this Avalonia.Visual obj, Action<Avalonia.Visual, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Visual.VisualParentProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Visual.ZIndexProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Visual.ZIndexProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ZIndex<T>(this T obj, System.Int32 value) where T : Avalonia.Visual
    {
        obj[Avalonia.Visual.ZIndexProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.ZIndexProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ZIndex<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.ZIndexProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Visual.ZIndexProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ZIndex<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Visual
    {
        var descriptor = Avalonia.Visual.ZIndexProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Visual.ZIndexProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Visual.ZIndexProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindZIndex(
        this Avalonia.Visual obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Visual.ZIndexProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Visual.ZIndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveZIndex(this Avalonia.Visual obj)
    {
        return obj.GetObservable(Avalonia.Visual.ZIndexProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Visual.ZIndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnZIndex<T>(this T obj, Action<Avalonia.Visual, IObservable<System.Int32>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetObservable(Avalonia.Visual.ZIndexProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Visual.ZIndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingZIndex(this Avalonia.Visual obj)
    {
        return obj.GetBindingObservable(Avalonia.Visual.ZIndexProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Visual.ZIndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingZIndex<T>(this T obj, Action<Avalonia.Visual, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetBindingObservable(Avalonia.Visual.ZIndexProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Visual.ZIndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveZIndexChanged(this Avalonia.Visual obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Visual.ZIndexProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Visual.ZIndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnZIndexChanged<T>(this T obj, Action<Avalonia.Visual, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Visual
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Visual.ZIndexProperty);
        handler(obj, observable);
        return obj;
    }
}
