// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.Calendar"/> class property extension methods.
/// </summary>
public static partial class CalendarExtensions
{
    // Avalonia.Controls.Calendar.FirstDayOfWeekProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeek<T>(this T obj, System.DayOfWeek value) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.FirstDayOfWeekProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeek<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.FirstDayOfWeekProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeek<T>(
        this T obj,
        IObservable<System.DayOfWeek> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.FirstDayOfWeekProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindFirstDayOfWeek(
        this Avalonia.Controls.Calendar obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Calendar.FirstDayOfWeekProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.DayOfWeek> ObserveFirstDayOfWeek(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetObservable(Avalonia.Controls.Calendar.FirstDayOfWeekProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFirstDayOfWeek<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<System.DayOfWeek>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetObservable(Avalonia.Controls.Calendar.FirstDayOfWeekProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.DayOfWeek>> ObserveBindingFirstDayOfWeek(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Calendar.FirstDayOfWeekProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingFirstDayOfWeek<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<BindingValue<System.DayOfWeek>>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Calendar.FirstDayOfWeekProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveFirstDayOfWeekChanged(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.FirstDayOfWeekProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFirstDayOfWeekChanged<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.FirstDayOfWeekProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/> property value to <see cref="System.DayOfWeek.Sunday"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeekSunday<T>(this T obj) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.FirstDayOfWeekProperty] = System.DayOfWeek.Sunday;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/> property value to <see cref="System.DayOfWeek.Monday"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeekMonday<T>(this T obj) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.FirstDayOfWeekProperty] = System.DayOfWeek.Monday;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/> property value to <see cref="System.DayOfWeek.Tuesday"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeekTuesday<T>(this T obj) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.FirstDayOfWeekProperty] = System.DayOfWeek.Tuesday;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/> property value to <see cref="System.DayOfWeek.Wednesday"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeekWednesday<T>(this T obj) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.FirstDayOfWeekProperty] = System.DayOfWeek.Wednesday;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/> property value to <see cref="System.DayOfWeek.Thursday"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeekThursday<T>(this T obj) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.FirstDayOfWeekProperty] = System.DayOfWeek.Thursday;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/> property value to <see cref="System.DayOfWeek.Friday"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeekFriday<T>(this T obj) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.FirstDayOfWeekProperty] = System.DayOfWeek.Friday;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.FirstDayOfWeekProperty"/> property value to <see cref="System.DayOfWeek.Saturday"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeekSaturday<T>(this T obj) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.FirstDayOfWeekProperty] = System.DayOfWeek.Saturday;
        return obj;
    }

    // Avalonia.Controls.Calendar.IsTodayHighlightedProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.IsTodayHighlightedProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsTodayHighlighted<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.IsTodayHighlightedProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.IsTodayHighlightedProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsTodayHighlighted<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.IsTodayHighlightedProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.IsTodayHighlightedProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsTodayHighlighted<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.IsTodayHighlightedProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Calendar.IsTodayHighlightedProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Calendar.IsTodayHighlightedProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsTodayHighlighted(
        this Avalonia.Controls.Calendar obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Calendar.IsTodayHighlightedProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Calendar.IsTodayHighlightedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsTodayHighlighted(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetObservable(Avalonia.Controls.Calendar.IsTodayHighlightedProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Calendar.IsTodayHighlightedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsTodayHighlighted<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetObservable(Avalonia.Controls.Calendar.IsTodayHighlightedProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Calendar.IsTodayHighlightedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsTodayHighlighted(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Calendar.IsTodayHighlightedProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Calendar.IsTodayHighlightedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsTodayHighlighted<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Calendar.IsTodayHighlightedProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Calendar.IsTodayHighlightedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsTodayHighlightedChanged(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.IsTodayHighlightedProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Calendar.IsTodayHighlightedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsTodayHighlightedChanged<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.IsTodayHighlightedProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Calendar.HeaderBackgroundProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.HeaderBackgroundProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HeaderBackground<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.HeaderBackgroundProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.HeaderBackgroundProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HeaderBackground<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.HeaderBackgroundProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.HeaderBackgroundProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HeaderBackground<T>(
        this T obj,
        IObservable<Avalonia.Media.IBrush> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.HeaderBackgroundProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Calendar.HeaderBackgroundProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Calendar.HeaderBackgroundProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHeaderBackground(
        this Avalonia.Controls.Calendar obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Calendar.HeaderBackgroundProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Calendar.HeaderBackgroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IBrush> ObserveHeaderBackground(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetObservable(Avalonia.Controls.Calendar.HeaderBackgroundProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Calendar.HeaderBackgroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHeaderBackground<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetObservable(Avalonia.Controls.Calendar.HeaderBackgroundProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Calendar.HeaderBackgroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.IBrush>> ObserveBindingHeaderBackground(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Calendar.HeaderBackgroundProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Calendar.HeaderBackgroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingHeaderBackground<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<BindingValue<Avalonia.Media.IBrush>>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Calendar.HeaderBackgroundProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Calendar.HeaderBackgroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveHeaderBackgroundChanged(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.HeaderBackgroundProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Calendar.HeaderBackgroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHeaderBackgroundChanged<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.HeaderBackgroundProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Calendar.DisplayModeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.DisplayModeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayMode<T>(this T obj, Avalonia.Controls.CalendarMode value) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.DisplayModeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.DisplayModeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayMode<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.DisplayModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.DisplayModeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayMode<T>(
        this T obj,
        IObservable<Avalonia.Controls.CalendarMode> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.DisplayModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Calendar.DisplayModeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Calendar.DisplayModeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDisplayMode(
        this Avalonia.Controls.Calendar obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Calendar.DisplayModeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Calendar.DisplayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.CalendarMode> ObserveDisplayMode(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetObservable(Avalonia.Controls.Calendar.DisplayModeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Calendar.DisplayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDisplayMode<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<Avalonia.Controls.CalendarMode>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetObservable(Avalonia.Controls.Calendar.DisplayModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Calendar.DisplayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.CalendarMode>> ObserveBindingDisplayMode(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Calendar.DisplayModeProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Calendar.DisplayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingDisplayMode<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<BindingValue<Avalonia.Controls.CalendarMode>>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Calendar.DisplayModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Calendar.DisplayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDisplayModeChanged(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.DisplayModeProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Calendar.DisplayModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDisplayModeChanged<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.DisplayModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.DisplayModeProperty"/> property value to <see cref="Avalonia.Controls.CalendarMode.Month"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayModeMonth<T>(this T obj) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.DisplayModeProperty] = Avalonia.Controls.CalendarMode.Month;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.DisplayModeProperty"/> property value to <see cref="Avalonia.Controls.CalendarMode.Year"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayModeYear<T>(this T obj) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.DisplayModeProperty] = Avalonia.Controls.CalendarMode.Year;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.DisplayModeProperty"/> property value to <see cref="Avalonia.Controls.CalendarMode.Decade"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayModeDecade<T>(this T obj) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.DisplayModeProperty] = Avalonia.Controls.CalendarMode.Decade;
        return obj;
    }

    // Avalonia.Controls.Calendar.SelectionModeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.SelectionModeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionMode<T>(this T obj, Avalonia.Controls.CalendarSelectionMode value) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.SelectionModeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.SelectionModeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionMode<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.SelectionModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.SelectionModeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionMode<T>(
        this T obj,
        IObservable<Avalonia.Controls.CalendarSelectionMode> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.SelectionModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Calendar.SelectionModeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Calendar.SelectionModeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectionMode(
        this Avalonia.Controls.Calendar obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Calendar.SelectionModeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Calendar.SelectionModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.CalendarSelectionMode> ObserveSelectionMode(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetObservable(Avalonia.Controls.Calendar.SelectionModeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Calendar.SelectionModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectionMode<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<Avalonia.Controls.CalendarSelectionMode>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetObservable(Avalonia.Controls.Calendar.SelectionModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Calendar.SelectionModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.CalendarSelectionMode>> ObserveBindingSelectionMode(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Calendar.SelectionModeProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Calendar.SelectionModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingSelectionMode<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<BindingValue<Avalonia.Controls.CalendarSelectionMode>>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Calendar.SelectionModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Calendar.SelectionModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveSelectionModeChanged(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.SelectionModeProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Calendar.SelectionModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectionModeChanged<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.SelectionModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.SelectionModeProperty"/> property value to <see cref="Avalonia.Controls.CalendarSelectionMode.SingleDate"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionModeSingleDate<T>(this T obj) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.SelectionModeProperty] = Avalonia.Controls.CalendarSelectionMode.SingleDate;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.SelectionModeProperty"/> property value to <see cref="Avalonia.Controls.CalendarSelectionMode.SingleRange"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionModeSingleRange<T>(this T obj) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.SelectionModeProperty] = Avalonia.Controls.CalendarSelectionMode.SingleRange;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.SelectionModeProperty"/> property value to <see cref="Avalonia.Controls.CalendarSelectionMode.MultipleRange"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionModeMultipleRange<T>(this T obj) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.SelectionModeProperty] = Avalonia.Controls.CalendarSelectionMode.MultipleRange;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.SelectionModeProperty"/> property value to <see cref="Avalonia.Controls.CalendarSelectionMode.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionModeNone<T>(this T obj) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.SelectionModeProperty] = Avalonia.Controls.CalendarSelectionMode.None;
        return obj;
    }

    // Avalonia.Controls.Calendar.SelectedDateProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.SelectedDateProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedDate<T>(this T obj, System.Nullable<System.DateTime> value) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.SelectedDateProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.SelectedDateProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedDate<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.SelectedDateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.SelectedDateProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedDate<T>(
        this T obj,
        IObservable<System.Nullable<System.DateTime>> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.SelectedDateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Calendar.SelectedDateProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Calendar.SelectedDateProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectedDate(
        this Avalonia.Controls.Calendar obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Calendar.SelectedDateProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Calendar.SelectedDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Nullable<System.DateTime>> ObserveSelectedDate(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetObservable(Avalonia.Controls.Calendar.SelectedDateProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Calendar.SelectedDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectedDate<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<System.Nullable<System.DateTime>>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetObservable(Avalonia.Controls.Calendar.SelectedDateProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Calendar.SelectedDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Nullable<System.DateTime>>> ObserveBindingSelectedDate(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Calendar.SelectedDateProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Calendar.SelectedDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingSelectedDate<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<BindingValue<System.Nullable<System.DateTime>>>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Calendar.SelectedDateProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Calendar.SelectedDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveSelectedDateChanged(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.SelectedDateProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Calendar.SelectedDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectedDateChanged<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.SelectedDateProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Calendar.DisplayDateProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.DisplayDateProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDate<T>(this T obj, System.DateTime value) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.DisplayDateProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.DisplayDateProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDate<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.DisplayDateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.DisplayDateProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDate<T>(
        this T obj,
        IObservable<System.DateTime> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.DisplayDateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Calendar.DisplayDateProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Calendar.DisplayDateProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDisplayDate(
        this Avalonia.Controls.Calendar obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Calendar.DisplayDateProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Calendar.DisplayDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.DateTime> ObserveDisplayDate(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetObservable(Avalonia.Controls.Calendar.DisplayDateProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Calendar.DisplayDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDisplayDate<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<System.DateTime>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetObservable(Avalonia.Controls.Calendar.DisplayDateProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Calendar.DisplayDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.DateTime>> ObserveBindingDisplayDate(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Calendar.DisplayDateProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Calendar.DisplayDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingDisplayDate<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<BindingValue<System.DateTime>>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Calendar.DisplayDateProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Calendar.DisplayDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDisplayDateChanged(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.DisplayDateProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Calendar.DisplayDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDisplayDateChanged<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.DisplayDateProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Calendar.DisplayDateStartProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.DisplayDateStartProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDateStart<T>(this T obj, System.Nullable<System.DateTime> value) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.DisplayDateStartProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.DisplayDateStartProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDateStart<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.DisplayDateStartProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.DisplayDateStartProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDateStart<T>(
        this T obj,
        IObservable<System.Nullable<System.DateTime>> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.DisplayDateStartProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Calendar.DisplayDateStartProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Calendar.DisplayDateStartProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDisplayDateStart(
        this Avalonia.Controls.Calendar obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Calendar.DisplayDateStartProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Calendar.DisplayDateStartProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Nullable<System.DateTime>> ObserveDisplayDateStart(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetObservable(Avalonia.Controls.Calendar.DisplayDateStartProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Calendar.DisplayDateStartProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDisplayDateStart<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<System.Nullable<System.DateTime>>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetObservable(Avalonia.Controls.Calendar.DisplayDateStartProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Calendar.DisplayDateStartProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Nullable<System.DateTime>>> ObserveBindingDisplayDateStart(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Calendar.DisplayDateStartProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Calendar.DisplayDateStartProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingDisplayDateStart<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<BindingValue<System.Nullable<System.DateTime>>>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Calendar.DisplayDateStartProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Calendar.DisplayDateStartProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDisplayDateStartChanged(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.DisplayDateStartProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Calendar.DisplayDateStartProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDisplayDateStartChanged<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.DisplayDateStartProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Calendar.DisplayDateEndProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Calendar.DisplayDateEndProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDateEnd<T>(this T obj, System.Nullable<System.DateTime> value) where T : Avalonia.Controls.Calendar
    {
        obj[Avalonia.Controls.Calendar.DisplayDateEndProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.DisplayDateEndProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDateEnd<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.DisplayDateEndProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Calendar.DisplayDateEndProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDateEnd<T>(
        this T obj,
        IObservable<System.Nullable<System.DateTime>> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Calendar
    {
        var descriptor = Avalonia.Controls.Calendar.DisplayDateEndProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Calendar.DisplayDateEndProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Calendar.DisplayDateEndProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDisplayDateEnd(
        this Avalonia.Controls.Calendar obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Calendar.DisplayDateEndProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Calendar.DisplayDateEndProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Nullable<System.DateTime>> ObserveDisplayDateEnd(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetObservable(Avalonia.Controls.Calendar.DisplayDateEndProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Calendar.DisplayDateEndProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDisplayDateEnd<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<System.Nullable<System.DateTime>>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetObservable(Avalonia.Controls.Calendar.DisplayDateEndProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Calendar.DisplayDateEndProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Nullable<System.DateTime>>> ObserveBindingDisplayDateEnd(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Calendar.DisplayDateEndProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Calendar.DisplayDateEndProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingDisplayDateEnd<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<BindingValue<System.Nullable<System.DateTime>>>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Calendar.DisplayDateEndProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Calendar.DisplayDateEndProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDisplayDateEndChanged(this Avalonia.Controls.Calendar obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.DisplayDateEndProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Calendar.DisplayDateEndProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDisplayDateEndChanged<T>(this T obj, Action<Avalonia.Controls.Calendar, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Calendar
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Calendar.DisplayDateEndProperty);
        handler(obj, observable);
        return obj;
    }
}
