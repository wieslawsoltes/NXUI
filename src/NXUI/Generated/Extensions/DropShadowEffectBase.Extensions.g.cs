// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Media.DropShadowEffectBase"/> class property extension methods.
/// </summary>
public static partial class DropShadowEffectBaseExtensions
{
    // Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T BlurRadius<T>(this T obj, System.Double value) where T : Avalonia.Media.DropShadowEffectBase
    {
        obj[Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T BlurRadius<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.DropShadowEffectBase
    {
        var descriptor = Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T BlurRadius<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.DropShadowEffectBase
    {
        var descriptor = Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindBlurRadius(
        this Avalonia.Media.DropShadowEffectBase obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveBlurRadius(this Avalonia.Media.DropShadowEffectBase obj)
    {
        return obj.GetObservable(Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBlurRadius<T>(this T obj, Action<Avalonia.Media.DropShadowEffectBase, IObservable<System.Double>> handler) where T : Avalonia.Media.DropShadowEffectBase
    {
        var observable = obj.GetObservable(Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingBlurRadius(this Avalonia.Media.DropShadowEffectBase obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingBlurRadius<T>(this T obj, Action<Avalonia.Media.DropShadowEffectBase, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Media.DropShadowEffectBase
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveBlurRadiusChanged(this Avalonia.Media.DropShadowEffectBase obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBlurRadiusChanged<T>(this T obj, Action<Avalonia.Media.DropShadowEffectBase, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.DropShadowEffectBase
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.DropShadowEffectBase.BlurRadiusProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.DropShadowEffectBase.ColorProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.DropShadowEffectBase.ColorProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Color<T>(this T obj, Avalonia.Media.Color value) where T : Avalonia.Media.DropShadowEffectBase
    {
        obj[Avalonia.Media.DropShadowEffectBase.ColorProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.DropShadowEffectBase.ColorProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Color<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.DropShadowEffectBase
    {
        var descriptor = Avalonia.Media.DropShadowEffectBase.ColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.DropShadowEffectBase.ColorProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Color<T>(
        this T obj,
        IObservable<Avalonia.Media.Color> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.DropShadowEffectBase
    {
        var descriptor = Avalonia.Media.DropShadowEffectBase.ColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.DropShadowEffectBase.ColorProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.DropShadowEffectBase.ColorProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindColor(
        this Avalonia.Media.DropShadowEffectBase obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.DropShadowEffectBase.ColorProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.DropShadowEffectBase.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.Color> ObserveColor(this Avalonia.Media.DropShadowEffectBase obj)
    {
        return obj.GetObservable(Avalonia.Media.DropShadowEffectBase.ColorProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.DropShadowEffectBase.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColor<T>(this T obj, Action<Avalonia.Media.DropShadowEffectBase, IObservable<Avalonia.Media.Color>> handler) where T : Avalonia.Media.DropShadowEffectBase
    {
        var observable = obj.GetObservable(Avalonia.Media.DropShadowEffectBase.ColorProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.DropShadowEffectBase.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.Color>> ObserveBindingColor(this Avalonia.Media.DropShadowEffectBase obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.DropShadowEffectBase.ColorProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.DropShadowEffectBase.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingColor<T>(this T obj, Action<Avalonia.Media.DropShadowEffectBase, IObservable<BindingValue<Avalonia.Media.Color>>> handler) where T : Avalonia.Media.DropShadowEffectBase
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.DropShadowEffectBase.ColorProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.DropShadowEffectBase.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveColorChanged(this Avalonia.Media.DropShadowEffectBase obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.DropShadowEffectBase.ColorProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.DropShadowEffectBase.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColorChanged<T>(this T obj, Action<Avalonia.Media.DropShadowEffectBase, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.DropShadowEffectBase
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.DropShadowEffectBase.ColorProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.DropShadowEffectBase.OpacityProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.DropShadowEffectBase.OpacityProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Opacity<T>(this T obj, System.Double value) where T : Avalonia.Media.DropShadowEffectBase
    {
        obj[Avalonia.Media.DropShadowEffectBase.OpacityProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.DropShadowEffectBase.OpacityProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Opacity<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.DropShadowEffectBase
    {
        var descriptor = Avalonia.Media.DropShadowEffectBase.OpacityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.DropShadowEffectBase.OpacityProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Opacity<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Media.DropShadowEffectBase
    {
        var descriptor = Avalonia.Media.DropShadowEffectBase.OpacityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.DropShadowEffectBase.OpacityProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.DropShadowEffectBase.OpacityProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindOpacity(
        this Avalonia.Media.DropShadowEffectBase obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.DropShadowEffectBase.OpacityProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.DropShadowEffectBase.OpacityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveOpacity(this Avalonia.Media.DropShadowEffectBase obj)
    {
        return obj.GetObservable(Avalonia.Media.DropShadowEffectBase.OpacityProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Media.DropShadowEffectBase.OpacityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnOpacity<T>(this T obj, Action<Avalonia.Media.DropShadowEffectBase, IObservable<System.Double>> handler) where T : Avalonia.Media.DropShadowEffectBase
    {
        var observable = obj.GetObservable(Avalonia.Media.DropShadowEffectBase.OpacityProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.DropShadowEffectBase.OpacityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingOpacity(this Avalonia.Media.DropShadowEffectBase obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.DropShadowEffectBase.OpacityProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.DropShadowEffectBase.OpacityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingOpacity<T>(this T obj, Action<Avalonia.Media.DropShadowEffectBase, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Media.DropShadowEffectBase
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.DropShadowEffectBase.OpacityProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.DropShadowEffectBase.OpacityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveOpacityChanged(this Avalonia.Media.DropShadowEffectBase obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.DropShadowEffectBase.OpacityProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.DropShadowEffectBase.OpacityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnOpacityChanged<T>(this T obj, Action<Avalonia.Media.DropShadowEffectBase, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Media.DropShadowEffectBase
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.DropShadowEffectBase.OpacityProperty);
        handler(obj, observable);
        return obj;
    }
}
