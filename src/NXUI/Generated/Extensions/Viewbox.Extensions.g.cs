// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.Viewbox"/> class property extension methods.
/// </summary>
public static partial class ViewboxExtensions
{
    // Avalonia.Controls.Viewbox.StretchProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Viewbox.StretchProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Stretch<T>(this T obj, Avalonia.Media.Stretch value) where T : Avalonia.Controls.Viewbox
    {
        obj[Avalonia.Controls.Viewbox.StretchProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Viewbox.StretchProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Stretch<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Viewbox
    {
        var descriptor = Avalonia.Controls.Viewbox.StretchProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Viewbox.StretchProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Stretch<T>(
        this T obj,
        IObservable<Avalonia.Media.Stretch> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Viewbox
    {
        var descriptor = Avalonia.Controls.Viewbox.StretchProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Viewbox.StretchProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Viewbox.StretchProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStretch(
        this Avalonia.Controls.Viewbox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Viewbox.StretchProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Viewbox.StretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.Stretch> ObserveStretch(this Avalonia.Controls.Viewbox obj)
    {
        return obj.GetObservable(Avalonia.Controls.Viewbox.StretchProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Viewbox.StretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStretch<T>(this T obj, Action<Avalonia.Controls.Viewbox, IObservable<Avalonia.Media.Stretch>> handler) where T : Avalonia.Controls.Viewbox
    {
        var observable = obj.GetObservable(Avalonia.Controls.Viewbox.StretchProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Viewbox.StretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.Stretch>> ObserveBindingStretch(this Avalonia.Controls.Viewbox obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Viewbox.StretchProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Viewbox.StretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingStretch<T>(this T obj, Action<Avalonia.Controls.Viewbox, IObservable<BindingValue<Avalonia.Media.Stretch>>> handler) where T : Avalonia.Controls.Viewbox
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Viewbox.StretchProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Viewbox.StretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveStretchChanged(this Avalonia.Controls.Viewbox obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Viewbox.StretchProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Viewbox.StretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStretchChanged<T>(this T obj, Action<Avalonia.Controls.Viewbox, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Viewbox
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Viewbox.StretchProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Viewbox.StretchProperty"/> property value to <see cref="Avalonia.Media.Stretch.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchNone<T>(this T obj) where T : Avalonia.Controls.Viewbox
    {
        obj[Avalonia.Controls.Viewbox.StretchProperty] = Avalonia.Media.Stretch.None;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Viewbox.StretchProperty"/> property value to <see cref="Avalonia.Media.Stretch.Fill"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchFill<T>(this T obj) where T : Avalonia.Controls.Viewbox
    {
        obj[Avalonia.Controls.Viewbox.StretchProperty] = Avalonia.Media.Stretch.Fill;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Viewbox.StretchProperty"/> property value to <see cref="Avalonia.Media.Stretch.Uniform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchUniform<T>(this T obj) where T : Avalonia.Controls.Viewbox
    {
        obj[Avalonia.Controls.Viewbox.StretchProperty] = Avalonia.Media.Stretch.Uniform;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Viewbox.StretchProperty"/> property value to <see cref="Avalonia.Media.Stretch.UniformToFill"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchUniformToFill<T>(this T obj) where T : Avalonia.Controls.Viewbox
    {
        obj[Avalonia.Controls.Viewbox.StretchProperty] = Avalonia.Media.Stretch.UniformToFill;
        return obj;
    }

    // Avalonia.Controls.Viewbox.StretchDirectionProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Viewbox.StretchDirectionProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchDirection<T>(this T obj, Avalonia.Media.StretchDirection value) where T : Avalonia.Controls.Viewbox
    {
        obj[Avalonia.Controls.Viewbox.StretchDirectionProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Viewbox.StretchDirectionProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchDirection<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Viewbox
    {
        var descriptor = Avalonia.Controls.Viewbox.StretchDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Viewbox.StretchDirectionProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchDirection<T>(
        this T obj,
        IObservable<Avalonia.Media.StretchDirection> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Viewbox
    {
        var descriptor = Avalonia.Controls.Viewbox.StretchDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Viewbox.StretchDirectionProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Viewbox.StretchDirectionProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindStretchDirection(
        this Avalonia.Controls.Viewbox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Viewbox.StretchDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Viewbox.StretchDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.StretchDirection> ObserveStretchDirection(this Avalonia.Controls.Viewbox obj)
    {
        return obj.GetObservable(Avalonia.Controls.Viewbox.StretchDirectionProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Viewbox.StretchDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStretchDirection<T>(this T obj, Action<Avalonia.Controls.Viewbox, IObservable<Avalonia.Media.StretchDirection>> handler) where T : Avalonia.Controls.Viewbox
    {
        var observable = obj.GetObservable(Avalonia.Controls.Viewbox.StretchDirectionProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Viewbox.StretchDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.StretchDirection>> ObserveBindingStretchDirection(this Avalonia.Controls.Viewbox obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Viewbox.StretchDirectionProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Viewbox.StretchDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingStretchDirection<T>(this T obj, Action<Avalonia.Controls.Viewbox, IObservable<BindingValue<Avalonia.Media.StretchDirection>>> handler) where T : Avalonia.Controls.Viewbox
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Viewbox.StretchDirectionProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Viewbox.StretchDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveStretchDirectionChanged(this Avalonia.Controls.Viewbox obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Viewbox.StretchDirectionProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Viewbox.StretchDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnStretchDirectionChanged<T>(this T obj, Action<Avalonia.Controls.Viewbox, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Viewbox
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Viewbox.StretchDirectionProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Viewbox.StretchDirectionProperty"/> property value to <see cref="Avalonia.Media.StretchDirection.UpOnly"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchDirectionUpOnly<T>(this T obj) where T : Avalonia.Controls.Viewbox
    {
        obj[Avalonia.Controls.Viewbox.StretchDirectionProperty] = Avalonia.Media.StretchDirection.UpOnly;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Viewbox.StretchDirectionProperty"/> property value to <see cref="Avalonia.Media.StretchDirection.DownOnly"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchDirectionDownOnly<T>(this T obj) where T : Avalonia.Controls.Viewbox
    {
        obj[Avalonia.Controls.Viewbox.StretchDirectionProperty] = Avalonia.Media.StretchDirection.DownOnly;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Viewbox.StretchDirectionProperty"/> property value to <see cref="Avalonia.Media.StretchDirection.Both"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T StretchDirectionBoth<T>(this T obj) where T : Avalonia.Controls.Viewbox
    {
        obj[Avalonia.Controls.Viewbox.StretchDirectionProperty] = Avalonia.Media.StretchDirection.Both;
        return obj;
    }

    // Avalonia.Controls.Viewbox.ChildProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Viewbox.ChildProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Child<T>(this T obj, Avalonia.Controls.Control value) where T : Avalonia.Controls.Viewbox
    {
        obj[Avalonia.Controls.Viewbox.ChildProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Viewbox.ChildProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Child<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Viewbox
    {
        var descriptor = Avalonia.Controls.Viewbox.ChildProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Viewbox.ChildProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Child<T>(
        this T obj,
        IObservable<Avalonia.Controls.Control> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Viewbox
    {
        var descriptor = Avalonia.Controls.Viewbox.ChildProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Viewbox.ChildProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Viewbox.ChildProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindChild(
        this Avalonia.Controls.Viewbox obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Viewbox.ChildProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Viewbox.ChildProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Control> ObserveChild(this Avalonia.Controls.Viewbox obj)
    {
        return obj.GetObservable(Avalonia.Controls.Viewbox.ChildProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Viewbox.ChildProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnChild<T>(this T obj, Action<Avalonia.Controls.Viewbox, IObservable<Avalonia.Controls.Control>> handler) where T : Avalonia.Controls.Viewbox
    {
        var observable = obj.GetObservable(Avalonia.Controls.Viewbox.ChildProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Viewbox.ChildProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.Control>> ObserveBindingChild(this Avalonia.Controls.Viewbox obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Viewbox.ChildProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Viewbox.ChildProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingChild<T>(this T obj, Action<Avalonia.Controls.Viewbox, IObservable<BindingValue<Avalonia.Controls.Control>>> handler) where T : Avalonia.Controls.Viewbox
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Viewbox.ChildProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Viewbox.ChildProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveChildChanged(this Avalonia.Controls.Viewbox obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Viewbox.ChildProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Viewbox.ChildProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnChildChanged<T>(this T obj, Action<Avalonia.Controls.Viewbox, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Viewbox
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Viewbox.ChildProperty);
        handler(obj, observable);
        return obj;
    }
}
