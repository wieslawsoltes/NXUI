// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Media.Rotate3DTransform"/> class property extension methods.
/// </summary>
public static partial class Rotate3DTransformExtensions
{
    // Avalonia.Media.Rotate3DTransform.AngleXProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/> value on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform AngleX(this Avalonia.Media.Rotate3DTransform obj, System.Double value)
    {
        obj[Avalonia.Media.Rotate3DTransform.AngleXProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform AngleX(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleXProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform AngleX(
        this Avalonia.Media.Rotate3DTransform obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleXProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/> binding on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAngleX(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleXProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.Double> ObserveAngleX(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetObservable(Avalonia.Media.Rotate3DTransform.AngleXProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/> property on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnAngleX(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.Rotate3DTransform.AngleXProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingAngleX(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.Rotate3DTransform.AngleXProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnBindingAngleX(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<BindingValue<System.Double>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.Rotate3DTransform.AngleXProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAngleXChanged(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.Rotate3DTransform.AngleXProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.Rotate3DTransform.AngleXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnAngleXChanged(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.Rotate3DTransform.AngleXProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.Rotate3DTransform.AngleYProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/> value on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform AngleY(this Avalonia.Media.Rotate3DTransform obj, System.Double value)
    {
        obj[Avalonia.Media.Rotate3DTransform.AngleYProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform AngleY(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleYProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform AngleY(
        this Avalonia.Media.Rotate3DTransform obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleYProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/> binding on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAngleY(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleYProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.Double> ObserveAngleY(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetObservable(Avalonia.Media.Rotate3DTransform.AngleYProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/> property on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnAngleY(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.Rotate3DTransform.AngleYProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingAngleY(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.Rotate3DTransform.AngleYProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnBindingAngleY(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<BindingValue<System.Double>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.Rotate3DTransform.AngleYProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAngleYChanged(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.Rotate3DTransform.AngleYProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.Rotate3DTransform.AngleYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnAngleYChanged(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.Rotate3DTransform.AngleYProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.Rotate3DTransform.AngleZProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/> value on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform AngleZ(this Avalonia.Media.Rotate3DTransform obj, System.Double value)
    {
        obj[Avalonia.Media.Rotate3DTransform.AngleZProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform AngleZ(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleZProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform AngleZ(
        this Avalonia.Media.Rotate3DTransform obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleZProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/> binding on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAngleZ(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.AngleZProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.Double> ObserveAngleZ(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetObservable(Avalonia.Media.Rotate3DTransform.AngleZProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/> property on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnAngleZ(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.Rotate3DTransform.AngleZProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingAngleZ(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.Rotate3DTransform.AngleZProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnBindingAngleZ(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<BindingValue<System.Double>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.Rotate3DTransform.AngleZProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAngleZChanged(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.Rotate3DTransform.AngleZProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.Rotate3DTransform.AngleZProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnAngleZChanged(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.Rotate3DTransform.AngleZProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.Rotate3DTransform.CenterXProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/> value on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform CenterX(this Avalonia.Media.Rotate3DTransform obj, System.Double value)
    {
        obj[Avalonia.Media.Rotate3DTransform.CenterXProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform CenterX(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterXProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform CenterX(
        this Avalonia.Media.Rotate3DTransform obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterXProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/> binding on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCenterX(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterXProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.Double> ObserveCenterX(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetObservable(Avalonia.Media.Rotate3DTransform.CenterXProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/> property on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnCenterX(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.Rotate3DTransform.CenterXProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingCenterX(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.Rotate3DTransform.CenterXProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnBindingCenterX(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<BindingValue<System.Double>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.Rotate3DTransform.CenterXProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveCenterXChanged(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.Rotate3DTransform.CenterXProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.Rotate3DTransform.CenterXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnCenterXChanged(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.Rotate3DTransform.CenterXProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.Rotate3DTransform.CenterYProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/> value on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform CenterY(this Avalonia.Media.Rotate3DTransform obj, System.Double value)
    {
        obj[Avalonia.Media.Rotate3DTransform.CenterYProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform CenterY(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterYProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform CenterY(
        this Avalonia.Media.Rotate3DTransform obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterYProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/> binding on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCenterY(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterYProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.Double> ObserveCenterY(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetObservable(Avalonia.Media.Rotate3DTransform.CenterYProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/> property on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnCenterY(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.Rotate3DTransform.CenterYProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingCenterY(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.Rotate3DTransform.CenterYProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnBindingCenterY(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<BindingValue<System.Double>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.Rotate3DTransform.CenterYProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveCenterYChanged(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.Rotate3DTransform.CenterYProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.Rotate3DTransform.CenterYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnCenterYChanged(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.Rotate3DTransform.CenterYProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.Rotate3DTransform.CenterZProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/> value on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform CenterZ(this Avalonia.Media.Rotate3DTransform obj, System.Double value)
    {
        obj[Avalonia.Media.Rotate3DTransform.CenterZProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform CenterZ(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterZProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform CenterZ(
        this Avalonia.Media.Rotate3DTransform obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterZProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/> binding on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCenterZ(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.CenterZProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.Double> ObserveCenterZ(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetObservable(Avalonia.Media.Rotate3DTransform.CenterZProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/> property on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnCenterZ(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.Rotate3DTransform.CenterZProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingCenterZ(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.Rotate3DTransform.CenterZProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnBindingCenterZ(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<BindingValue<System.Double>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.Rotate3DTransform.CenterZProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveCenterZChanged(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.Rotate3DTransform.CenterZProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.Rotate3DTransform.CenterZProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnCenterZChanged(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.Rotate3DTransform.CenterZProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.Rotate3DTransform.DepthProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/> value on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform Depth(this Avalonia.Media.Rotate3DTransform obj, System.Double value)
    {
        obj[Avalonia.Media.Rotate3DTransform.DepthProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform Depth(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.DepthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Rotate3DTransform Depth(
        this Avalonia.Media.Rotate3DTransform obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.DepthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/> binding on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDepth(
        this Avalonia.Media.Rotate3DTransform obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Rotate3DTransform.DepthProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/> on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.Double> ObserveDepth(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetObservable(Avalonia.Media.Rotate3DTransform.DepthProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/> property on an object of type <see cref="Avalonia.Media.Rotate3DTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnDepth(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.Rotate3DTransform.DepthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingDepth(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.Rotate3DTransform.DepthProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnBindingDepth(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<BindingValue<System.Double>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.Rotate3DTransform.DepthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDepthChanged(this Avalonia.Media.Rotate3DTransform obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.Rotate3DTransform.DepthProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.Rotate3DTransform.DepthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Rotate3DTransform OnDepthChanged(this Avalonia.Media.Rotate3DTransform obj, Action<Avalonia.Media.Rotate3DTransform, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.Rotate3DTransform.DepthProperty);
        handler(obj, observable);
        return obj;
    }
}
