// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.DataGrid"/> class property extension methods.
/// </summary>
public static partial class DataGridExtensions
{
    // Avalonia.Controls.DataGrid.CanUserReorderColumnsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.CanUserReorderColumnsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanUserReorderColumns<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.CanUserReorderColumnsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.CanUserReorderColumnsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanUserReorderColumns<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.CanUserReorderColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.CanUserReorderColumnsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanUserReorderColumns<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.CanUserReorderColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.CanUserReorderColumnsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.CanUserReorderColumnsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCanUserReorderColumns(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.CanUserReorderColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.CanUserReorderColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveCanUserReorderColumns(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.CanUserReorderColumnsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.CanUserReorderColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCanUserReorderColumns<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.CanUserReorderColumnsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.CanUserResizeColumnsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.CanUserResizeColumnsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanUserResizeColumns<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.CanUserResizeColumnsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.CanUserResizeColumnsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanUserResizeColumns<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.CanUserResizeColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.CanUserResizeColumnsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanUserResizeColumns<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.CanUserResizeColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.CanUserResizeColumnsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.CanUserResizeColumnsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCanUserResizeColumns(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.CanUserResizeColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.CanUserResizeColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveCanUserResizeColumns(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.CanUserResizeColumnsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.CanUserResizeColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCanUserResizeColumns<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.CanUserResizeColumnsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.CanUserSortColumnsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.CanUserSortColumnsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanUserSortColumns<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.CanUserSortColumnsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.CanUserSortColumnsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanUserSortColumns<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.CanUserSortColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.CanUserSortColumnsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanUserSortColumns<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.CanUserSortColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.CanUserSortColumnsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.CanUserSortColumnsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCanUserSortColumns(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.CanUserSortColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.CanUserSortColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveCanUserSortColumns(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.CanUserSortColumnsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.CanUserSortColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCanUserSortColumns<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.CanUserSortColumnsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.ColumnHeaderHeightProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.ColumnHeaderHeightProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColumnHeaderHeight<T>(this T obj, System.Double value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.ColumnHeaderHeightProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.ColumnHeaderHeightProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColumnHeaderHeight<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.ColumnHeaderHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.ColumnHeaderHeightProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColumnHeaderHeight<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.ColumnHeaderHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.ColumnHeaderHeightProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.ColumnHeaderHeightProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindColumnHeaderHeight(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.ColumnHeaderHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.ColumnHeaderHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveColumnHeaderHeight(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.ColumnHeaderHeightProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.ColumnHeaderHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColumnHeaderHeight<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<System.Double>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.ColumnHeaderHeightProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.ColumnWidthProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.ColumnWidthProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColumnWidth<T>(this T obj, Avalonia.Controls.DataGridLength value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.ColumnWidthProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.ColumnWidthProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColumnWidth<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.ColumnWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.ColumnWidthProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColumnWidth<T>(
        this T obj,
        IObservable<Avalonia.Controls.DataGridLength> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.ColumnWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.ColumnWidthProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.ColumnWidthProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindColumnWidth(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.ColumnWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.ColumnWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.DataGridLength> ObserveColumnWidth(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.ColumnWidthProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.ColumnWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColumnWidth<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Controls.DataGridLength>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.ColumnWidthProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.RowThemeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.RowThemeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowTheme<T>(this T obj, Avalonia.Styling.ControlTheme value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.RowThemeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.RowThemeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowTheme<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.RowThemeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.RowThemeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowTheme<T>(
        this T obj,
        IObservable<Avalonia.Styling.ControlTheme> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.RowThemeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.RowThemeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.RowThemeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRowTheme(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.RowThemeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.RowThemeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Styling.ControlTheme> ObserveRowTheme(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.RowThemeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.RowThemeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowTheme<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Styling.ControlTheme>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.RowThemeProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.CellThemeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.CellThemeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CellTheme<T>(this T obj, Avalonia.Styling.ControlTheme value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.CellThemeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.CellThemeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CellTheme<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.CellThemeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.CellThemeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CellTheme<T>(
        this T obj,
        IObservable<Avalonia.Styling.ControlTheme> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.CellThemeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.CellThemeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.CellThemeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCellTheme(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.CellThemeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.CellThemeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Styling.ControlTheme> ObserveCellTheme(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.CellThemeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.CellThemeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCellTheme<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Styling.ControlTheme>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.CellThemeProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.ColumnHeaderThemeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.ColumnHeaderThemeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColumnHeaderTheme<T>(this T obj, Avalonia.Styling.ControlTheme value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.ColumnHeaderThemeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.ColumnHeaderThemeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColumnHeaderTheme<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.ColumnHeaderThemeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.ColumnHeaderThemeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColumnHeaderTheme<T>(
        this T obj,
        IObservable<Avalonia.Styling.ControlTheme> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.ColumnHeaderThemeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.ColumnHeaderThemeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.ColumnHeaderThemeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindColumnHeaderTheme(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.ColumnHeaderThemeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.ColumnHeaderThemeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Styling.ControlTheme> ObserveColumnHeaderTheme(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.ColumnHeaderThemeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.ColumnHeaderThemeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColumnHeaderTheme<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Styling.ControlTheme>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.ColumnHeaderThemeProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.RowGroupThemeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.RowGroupThemeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowGroupTheme<T>(this T obj, Avalonia.Styling.ControlTheme value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.RowGroupThemeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.RowGroupThemeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowGroupTheme<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.RowGroupThemeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.RowGroupThemeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowGroupTheme<T>(
        this T obj,
        IObservable<Avalonia.Styling.ControlTheme> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.RowGroupThemeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.RowGroupThemeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.RowGroupThemeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRowGroupTheme(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.RowGroupThemeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.RowGroupThemeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Styling.ControlTheme> ObserveRowGroupTheme(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.RowGroupThemeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.RowGroupThemeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowGroupTheme<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Styling.ControlTheme>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.RowGroupThemeProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.FrozenColumnCountProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.FrozenColumnCountProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FrozenColumnCount<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.FrozenColumnCountProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.FrozenColumnCountProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FrozenColumnCount<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.FrozenColumnCountProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.FrozenColumnCountProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FrozenColumnCount<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.FrozenColumnCountProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.FrozenColumnCountProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.FrozenColumnCountProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindFrozenColumnCount(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.FrozenColumnCountProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.FrozenColumnCountProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveFrozenColumnCount(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.FrozenColumnCountProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.FrozenColumnCountProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFrozenColumnCount<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<System.Int32>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.FrozenColumnCountProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.GridLinesVisibilityProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.GridLinesVisibilityProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T GridLinesVisibility<T>(this T obj, Avalonia.Controls.DataGridGridLinesVisibility value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.GridLinesVisibilityProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.GridLinesVisibilityProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T GridLinesVisibility<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.GridLinesVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.GridLinesVisibilityProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T GridLinesVisibility<T>(
        this T obj,
        IObservable<Avalonia.Controls.DataGridGridLinesVisibility> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.GridLinesVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.GridLinesVisibilityProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.GridLinesVisibilityProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindGridLinesVisibility(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.GridLinesVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.GridLinesVisibilityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.DataGridGridLinesVisibility> ObserveGridLinesVisibility(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.GridLinesVisibilityProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.GridLinesVisibilityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnGridLinesVisibility<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Controls.DataGridGridLinesVisibility>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.GridLinesVisibilityProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.GridLinesVisibilityProperty"/> property value to <see cref="Avalonia.Controls.DataGridGridLinesVisibility.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T GridLinesVisibilityNone<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.GridLinesVisibilityProperty] = Avalonia.Controls.DataGridGridLinesVisibility.None;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.GridLinesVisibilityProperty"/> property value to <see cref="Avalonia.Controls.DataGridGridLinesVisibility.Horizontal"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T GridLinesVisibilityHorizontal<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.GridLinesVisibilityProperty] = Avalonia.Controls.DataGridGridLinesVisibility.Horizontal;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.GridLinesVisibilityProperty"/> property value to <see cref="Avalonia.Controls.DataGridGridLinesVisibility.Vertical"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T GridLinesVisibilityVertical<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.GridLinesVisibilityProperty] = Avalonia.Controls.DataGridGridLinesVisibility.Vertical;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.GridLinesVisibilityProperty"/> property value to <see cref="Avalonia.Controls.DataGridGridLinesVisibility.All"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T GridLinesVisibilityAll<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.GridLinesVisibilityProperty] = Avalonia.Controls.DataGridGridLinesVisibility.All;
        return obj;
    }

    // Avalonia.Controls.DataGrid.HeadersVisibilityProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.HeadersVisibilityProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HeadersVisibility<T>(this T obj, Avalonia.Controls.DataGridHeadersVisibility value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.HeadersVisibilityProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.HeadersVisibilityProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HeadersVisibility<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.HeadersVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.HeadersVisibilityProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HeadersVisibility<T>(
        this T obj,
        IObservable<Avalonia.Controls.DataGridHeadersVisibility> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.HeadersVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.HeadersVisibilityProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.HeadersVisibilityProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHeadersVisibility(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.HeadersVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.HeadersVisibilityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.DataGridHeadersVisibility> ObserveHeadersVisibility(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.HeadersVisibilityProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.HeadersVisibilityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHeadersVisibility<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Controls.DataGridHeadersVisibility>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.HeadersVisibilityProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.HeadersVisibilityProperty"/> property value to <see cref="Avalonia.Controls.DataGridHeadersVisibility.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HeadersVisibilityNone<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.HeadersVisibilityProperty] = Avalonia.Controls.DataGridHeadersVisibility.None;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.HeadersVisibilityProperty"/> property value to <see cref="Avalonia.Controls.DataGridHeadersVisibility.Column"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HeadersVisibilityColumn<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.HeadersVisibilityProperty] = Avalonia.Controls.DataGridHeadersVisibility.Column;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.HeadersVisibilityProperty"/> property value to <see cref="Avalonia.Controls.DataGridHeadersVisibility.Row"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HeadersVisibilityRow<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.HeadersVisibilityProperty] = Avalonia.Controls.DataGridHeadersVisibility.Row;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.HeadersVisibilityProperty"/> property value to <see cref="Avalonia.Controls.DataGridHeadersVisibility.All"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HeadersVisibilityAll<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.HeadersVisibilityProperty] = Avalonia.Controls.DataGridHeadersVisibility.All;
        return obj;
    }

    // Avalonia.Controls.DataGrid.HorizontalGridLinesBrushProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.HorizontalGridLinesBrushProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalGridLinesBrush<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.HorizontalGridLinesBrushProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.HorizontalGridLinesBrushProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalGridLinesBrush<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.HorizontalGridLinesBrushProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.HorizontalGridLinesBrushProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalGridLinesBrush<T>(
        this T obj,
        IObservable<Avalonia.Media.IBrush> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.HorizontalGridLinesBrushProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.HorizontalGridLinesBrushProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.HorizontalGridLinesBrushProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHorizontalGridLinesBrush(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.HorizontalGridLinesBrushProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.HorizontalGridLinesBrushProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IBrush> ObserveHorizontalGridLinesBrush(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.HorizontalGridLinesBrushProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.HorizontalGridLinesBrushProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHorizontalGridLinesBrush<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.HorizontalGridLinesBrushProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalScrollBarVisibility<T>(this T obj, Avalonia.Controls.Primitives.ScrollBarVisibility value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalScrollBarVisibility<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalScrollBarVisibility<T>(
        this T obj,
        IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHorizontalScrollBarVisibility(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility> ObserveHorizontalScrollBarVisibility(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHorizontalScrollBarVisibility<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.ScrollBarVisibility.Disabled"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalScrollBarVisibilityDisabled<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Disabled;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.ScrollBarVisibility.Auto"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalScrollBarVisibilityAuto<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Auto;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.ScrollBarVisibility.Hidden"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalScrollBarVisibilityHidden<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Hidden;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.ScrollBarVisibility.Visible"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalScrollBarVisibilityVisible<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.HorizontalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Visible;
        return obj;
    }

    // Avalonia.Controls.DataGrid.IsReadOnlyProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.IsReadOnlyProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsReadOnly<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.IsReadOnlyProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.IsReadOnlyProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsReadOnly<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.IsReadOnlyProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.IsReadOnlyProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsReadOnly<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.IsReadOnlyProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.IsReadOnlyProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.IsReadOnlyProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsReadOnly(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.IsReadOnlyProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.IsReadOnlyProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsReadOnly(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.IsReadOnlyProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.IsReadOnlyProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsReadOnly<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.IsReadOnlyProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.AreRowGroupHeadersFrozenProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.AreRowGroupHeadersFrozenProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AreRowGroupHeadersFrozen<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.AreRowGroupHeadersFrozenProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.AreRowGroupHeadersFrozenProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AreRowGroupHeadersFrozen<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.AreRowGroupHeadersFrozenProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.AreRowGroupHeadersFrozenProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AreRowGroupHeadersFrozen<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.AreRowGroupHeadersFrozenProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.AreRowGroupHeadersFrozenProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.AreRowGroupHeadersFrozenProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAreRowGroupHeadersFrozen(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.AreRowGroupHeadersFrozenProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.AreRowGroupHeadersFrozenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveAreRowGroupHeadersFrozen(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.AreRowGroupHeadersFrozenProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.AreRowGroupHeadersFrozenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAreRowGroupHeadersFrozen<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.AreRowGroupHeadersFrozenProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.IsValidProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.IsValidProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.IsValidProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsValid(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.IsValidProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.IsValidProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsValid(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.IsValidProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.IsValidProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.DataGrid OnIsValid(this Avalonia.Controls.DataGrid obj, Action<Avalonia.Controls.DataGrid, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.IsValidProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.MaxColumnWidthProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.MaxColumnWidthProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxColumnWidth<T>(this T obj, System.Double value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.MaxColumnWidthProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.MaxColumnWidthProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxColumnWidth<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.MaxColumnWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.MaxColumnWidthProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxColumnWidth<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.MaxColumnWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.MaxColumnWidthProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.MaxColumnWidthProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMaxColumnWidth(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.MaxColumnWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.MaxColumnWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveMaxColumnWidth(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.MaxColumnWidthProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.MaxColumnWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxColumnWidth<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<System.Double>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.MaxColumnWidthProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.MinColumnWidthProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.MinColumnWidthProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinColumnWidth<T>(this T obj, System.Double value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.MinColumnWidthProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.MinColumnWidthProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinColumnWidth<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.MinColumnWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.MinColumnWidthProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinColumnWidth<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.MinColumnWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.MinColumnWidthProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.MinColumnWidthProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinColumnWidth(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.MinColumnWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.MinColumnWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveMinColumnWidth(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.MinColumnWidthProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.MinColumnWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinColumnWidth<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<System.Double>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.MinColumnWidthProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.RowBackgroundProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.RowBackgroundProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowBackground<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.RowBackgroundProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.RowBackgroundProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowBackground<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.RowBackgroundProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.RowBackgroundProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowBackground<T>(
        this T obj,
        IObservable<Avalonia.Media.IBrush> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.RowBackgroundProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.RowBackgroundProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.RowBackgroundProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRowBackground(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.RowBackgroundProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.RowBackgroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IBrush> ObserveRowBackground(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.RowBackgroundProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.RowBackgroundProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowBackground<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.RowBackgroundProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.RowHeightProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.RowHeightProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowHeight<T>(this T obj, System.Double value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.RowHeightProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.RowHeightProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowHeight<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.RowHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.RowHeightProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowHeight<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.RowHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.RowHeightProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.RowHeightProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRowHeight(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.RowHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.RowHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveRowHeight(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.RowHeightProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.RowHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowHeight<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<System.Double>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.RowHeightProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.RowHeaderWidthProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.RowHeaderWidthProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowHeaderWidth<T>(this T obj, System.Double value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.RowHeaderWidthProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.RowHeaderWidthProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowHeaderWidth<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.RowHeaderWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.RowHeaderWidthProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowHeaderWidth<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.RowHeaderWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.RowHeaderWidthProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.RowHeaderWidthProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRowHeaderWidth(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.RowHeaderWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.RowHeaderWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveRowHeaderWidth(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.RowHeaderWidthProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.RowHeaderWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowHeaderWidth<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<System.Double>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.RowHeaderWidthProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.SelectionModeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.SelectionModeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionMode<T>(this T obj, Avalonia.Controls.DataGridSelectionMode value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.SelectionModeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.SelectionModeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionMode<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.SelectionModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.SelectionModeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionMode<T>(
        this T obj,
        IObservable<Avalonia.Controls.DataGridSelectionMode> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.SelectionModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.SelectionModeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.SelectionModeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectionMode(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.SelectionModeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.SelectionModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.DataGridSelectionMode> ObserveSelectionMode(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.SelectionModeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.SelectionModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectionMode<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Controls.DataGridSelectionMode>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.SelectionModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.SelectionModeProperty"/> property value to <see cref="Avalonia.Controls.DataGridSelectionMode.Extended"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionModeExtended<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.SelectionModeProperty] = Avalonia.Controls.DataGridSelectionMode.Extended;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.SelectionModeProperty"/> property value to <see cref="Avalonia.Controls.DataGridSelectionMode.Single"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectionModeSingle<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.SelectionModeProperty] = Avalonia.Controls.DataGridSelectionMode.Single;
        return obj;
    }

    // Avalonia.Controls.DataGrid.VerticalGridLinesBrushProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.VerticalGridLinesBrushProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalGridLinesBrush<T>(this T obj, Avalonia.Media.IBrush value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.VerticalGridLinesBrushProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.VerticalGridLinesBrushProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalGridLinesBrush<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.VerticalGridLinesBrushProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.VerticalGridLinesBrushProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalGridLinesBrush<T>(
        this T obj,
        IObservable<Avalonia.Media.IBrush> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.VerticalGridLinesBrushProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.VerticalGridLinesBrushProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.VerticalGridLinesBrushProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindVerticalGridLinesBrush(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.VerticalGridLinesBrushProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.VerticalGridLinesBrushProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IBrush> ObserveVerticalGridLinesBrush(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.VerticalGridLinesBrushProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.VerticalGridLinesBrushProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnVerticalGridLinesBrush<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Media.IBrush>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.VerticalGridLinesBrushProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalScrollBarVisibility<T>(this T obj, Avalonia.Controls.Primitives.ScrollBarVisibility value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalScrollBarVisibility<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalScrollBarVisibility<T>(
        this T obj,
        IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindVerticalScrollBarVisibility(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility> ObserveVerticalScrollBarVisibility(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnVerticalScrollBarVisibility<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Controls.Primitives.ScrollBarVisibility>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.ScrollBarVisibility.Disabled"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalScrollBarVisibilityDisabled<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Disabled;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.ScrollBarVisibility.Auto"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalScrollBarVisibilityAuto<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Auto;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.ScrollBarVisibility.Hidden"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalScrollBarVisibilityHidden<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Hidden;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty"/> property value to <see cref="Avalonia.Controls.Primitives.ScrollBarVisibility.Visible"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalScrollBarVisibilityVisible<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.VerticalScrollBarVisibilityProperty] = Avalonia.Controls.Primitives.ScrollBarVisibility.Visible;
        return obj;
    }

    // Avalonia.Controls.DataGrid.DropLocationIndicatorTemplateProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.DropLocationIndicatorTemplateProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DropLocationIndicatorTemplate<T>(this T obj, Avalonia.Controls.ITemplate<Avalonia.Controls.Control> value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.DropLocationIndicatorTemplateProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.DropLocationIndicatorTemplateProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DropLocationIndicatorTemplate<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.DropLocationIndicatorTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.DropLocationIndicatorTemplateProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DropLocationIndicatorTemplate<T>(
        this T obj,
        IObservable<Avalonia.Controls.ITemplate<Avalonia.Controls.Control>> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.DropLocationIndicatorTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.DropLocationIndicatorTemplateProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.DropLocationIndicatorTemplateProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDropLocationIndicatorTemplate(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.DropLocationIndicatorTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.DropLocationIndicatorTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.ITemplate<Avalonia.Controls.Control>> ObserveDropLocationIndicatorTemplate(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.DropLocationIndicatorTemplateProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.DropLocationIndicatorTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDropLocationIndicatorTemplate<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Controls.ITemplate<Avalonia.Controls.Control>>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.DropLocationIndicatorTemplateProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.SelectedIndexProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.SelectedIndexProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedIndex<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.SelectedIndexProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.SelectedIndexProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedIndex<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.SelectedIndexProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.SelectedIndexProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedIndex<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.SelectedIndexProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.SelectedIndexProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.SelectedIndexProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectedIndex(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.SelectedIndexProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.SelectedIndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveSelectedIndex(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.SelectedIndexProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.SelectedIndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectedIndex<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<System.Int32>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.SelectedIndexProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.SelectedItemProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.SelectedItemProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedItem<T>(this T obj, System.Object value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.SelectedItemProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.SelectedItemProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedItem<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.SelectedItemProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.SelectedItemProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedItem<T>(
        this T obj,
        IObservable<System.Object> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.SelectedItemProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.SelectedItemProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.SelectedItemProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectedItem(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.SelectedItemProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.SelectedItemProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObserveSelectedItem(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.SelectedItemProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.SelectedItemProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectedItem<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<System.Object>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.SelectedItemProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.ClipboardCopyModeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.ClipboardCopyModeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ClipboardCopyMode<T>(this T obj, Avalonia.Controls.DataGridClipboardCopyMode value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.ClipboardCopyModeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.ClipboardCopyModeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ClipboardCopyMode<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.ClipboardCopyModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.ClipboardCopyModeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ClipboardCopyMode<T>(
        this T obj,
        IObservable<Avalonia.Controls.DataGridClipboardCopyMode> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.ClipboardCopyModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.ClipboardCopyModeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.ClipboardCopyModeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindClipboardCopyMode(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.ClipboardCopyModeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.ClipboardCopyModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.DataGridClipboardCopyMode> ObserveClipboardCopyMode(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.ClipboardCopyModeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.ClipboardCopyModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnClipboardCopyMode<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Controls.DataGridClipboardCopyMode>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.ClipboardCopyModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.ClipboardCopyModeProperty"/> property value to <see cref="Avalonia.Controls.DataGridClipboardCopyMode.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ClipboardCopyModeNone<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.ClipboardCopyModeProperty] = Avalonia.Controls.DataGridClipboardCopyMode.None;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.ClipboardCopyModeProperty"/> property value to <see cref="Avalonia.Controls.DataGridClipboardCopyMode.ExcludeHeader"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ClipboardCopyModeExcludeHeader<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.ClipboardCopyModeProperty] = Avalonia.Controls.DataGridClipboardCopyMode.ExcludeHeader;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.ClipboardCopyModeProperty"/> property value to <see cref="Avalonia.Controls.DataGridClipboardCopyMode.IncludeHeader"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ClipboardCopyModeIncludeHeader<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.ClipboardCopyModeProperty] = Avalonia.Controls.DataGridClipboardCopyMode.IncludeHeader;
        return obj;
    }

    // Avalonia.Controls.DataGrid.AutoGenerateColumnsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.AutoGenerateColumnsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AutoGenerateColumns<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.AutoGenerateColumnsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.AutoGenerateColumnsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AutoGenerateColumns<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.AutoGenerateColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.AutoGenerateColumnsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AutoGenerateColumns<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.AutoGenerateColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.AutoGenerateColumnsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.AutoGenerateColumnsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAutoGenerateColumns(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.AutoGenerateColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.AutoGenerateColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveAutoGenerateColumns(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.AutoGenerateColumnsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.AutoGenerateColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAutoGenerateColumns<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.AutoGenerateColumnsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.ItemsSourceProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.ItemsSourceProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsSource<T>(this T obj, System.Collections.IEnumerable value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.ItemsSourceProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.ItemsSourceProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsSource<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.ItemsSourceProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.ItemsSourceProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsSource<T>(
        this T obj,
        IObservable<System.Collections.IEnumerable> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.ItemsSourceProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.ItemsSourceProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.ItemsSourceProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindItemsSource(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.ItemsSourceProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.ItemsSourceProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Collections.IEnumerable> ObserveItemsSource(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.ItemsSourceProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.ItemsSourceProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnItemsSource<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<System.Collections.IEnumerable>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.ItemsSourceProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.AreRowDetailsFrozenProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.AreRowDetailsFrozenProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AreRowDetailsFrozen<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.AreRowDetailsFrozenProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.AreRowDetailsFrozenProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AreRowDetailsFrozen<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.AreRowDetailsFrozenProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.AreRowDetailsFrozenProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AreRowDetailsFrozen<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.AreRowDetailsFrozenProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.AreRowDetailsFrozenProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.AreRowDetailsFrozenProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAreRowDetailsFrozen(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.AreRowDetailsFrozenProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.AreRowDetailsFrozenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveAreRowDetailsFrozen(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.AreRowDetailsFrozenProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.AreRowDetailsFrozenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAreRowDetailsFrozen<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.AreRowDetailsFrozenProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.RowDetailsTemplateProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.RowDetailsTemplateProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowDetailsTemplate<T>(this T obj, Avalonia.Controls.Templates.IDataTemplate value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.RowDetailsTemplateProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.RowDetailsTemplateProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowDetailsTemplate<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.RowDetailsTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.RowDetailsTemplateProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowDetailsTemplate<T>(
        this T obj,
        IObservable<Avalonia.Controls.Templates.IDataTemplate> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.RowDetailsTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.RowDetailsTemplateProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.RowDetailsTemplateProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRowDetailsTemplate(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.RowDetailsTemplateProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.RowDetailsTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Templates.IDataTemplate> ObserveRowDetailsTemplate(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.RowDetailsTemplateProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.RowDetailsTemplateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowDetailsTemplate<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Controls.Templates.IDataTemplate>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.RowDetailsTemplateProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowDetailsVisibilityMode<T>(this T obj, Avalonia.Controls.DataGridRowDetailsVisibilityMode value) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowDetailsVisibilityMode<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowDetailsVisibilityMode<T>(
        this T obj,
        IObservable<Avalonia.Controls.DataGridRowDetailsVisibilityMode> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGrid
    {
        var descriptor = Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRowDetailsVisibilityMode(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.DataGridRowDetailsVisibilityMode> ObserveRowDetailsVisibilityMode(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowDetailsVisibilityMode<T>(this T obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Controls.DataGridRowDetailsVisibilityMode>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty"/> property value to <see cref="Avalonia.Controls.DataGridRowDetailsVisibilityMode.VisibleWhenSelected"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowDetailsVisibilityModeVisibleWhenSelected<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty] = Avalonia.Controls.DataGridRowDetailsVisibilityMode.VisibleWhenSelected;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty"/> property value to <see cref="Avalonia.Controls.DataGridRowDetailsVisibilityMode.Visible"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowDetailsVisibilityModeVisible<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty] = Avalonia.Controls.DataGridRowDetailsVisibilityMode.Visible;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty"/> property value to <see cref="Avalonia.Controls.DataGridRowDetailsVisibilityMode.Collapsed"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowDetailsVisibilityModeCollapsed<T>(this T obj) where T : Avalonia.Controls.DataGrid
    {
        obj[Avalonia.Controls.DataGrid.RowDetailsVisibilityModeProperty] = Avalonia.Controls.DataGridRowDetailsVisibilityMode.Collapsed;
        return obj;
    }

    // Avalonia.Controls.DataGrid.CollectionViewProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGrid.CollectionViewProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGrid.CollectionViewProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCollectionView(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGrid.CollectionViewProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGrid.CollectionViewProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Collections.IDataGridCollectionView> ObserveCollectionView(this Avalonia.Controls.DataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.CollectionViewProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGrid.CollectionViewProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.DataGrid OnCollectionView(this Avalonia.Controls.DataGrid obj, Action<Avalonia.Controls.DataGrid, IObservable<Avalonia.Collections.IDataGridCollectionView>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.CollectionViewProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGrid.SelectionChangedEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.DataGrid.SelectionChangedEvent"/> event on an object of type <see cref="Avalonia.Controls.DataGrid"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnSelectionChangedHandler<T>(
        this T obj,
        Action<T, Avalonia.Controls.SelectionChangedEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.DataGrid
    {
        obj.AddHandler(Avalonia.Controls.DataGrid.SelectionChangedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.DataGrid.SelectionChangedEvent"/> event on an object of type <see cref="Avalonia.Controls.DataGrid"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnSelectionChanged<T>(
        this T obj, Action<T, IObservable<Avalonia.Controls.SelectionChangedEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.DataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGrid.SelectionChangedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.DataGrid.SelectionChangedEvent"/> event on an object of type <see cref="Avalonia.Controls.DataGrid"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Controls.SelectionChangedEventArgs> ObserveOnSelectionChanged(
        this Avalonia.Controls.DataGrid obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.DataGrid.SelectionChangedEvent, routes);
    }

    // Avalonia.Controls.DataGrid.HorizontalScroll

    /// <summary>
    /// Adds a handler to the `HorizontalScroll` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHorizontalScrollEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.Primitives.ScrollEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.Primitives.ScrollEventArgs>, Avalonia.Controls.Primitives.ScrollEventArgs>(
                h => obj.HorizontalScroll += h, 
                h => obj.HorizontalScroll -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `HorizontalScroll` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `HorizontalScroll` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.Primitives.ScrollEventArgs> ObserveOnHorizontalScrollEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.Primitives.ScrollEventArgs>, Avalonia.Controls.Primitives.ScrollEventArgs>(
                h => obj.HorizontalScroll += h, 
                h => obj.HorizontalScroll -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.VerticalScroll

    /// <summary>
    /// Adds a handler to the `VerticalScroll` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnVerticalScrollEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.Primitives.ScrollEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.Primitives.ScrollEventArgs>, Avalonia.Controls.Primitives.ScrollEventArgs>(
                h => obj.VerticalScroll += h, 
                h => obj.VerticalScroll -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `VerticalScroll` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `VerticalScroll` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.Primitives.ScrollEventArgs> ObserveOnVerticalScrollEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.Primitives.ScrollEventArgs>, Avalonia.Controls.Primitives.ScrollEventArgs>(
                h => obj.VerticalScroll += h, 
                h => obj.VerticalScroll -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.AutoGeneratingColumn

    /// <summary>
    /// Adds a handler to the `AutoGeneratingColumn` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAutoGeneratingColumnEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridAutoGeneratingColumnEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridAutoGeneratingColumnEventArgs>, Avalonia.Controls.DataGridAutoGeneratingColumnEventArgs>(
                h => obj.AutoGeneratingColumn += h, 
                h => obj.AutoGeneratingColumn -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `AutoGeneratingColumn` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `AutoGeneratingColumn` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridAutoGeneratingColumnEventArgs> ObserveOnAutoGeneratingColumnEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridAutoGeneratingColumnEventArgs>, Avalonia.Controls.DataGridAutoGeneratingColumnEventArgs>(
                h => obj.AutoGeneratingColumn += h, 
                h => obj.AutoGeneratingColumn -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.BeginningEdit

    /// <summary>
    /// Adds a handler to the `BeginningEdit` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBeginningEditEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridBeginningEditEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridBeginningEditEventArgs>, Avalonia.Controls.DataGridBeginningEditEventArgs>(
                h => obj.BeginningEdit += h, 
                h => obj.BeginningEdit -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `BeginningEdit` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `BeginningEdit` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridBeginningEditEventArgs> ObserveOnBeginningEditEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridBeginningEditEventArgs>, Avalonia.Controls.DataGridBeginningEditEventArgs>(
                h => obj.BeginningEdit += h, 
                h => obj.BeginningEdit -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.CellEditEnded

    /// <summary>
    /// Adds a handler to the `CellEditEnded` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCellEditEndedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridCellEditEndedEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridCellEditEndedEventArgs>, Avalonia.Controls.DataGridCellEditEndedEventArgs>(
                h => obj.CellEditEnded += h, 
                h => obj.CellEditEnded -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `CellEditEnded` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `CellEditEnded` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridCellEditEndedEventArgs> ObserveOnCellEditEndedEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridCellEditEndedEventArgs>, Avalonia.Controls.DataGridCellEditEndedEventArgs>(
                h => obj.CellEditEnded += h, 
                h => obj.CellEditEnded -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.CellEditEnding

    /// <summary>
    /// Adds a handler to the `CellEditEnding` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCellEditEndingEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridCellEditEndingEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridCellEditEndingEventArgs>, Avalonia.Controls.DataGridCellEditEndingEventArgs>(
                h => obj.CellEditEnding += h, 
                h => obj.CellEditEnding -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `CellEditEnding` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `CellEditEnding` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridCellEditEndingEventArgs> ObserveOnCellEditEndingEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridCellEditEndingEventArgs>, Avalonia.Controls.DataGridCellEditEndingEventArgs>(
                h => obj.CellEditEnding += h, 
                h => obj.CellEditEnding -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.CellPointerPressed

    /// <summary>
    /// Adds a handler to the `CellPointerPressed` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCellPointerPressedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridCellPointerPressedEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridCellPointerPressedEventArgs>, Avalonia.Controls.DataGridCellPointerPressedEventArgs>(
                h => obj.CellPointerPressed += h, 
                h => obj.CellPointerPressed -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `CellPointerPressed` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `CellPointerPressed` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridCellPointerPressedEventArgs> ObserveOnCellPointerPressedEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridCellPointerPressedEventArgs>, Avalonia.Controls.DataGridCellPointerPressedEventArgs>(
                h => obj.CellPointerPressed += h, 
                h => obj.CellPointerPressed -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.ColumnDisplayIndexChanged

    /// <summary>
    /// Adds a handler to the `ColumnDisplayIndexChanged` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColumnDisplayIndexChangedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridColumnEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridColumnEventArgs>, Avalonia.Controls.DataGridColumnEventArgs>(
                h => obj.ColumnDisplayIndexChanged += h, 
                h => obj.ColumnDisplayIndexChanged -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `ColumnDisplayIndexChanged` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `ColumnDisplayIndexChanged` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridColumnEventArgs> ObserveOnColumnDisplayIndexChangedEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridColumnEventArgs>, Avalonia.Controls.DataGridColumnEventArgs>(
                h => obj.ColumnDisplayIndexChanged += h, 
                h => obj.ColumnDisplayIndexChanged -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.ColumnReordered

    /// <summary>
    /// Adds a handler to the `ColumnReordered` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColumnReorderedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridColumnEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridColumnEventArgs>, Avalonia.Controls.DataGridColumnEventArgs>(
                h => obj.ColumnReordered += h, 
                h => obj.ColumnReordered -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `ColumnReordered` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `ColumnReordered` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridColumnEventArgs> ObserveOnColumnReorderedEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridColumnEventArgs>, Avalonia.Controls.DataGridColumnEventArgs>(
                h => obj.ColumnReordered += h, 
                h => obj.ColumnReordered -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.ColumnReordering

    /// <summary>
    /// Adds a handler to the `ColumnReordering` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColumnReorderingEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridColumnReorderingEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridColumnReorderingEventArgs>, Avalonia.Controls.DataGridColumnReorderingEventArgs>(
                h => obj.ColumnReordering += h, 
                h => obj.ColumnReordering -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `ColumnReordering` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `ColumnReordering` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridColumnReorderingEventArgs> ObserveOnColumnReorderingEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridColumnReorderingEventArgs>, Avalonia.Controls.DataGridColumnReorderingEventArgs>(
                h => obj.ColumnReordering += h, 
                h => obj.ColumnReordering -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.CurrentCellChanged

    /// <summary>
    /// Adds a handler to the `CurrentCellChanged` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCurrentCellChangedEvent<T>(this T obj, Action<T, IObservable<System.EventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<System.EventArgs>, System.EventArgs>(
                h => obj.CurrentCellChanged += h, 
                h => obj.CurrentCellChanged -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `CurrentCellChanged` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `CurrentCellChanged` event on the specified object.</returns>
    public static IObservable<System.EventArgs> ObserveOnCurrentCellChangedEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<System.EventArgs>, System.EventArgs>(
                h => obj.CurrentCellChanged += h, 
                h => obj.CurrentCellChanged -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.LoadingRow

    /// <summary>
    /// Adds a handler to the `LoadingRow` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnLoadingRowEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridRowEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowEventArgs>, Avalonia.Controls.DataGridRowEventArgs>(
                h => obj.LoadingRow += h, 
                h => obj.LoadingRow -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `LoadingRow` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `LoadingRow` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridRowEventArgs> ObserveOnLoadingRowEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowEventArgs>, Avalonia.Controls.DataGridRowEventArgs>(
                h => obj.LoadingRow += h, 
                h => obj.LoadingRow -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.PreparingCellForEdit

    /// <summary>
    /// Adds a handler to the `PreparingCellForEdit` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPreparingCellForEditEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridPreparingCellForEditEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridPreparingCellForEditEventArgs>, Avalonia.Controls.DataGridPreparingCellForEditEventArgs>(
                h => obj.PreparingCellForEdit += h, 
                h => obj.PreparingCellForEdit -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `PreparingCellForEdit` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `PreparingCellForEdit` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridPreparingCellForEditEventArgs> ObserveOnPreparingCellForEditEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridPreparingCellForEditEventArgs>, Avalonia.Controls.DataGridPreparingCellForEditEventArgs>(
                h => obj.PreparingCellForEdit += h, 
                h => obj.PreparingCellForEdit -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.RowEditEnded

    /// <summary>
    /// Adds a handler to the `RowEditEnded` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowEditEndedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridRowEditEndedEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowEditEndedEventArgs>, Avalonia.Controls.DataGridRowEditEndedEventArgs>(
                h => obj.RowEditEnded += h, 
                h => obj.RowEditEnded -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `RowEditEnded` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `RowEditEnded` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridRowEditEndedEventArgs> ObserveOnRowEditEndedEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowEditEndedEventArgs>, Avalonia.Controls.DataGridRowEditEndedEventArgs>(
                h => obj.RowEditEnded += h, 
                h => obj.RowEditEnded -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.RowEditEnding

    /// <summary>
    /// Adds a handler to the `RowEditEnding` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowEditEndingEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridRowEditEndingEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowEditEndingEventArgs>, Avalonia.Controls.DataGridRowEditEndingEventArgs>(
                h => obj.RowEditEnding += h, 
                h => obj.RowEditEnding -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `RowEditEnding` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `RowEditEnding` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridRowEditEndingEventArgs> ObserveOnRowEditEndingEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowEditEndingEventArgs>, Avalonia.Controls.DataGridRowEditEndingEventArgs>(
                h => obj.RowEditEnding += h, 
                h => obj.RowEditEnding -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.SelectionChanged

    /// <summary>
    /// Adds a handler to the `SelectionChanged` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectionChangedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.SelectionChangedEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.SelectionChangedEventArgs>, Avalonia.Controls.SelectionChangedEventArgs>(
                h => obj.SelectionChanged += h, 
                h => obj.SelectionChanged -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `SelectionChanged` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `SelectionChanged` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.SelectionChangedEventArgs> ObserveOnSelectionChangedEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.SelectionChangedEventArgs>, Avalonia.Controls.SelectionChangedEventArgs>(
                h => obj.SelectionChanged += h, 
                h => obj.SelectionChanged -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.Sorting

    /// <summary>
    /// Adds a handler to the `Sorting` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSortingEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridColumnEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridColumnEventArgs>, Avalonia.Controls.DataGridColumnEventArgs>(
                h => obj.Sorting += h, 
                h => obj.Sorting -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `Sorting` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `Sorting` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridColumnEventArgs> ObserveOnSortingEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridColumnEventArgs>, Avalonia.Controls.DataGridColumnEventArgs>(
                h => obj.Sorting += h, 
                h => obj.Sorting -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.UnloadingRow

    /// <summary>
    /// Adds a handler to the `UnloadingRow` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnUnloadingRowEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridRowEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowEventArgs>, Avalonia.Controls.DataGridRowEventArgs>(
                h => obj.UnloadingRow += h, 
                h => obj.UnloadingRow -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `UnloadingRow` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `UnloadingRow` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridRowEventArgs> ObserveOnUnloadingRowEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowEventArgs>, Avalonia.Controls.DataGridRowEventArgs>(
                h => obj.UnloadingRow += h, 
                h => obj.UnloadingRow -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.LoadingRowDetails

    /// <summary>
    /// Adds a handler to the `LoadingRowDetails` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnLoadingRowDetailsEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridRowDetailsEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowDetailsEventArgs>, Avalonia.Controls.DataGridRowDetailsEventArgs>(
                h => obj.LoadingRowDetails += h, 
                h => obj.LoadingRowDetails -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `LoadingRowDetails` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `LoadingRowDetails` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridRowDetailsEventArgs> ObserveOnLoadingRowDetailsEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowDetailsEventArgs>, Avalonia.Controls.DataGridRowDetailsEventArgs>(
                h => obj.LoadingRowDetails += h, 
                h => obj.LoadingRowDetails -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.RowDetailsVisibilityChanged

    /// <summary>
    /// Adds a handler to the `RowDetailsVisibilityChanged` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowDetailsVisibilityChangedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridRowDetailsEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowDetailsEventArgs>, Avalonia.Controls.DataGridRowDetailsEventArgs>(
                h => obj.RowDetailsVisibilityChanged += h, 
                h => obj.RowDetailsVisibilityChanged -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `RowDetailsVisibilityChanged` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `RowDetailsVisibilityChanged` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridRowDetailsEventArgs> ObserveOnRowDetailsVisibilityChangedEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowDetailsEventArgs>, Avalonia.Controls.DataGridRowDetailsEventArgs>(
                h => obj.RowDetailsVisibilityChanged += h, 
                h => obj.RowDetailsVisibilityChanged -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.UnloadingRowDetails

    /// <summary>
    /// Adds a handler to the `UnloadingRowDetails` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnUnloadingRowDetailsEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridRowDetailsEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowDetailsEventArgs>, Avalonia.Controls.DataGridRowDetailsEventArgs>(
                h => obj.UnloadingRowDetails += h, 
                h => obj.UnloadingRowDetails -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `UnloadingRowDetails` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `UnloadingRowDetails` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridRowDetailsEventArgs> ObserveOnUnloadingRowDetailsEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowDetailsEventArgs>, Avalonia.Controls.DataGridRowDetailsEventArgs>(
                h => obj.UnloadingRowDetails += h, 
                h => obj.UnloadingRowDetails -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.LoadingRowGroup

    /// <summary>
    /// Adds a handler to the `LoadingRowGroup` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnLoadingRowGroupEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridRowGroupHeaderEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowGroupHeaderEventArgs>, Avalonia.Controls.DataGridRowGroupHeaderEventArgs>(
                h => obj.LoadingRowGroup += h, 
                h => obj.LoadingRowGroup -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `LoadingRowGroup` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `LoadingRowGroup` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridRowGroupHeaderEventArgs> ObserveOnLoadingRowGroupEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowGroupHeaderEventArgs>, Avalonia.Controls.DataGridRowGroupHeaderEventArgs>(
                h => obj.LoadingRowGroup += h, 
                h => obj.LoadingRowGroup -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.UnloadingRowGroup

    /// <summary>
    /// Adds a handler to the `UnloadingRowGroup` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnUnloadingRowGroupEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridRowGroupHeaderEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowGroupHeaderEventArgs>, Avalonia.Controls.DataGridRowGroupHeaderEventArgs>(
                h => obj.UnloadingRowGroup += h, 
                h => obj.UnloadingRowGroup -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `UnloadingRowGroup` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `UnloadingRowGroup` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridRowGroupHeaderEventArgs> ObserveOnUnloadingRowGroupEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowGroupHeaderEventArgs>, Avalonia.Controls.DataGridRowGroupHeaderEventArgs>(
                h => obj.UnloadingRowGroup += h, 
                h => obj.UnloadingRowGroup -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.DataGrid.CopyingRowClipboardContent

    /// <summary>
    /// Adds a handler to the `CopyingRowClipboardContent` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCopyingRowClipboardContentEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.DataGridRowClipboardEventArgs>> handler) where T : Avalonia.Controls.DataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowClipboardEventArgs>, Avalonia.Controls.DataGridRowClipboardEventArgs>(
                h => obj.CopyingRowClipboardContent += h, 
                h => obj.CopyingRowClipboardContent -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `CopyingRowClipboardContent` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `CopyingRowClipboardContent` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.DataGridRowClipboardEventArgs> ObserveOnCopyingRowClipboardContentEvent(this Avalonia.Controls.DataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.DataGridRowClipboardEventArgs>, Avalonia.Controls.DataGridRowClipboardEventArgs>(
                h => obj.CopyingRowClipboardContent += h, 
                h => obj.CopyingRowClipboardContent -= h)
            .Select(x => x.EventArgs);
    }
}
