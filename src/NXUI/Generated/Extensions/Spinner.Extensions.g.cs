// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.Spinner"/> class property extension methods.
/// </summary>
public static partial class SpinnerExtensions
{
    // Avalonia.Controls.Spinner.ValidSpinDirectionProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Spinner.ValidSpinDirectionProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ValidSpinDirection<T>(this T obj, Avalonia.Controls.ValidSpinDirections value) where T : Avalonia.Controls.Spinner
    {
        obj[Avalonia.Controls.Spinner.ValidSpinDirectionProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Spinner.ValidSpinDirectionProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ValidSpinDirection<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Spinner
    {
        var descriptor = Avalonia.Controls.Spinner.ValidSpinDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Spinner.ValidSpinDirectionProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ValidSpinDirection<T>(
        this T obj,
        IObservable<Avalonia.Controls.ValidSpinDirections> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Spinner
    {
        var descriptor = Avalonia.Controls.Spinner.ValidSpinDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Spinner.ValidSpinDirectionProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Spinner.ValidSpinDirectionProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindValidSpinDirection(
        this Avalonia.Controls.Spinner obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Spinner.ValidSpinDirectionProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Spinner.ValidSpinDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.ValidSpinDirections> ObserveValidSpinDirection(this Avalonia.Controls.Spinner obj)
    {
        return obj.GetObservable(Avalonia.Controls.Spinner.ValidSpinDirectionProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Spinner.ValidSpinDirectionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnValidSpinDirection<T>(this T obj, Action<Avalonia.Controls.Spinner, IObservable<Avalonia.Controls.ValidSpinDirections>> handler) where T : Avalonia.Controls.Spinner
    {
        var observable = obj.GetObservable(Avalonia.Controls.Spinner.ValidSpinDirectionProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Spinner.ValidSpinDirectionProperty"/> property value to <see cref="Avalonia.Controls.ValidSpinDirections.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ValidSpinDirectionNone<T>(this T obj) where T : Avalonia.Controls.Spinner
    {
        obj[Avalonia.Controls.Spinner.ValidSpinDirectionProperty] = Avalonia.Controls.ValidSpinDirections.None;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Spinner.ValidSpinDirectionProperty"/> property value to <see cref="Avalonia.Controls.ValidSpinDirections.Increase"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ValidSpinDirectionIncrease<T>(this T obj) where T : Avalonia.Controls.Spinner
    {
        obj[Avalonia.Controls.Spinner.ValidSpinDirectionProperty] = Avalonia.Controls.ValidSpinDirections.Increase;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Spinner.ValidSpinDirectionProperty"/> property value to <see cref="Avalonia.Controls.ValidSpinDirections.Decrease"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ValidSpinDirectionDecrease<T>(this T obj) where T : Avalonia.Controls.Spinner
    {
        obj[Avalonia.Controls.Spinner.ValidSpinDirectionProperty] = Avalonia.Controls.ValidSpinDirections.Decrease;
        return obj;
    }

    // Avalonia.Controls.Spinner.SpinEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.Spinner.SpinEvent"/> event on an object of type <see cref="Avalonia.Controls.Spinner"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnSpinHandler<T>(
        this T obj,
        Action<T, Avalonia.Controls.SpinEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Spinner
    {
        obj.AddHandler(Avalonia.Controls.Spinner.SpinEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.Spinner.SpinEvent"/> event on an object of type <see cref="Avalonia.Controls.Spinner"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnSpin<T>(
        this T obj, Action<T, IObservable<Avalonia.Controls.SpinEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Spinner
    {
        var observable = obj.GetObservable(Avalonia.Controls.Spinner.SpinEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.Spinner.SpinEvent"/> event on an object of type <see cref="Avalonia.Controls.Spinner"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Controls.SpinEventArgs> ObserveOnSpin(
        this Avalonia.Controls.Spinner obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.Spinner.SpinEvent, routes);
    }

    // Avalonia.Controls.Spinner.Spin

    /// <summary>
    /// Adds a handler to the `Spin` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSpinEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.SpinEventArgs>> handler) where T : Avalonia.Controls.Spinner
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.SpinEventArgs>, Avalonia.Controls.SpinEventArgs>(
                h => obj.Spin += h, 
                h => obj.Spin -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `Spin` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `Spin` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.SpinEventArgs> ObserveOnSpinEvent(this Avalonia.Controls.Spinner obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.SpinEventArgs>, Avalonia.Controls.SpinEventArgs>(
                h => obj.Spin += h, 
                h => obj.Spin -= h)
            .Select(x => x.EventArgs);
    }
}
