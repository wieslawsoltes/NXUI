// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.ButtonSpinner"/> class property extension methods.
/// </summary>
public static partial class ButtonSpinnerExtensions
{
    // Avalonia.Controls.ButtonSpinner.AllowSpinProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ButtonSpinner.AllowSpinProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AllowSpin<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ButtonSpinner
    {
        obj[Avalonia.Controls.ButtonSpinner.AllowSpinProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ButtonSpinner.AllowSpinProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AllowSpin<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ButtonSpinner
    {
        var descriptor = Avalonia.Controls.ButtonSpinner.AllowSpinProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ButtonSpinner.AllowSpinProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AllowSpin<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ButtonSpinner
    {
        var descriptor = Avalonia.Controls.ButtonSpinner.AllowSpinProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ButtonSpinner.AllowSpinProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ButtonSpinner.AllowSpinProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAllowSpin(
        this Avalonia.Controls.ButtonSpinner obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ButtonSpinner.AllowSpinProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ButtonSpinner.AllowSpinProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveAllowSpin(this Avalonia.Controls.ButtonSpinner obj)
    {
        return obj.GetObservable(Avalonia.Controls.ButtonSpinner.AllowSpinProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ButtonSpinner.AllowSpinProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAllowSpin<T>(this T obj, Action<Avalonia.Controls.ButtonSpinner, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ButtonSpinner
    {
        var observable = obj.GetObservable(Avalonia.Controls.ButtonSpinner.AllowSpinProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ButtonSpinner.AllowSpinProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingAllowSpin(this Avalonia.Controls.ButtonSpinner obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ButtonSpinner.AllowSpinProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ButtonSpinner.AllowSpinProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingAllowSpin<T>(this T obj, Action<Avalonia.Controls.ButtonSpinner, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.ButtonSpinner
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ButtonSpinner.AllowSpinProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ButtonSpinner.AllowSpinProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAllowSpinChanged(this Avalonia.Controls.ButtonSpinner obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ButtonSpinner.AllowSpinProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ButtonSpinner.AllowSpinProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAllowSpinChanged<T>(this T obj, Action<Avalonia.Controls.ButtonSpinner, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ButtonSpinner
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ButtonSpinner.AllowSpinProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ShowButtonSpinner<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ButtonSpinner
    {
        obj[Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ShowButtonSpinner<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ButtonSpinner
    {
        var descriptor = Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ShowButtonSpinner<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ButtonSpinner
    {
        var descriptor = Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindShowButtonSpinner(
        this Avalonia.Controls.ButtonSpinner obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveShowButtonSpinner(this Avalonia.Controls.ButtonSpinner obj)
    {
        return obj.GetObservable(Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnShowButtonSpinner<T>(this T obj, Action<Avalonia.Controls.ButtonSpinner, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ButtonSpinner
    {
        var observable = obj.GetObservable(Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingShowButtonSpinner(this Avalonia.Controls.ButtonSpinner obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingShowButtonSpinner<T>(this T obj, Action<Avalonia.Controls.ButtonSpinner, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.ButtonSpinner
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveShowButtonSpinnerChanged(this Avalonia.Controls.ButtonSpinner obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnShowButtonSpinnerChanged<T>(this T obj, Action<Avalonia.Controls.ButtonSpinner, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ButtonSpinner
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ButtonSpinner.ShowButtonSpinnerProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ButtonSpinnerLocation<T>(this T obj, Avalonia.Controls.Location value) where T : Avalonia.Controls.ButtonSpinner
    {
        obj[Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ButtonSpinnerLocation<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ButtonSpinner
    {
        var descriptor = Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ButtonSpinnerLocation<T>(
        this T obj,
        IObservable<Avalonia.Controls.Location> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ButtonSpinner
    {
        var descriptor = Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindButtonSpinnerLocation(
        this Avalonia.Controls.ButtonSpinner obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Location> ObserveButtonSpinnerLocation(this Avalonia.Controls.ButtonSpinner obj)
    {
        return obj.GetObservable(Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnButtonSpinnerLocation<T>(this T obj, Action<Avalonia.Controls.ButtonSpinner, IObservable<Avalonia.Controls.Location>> handler) where T : Avalonia.Controls.ButtonSpinner
    {
        var observable = obj.GetObservable(Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.Location>> ObserveBindingButtonSpinnerLocation(this Avalonia.Controls.ButtonSpinner obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingButtonSpinnerLocation<T>(this T obj, Action<Avalonia.Controls.ButtonSpinner, IObservable<BindingValue<Avalonia.Controls.Location>>> handler) where T : Avalonia.Controls.ButtonSpinner
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveButtonSpinnerLocationChanged(this Avalonia.Controls.ButtonSpinner obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnButtonSpinnerLocationChanged<T>(this T obj, Action<Avalonia.Controls.ButtonSpinner, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ButtonSpinner
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty"/> property value to <see cref="Avalonia.Controls.Location.Left"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ButtonSpinnerLocationLeft<T>(this T obj) where T : Avalonia.Controls.ButtonSpinner
    {
        obj[Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty] = Avalonia.Controls.Location.Left;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty"/> property value to <see cref="Avalonia.Controls.Location.Right"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ButtonSpinnerLocationRight<T>(this T obj) where T : Avalonia.Controls.ButtonSpinner
    {
        obj[Avalonia.Controls.ButtonSpinner.ButtonSpinnerLocationProperty] = Avalonia.Controls.Location.Right;
        return obj;
    }
}
