// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.TreeDataGrid"/> class property extension methods.
/// </summary>
public static partial class TreeDataGridExtensions
{
    // Avalonia.Controls.TreeDataGrid.AutoDragDropRowsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TreeDataGrid.AutoDragDropRowsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AutoDragDropRows<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TreeDataGrid
    {
        obj[Avalonia.Controls.TreeDataGrid.AutoDragDropRowsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeDataGrid.AutoDragDropRowsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AutoDragDropRows<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeDataGrid
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.AutoDragDropRowsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeDataGrid.AutoDragDropRowsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T AutoDragDropRows<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeDataGrid
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.AutoDragDropRowsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TreeDataGrid.AutoDragDropRowsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TreeDataGrid.AutoDragDropRowsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAutoDragDropRows(
        this Avalonia.Controls.TreeDataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.AutoDragDropRowsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TreeDataGrid.AutoDragDropRowsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveAutoDragDropRows(this Avalonia.Controls.TreeDataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.TreeDataGrid.AutoDragDropRowsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TreeDataGrid.AutoDragDropRowsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnAutoDragDropRows<T>(this T obj, Action<Avalonia.Controls.TreeDataGrid, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.TreeDataGrid.AutoDragDropRowsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TreeDataGrid.CanUserResizeColumnsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TreeDataGrid.CanUserResizeColumnsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanUserResizeColumns<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TreeDataGrid
    {
        obj[Avalonia.Controls.TreeDataGrid.CanUserResizeColumnsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeDataGrid.CanUserResizeColumnsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanUserResizeColumns<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeDataGrid
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.CanUserResizeColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeDataGrid.CanUserResizeColumnsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanUserResizeColumns<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeDataGrid
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.CanUserResizeColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TreeDataGrid.CanUserResizeColumnsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TreeDataGrid.CanUserResizeColumnsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCanUserResizeColumns(
        this Avalonia.Controls.TreeDataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.CanUserResizeColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TreeDataGrid.CanUserResizeColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveCanUserResizeColumns(this Avalonia.Controls.TreeDataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.TreeDataGrid.CanUserResizeColumnsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TreeDataGrid.CanUserResizeColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCanUserResizeColumns<T>(this T obj, Action<Avalonia.Controls.TreeDataGrid, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.TreeDataGrid.CanUserResizeColumnsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TreeDataGrid.CanUserSortColumnsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TreeDataGrid.CanUserSortColumnsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanUserSortColumns<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TreeDataGrid
    {
        obj[Avalonia.Controls.TreeDataGrid.CanUserSortColumnsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeDataGrid.CanUserSortColumnsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanUserSortColumns<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeDataGrid
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.CanUserSortColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeDataGrid.CanUserSortColumnsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanUserSortColumns<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeDataGrid
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.CanUserSortColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TreeDataGrid.CanUserSortColumnsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TreeDataGrid.CanUserSortColumnsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCanUserSortColumns(
        this Avalonia.Controls.TreeDataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.CanUserSortColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TreeDataGrid.CanUserSortColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveCanUserSortColumns(this Avalonia.Controls.TreeDataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.TreeDataGrid.CanUserSortColumnsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TreeDataGrid.CanUserSortColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCanUserSortColumns<T>(this T obj, Action<Avalonia.Controls.TreeDataGrid, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.TreeDataGrid.CanUserSortColumnsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TreeDataGrid.ColumnsProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TreeDataGrid.ColumnsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TreeDataGrid.ColumnsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindColumns(
        this Avalonia.Controls.TreeDataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.ColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TreeDataGrid.ColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Models.TreeDataGrid.IColumns> ObserveColumns(this Avalonia.Controls.TreeDataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.TreeDataGrid.ColumnsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TreeDataGrid.ColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.TreeDataGrid OnColumns(this Avalonia.Controls.TreeDataGrid obj, Action<Avalonia.Controls.TreeDataGrid, IObservable<Avalonia.Controls.Models.TreeDataGrid.IColumns>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.TreeDataGrid.ColumnsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TreeDataGrid.ElementFactoryProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TreeDataGrid.ElementFactoryProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ElementFactory<T>(this T obj, Avalonia.Controls.Primitives.TreeDataGridElementFactory value) where T : Avalonia.Controls.TreeDataGrid
    {
        obj[Avalonia.Controls.TreeDataGrid.ElementFactoryProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeDataGrid.ElementFactoryProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ElementFactory<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeDataGrid
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.ElementFactoryProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeDataGrid.ElementFactoryProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ElementFactory<T>(
        this T obj,
        IObservable<Avalonia.Controls.Primitives.TreeDataGridElementFactory> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeDataGrid
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.ElementFactoryProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TreeDataGrid.ElementFactoryProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TreeDataGrid.ElementFactoryProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindElementFactory(
        this Avalonia.Controls.TreeDataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.ElementFactoryProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TreeDataGrid.ElementFactoryProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Primitives.TreeDataGridElementFactory> ObserveElementFactory(this Avalonia.Controls.TreeDataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.TreeDataGrid.ElementFactoryProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TreeDataGrid.ElementFactoryProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnElementFactory<T>(this T obj, Action<Avalonia.Controls.TreeDataGrid, IObservable<Avalonia.Controls.Primitives.TreeDataGridElementFactory>> handler) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.TreeDataGrid.ElementFactoryProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TreeDataGrid.RowsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TreeDataGrid.RowsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Rows<T>(this T obj, Avalonia.Controls.Models.TreeDataGrid.IRows value) where T : Avalonia.Controls.TreeDataGrid
    {
        obj[Avalonia.Controls.TreeDataGrid.RowsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeDataGrid.RowsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Rows<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeDataGrid
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.RowsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeDataGrid.RowsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Rows<T>(
        this T obj,
        IObservable<Avalonia.Controls.Models.TreeDataGrid.IRows> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeDataGrid
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.RowsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TreeDataGrid.RowsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TreeDataGrid.RowsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRows(
        this Avalonia.Controls.TreeDataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.RowsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TreeDataGrid.RowsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Models.TreeDataGrid.IRows> ObserveRows(this Avalonia.Controls.TreeDataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.TreeDataGrid.RowsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TreeDataGrid.RowsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRows<T>(this T obj, Action<Avalonia.Controls.TreeDataGrid, IObservable<Avalonia.Controls.Models.TreeDataGrid.IRows>> handler) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.TreeDataGrid.RowsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TreeDataGrid.ScrollProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TreeDataGrid.ScrollProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TreeDataGrid.ScrollProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindScroll(
        this Avalonia.Controls.TreeDataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.ScrollProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TreeDataGrid.ScrollProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.Primitives.IScrollable> ObserveScroll(this Avalonia.Controls.TreeDataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.TreeDataGrid.ScrollProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TreeDataGrid.ScrollProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.TreeDataGrid OnScroll(this Avalonia.Controls.TreeDataGrid obj, Action<Avalonia.Controls.TreeDataGrid, IObservable<Avalonia.Controls.Primitives.IScrollable>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.TreeDataGrid.ScrollProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TreeDataGrid.ShowColumnHeadersProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TreeDataGrid.ShowColumnHeadersProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ShowColumnHeaders<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.TreeDataGrid
    {
        obj[Avalonia.Controls.TreeDataGrid.ShowColumnHeadersProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeDataGrid.ShowColumnHeadersProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ShowColumnHeaders<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeDataGrid
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.ShowColumnHeadersProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeDataGrid.ShowColumnHeadersProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ShowColumnHeaders<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeDataGrid
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.ShowColumnHeadersProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TreeDataGrid.ShowColumnHeadersProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TreeDataGrid.ShowColumnHeadersProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindShowColumnHeaders(
        this Avalonia.Controls.TreeDataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.ShowColumnHeadersProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TreeDataGrid.ShowColumnHeadersProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveShowColumnHeaders(this Avalonia.Controls.TreeDataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.TreeDataGrid.ShowColumnHeadersProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TreeDataGrid.ShowColumnHeadersProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnShowColumnHeaders<T>(this T obj, Action<Avalonia.Controls.TreeDataGrid, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.TreeDataGrid.ShowColumnHeadersProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TreeDataGrid.SourceProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.TreeDataGrid.SourceProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Source<T>(this T obj, Avalonia.Controls.ITreeDataGridSource value) where T : Avalonia.Controls.TreeDataGrid
    {
        obj[Avalonia.Controls.TreeDataGrid.SourceProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeDataGrid.SourceProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Source<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeDataGrid
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.SourceProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.TreeDataGrid.SourceProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Source<T>(
        this T obj,
        IObservable<Avalonia.Controls.ITreeDataGridSource> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.TreeDataGrid
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.SourceProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.TreeDataGrid.SourceProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.TreeDataGrid.SourceProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSource(
        this Avalonia.Controls.TreeDataGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.TreeDataGrid.SourceProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.TreeDataGrid.SourceProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.ITreeDataGridSource> ObserveSource(this Avalonia.Controls.TreeDataGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.TreeDataGrid.SourceProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.TreeDataGrid.SourceProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSource<T>(this T obj, Action<Avalonia.Controls.TreeDataGrid, IObservable<Avalonia.Controls.ITreeDataGridSource>> handler) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.TreeDataGrid.SourceProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.TreeDataGrid.RowDragStartedEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.TreeDataGrid.RowDragStartedEvent"/> event on an object of type <see cref="Avalonia.Controls.TreeDataGrid"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnRowDragStartedHandler<T>(
        this T obj,
        Action<T, Avalonia.Controls.TreeDataGridRowDragStartedEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.TreeDataGrid
    {
        obj.AddHandler(Avalonia.Controls.TreeDataGrid.RowDragStartedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.TreeDataGrid.RowDragStartedEvent"/> event on an object of type <see cref="Avalonia.Controls.TreeDataGrid"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnRowDragStarted<T>(
        this T obj, Action<T, IObservable<Avalonia.Controls.TreeDataGridRowDragStartedEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.TreeDataGrid.RowDragStartedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.TreeDataGrid.RowDragStartedEvent"/> event on an object of type <see cref="Avalonia.Controls.TreeDataGrid"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Controls.TreeDataGridRowDragStartedEventArgs> ObserveOnRowDragStarted(
        this Avalonia.Controls.TreeDataGrid obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.TreeDataGrid.RowDragStartedEvent, routes);
    }

    // Avalonia.Controls.TreeDataGrid.RowDragOverEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.TreeDataGrid.RowDragOverEvent"/> event on an object of type <see cref="Avalonia.Controls.TreeDataGrid"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnRowDragOverHandler<T>(
        this T obj,
        Action<T, Avalonia.Controls.TreeDataGridRowDragEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.TreeDataGrid
    {
        obj.AddHandler(Avalonia.Controls.TreeDataGrid.RowDragOverEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.TreeDataGrid.RowDragOverEvent"/> event on an object of type <see cref="Avalonia.Controls.TreeDataGrid"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnRowDragOver<T>(
        this T obj, Action<T, IObservable<Avalonia.Controls.TreeDataGridRowDragEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.TreeDataGrid.RowDragOverEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.TreeDataGrid.RowDragOverEvent"/> event on an object of type <see cref="Avalonia.Controls.TreeDataGrid"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Controls.TreeDataGridRowDragEventArgs> ObserveOnRowDragOver(
        this Avalonia.Controls.TreeDataGrid obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.TreeDataGrid.RowDragOverEvent, routes);
    }

    // Avalonia.Controls.TreeDataGrid.RowDropEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.TreeDataGrid.RowDropEvent"/> event on an object of type <see cref="Avalonia.Controls.TreeDataGrid"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnRowDropHandler<T>(
        this T obj,
        Action<T, Avalonia.Controls.TreeDataGridRowDragEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.TreeDataGrid
    {
        obj.AddHandler(Avalonia.Controls.TreeDataGrid.RowDropEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.TreeDataGrid.RowDropEvent"/> event on an object of type <see cref="Avalonia.Controls.TreeDataGrid"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnRowDrop<T>(
        this T obj, Action<T, IObservable<Avalonia.Controls.TreeDataGridRowDragEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.TreeDataGrid.RowDropEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.TreeDataGrid.RowDropEvent"/> event on an object of type <see cref="Avalonia.Controls.TreeDataGrid"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Controls.TreeDataGridRowDragEventArgs> ObserveOnRowDrop(
        this Avalonia.Controls.TreeDataGrid obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.TreeDataGrid.RowDropEvent, routes);
    }

    // Avalonia.Controls.TreeDataGrid.CellClearing

    /// <summary>
    /// Adds a handler to the `CellClearing` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCellClearingEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.TreeDataGridCellEventArgs>> handler) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.TreeDataGridCellEventArgs>, Avalonia.Controls.TreeDataGridCellEventArgs>(
                h => obj.CellClearing += h, 
                h => obj.CellClearing -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `CellClearing` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `CellClearing` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.TreeDataGridCellEventArgs> ObserveOnCellClearingEvent(this Avalonia.Controls.TreeDataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.TreeDataGridCellEventArgs>, Avalonia.Controls.TreeDataGridCellEventArgs>(
                h => obj.CellClearing += h, 
                h => obj.CellClearing -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.TreeDataGrid.CellPrepared

    /// <summary>
    /// Adds a handler to the `CellPrepared` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCellPreparedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.TreeDataGridCellEventArgs>> handler) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.TreeDataGridCellEventArgs>, Avalonia.Controls.TreeDataGridCellEventArgs>(
                h => obj.CellPrepared += h, 
                h => obj.CellPrepared -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `CellPrepared` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `CellPrepared` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.TreeDataGridCellEventArgs> ObserveOnCellPreparedEvent(this Avalonia.Controls.TreeDataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.TreeDataGridCellEventArgs>, Avalonia.Controls.TreeDataGridCellEventArgs>(
                h => obj.CellPrepared += h, 
                h => obj.CellPrepared -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.TreeDataGrid.CellValueChanged

    /// <summary>
    /// Adds a handler to the `CellValueChanged` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCellValueChangedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.TreeDataGridCellEventArgs>> handler) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.TreeDataGridCellEventArgs>, Avalonia.Controls.TreeDataGridCellEventArgs>(
                h => obj.CellValueChanged += h, 
                h => obj.CellValueChanged -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `CellValueChanged` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `CellValueChanged` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.TreeDataGridCellEventArgs> ObserveOnCellValueChangedEvent(this Avalonia.Controls.TreeDataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.TreeDataGridCellEventArgs>, Avalonia.Controls.TreeDataGridCellEventArgs>(
                h => obj.CellValueChanged += h, 
                h => obj.CellValueChanged -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.TreeDataGrid.RowClearing

    /// <summary>
    /// Adds a handler to the `RowClearing` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowClearingEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.TreeDataGridRowEventArgs>> handler) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.TreeDataGridRowEventArgs>, Avalonia.Controls.TreeDataGridRowEventArgs>(
                h => obj.RowClearing += h, 
                h => obj.RowClearing -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `RowClearing` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `RowClearing` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.TreeDataGridRowEventArgs> ObserveOnRowClearingEvent(this Avalonia.Controls.TreeDataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.TreeDataGridRowEventArgs>, Avalonia.Controls.TreeDataGridRowEventArgs>(
                h => obj.RowClearing += h, 
                h => obj.RowClearing -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.TreeDataGrid.RowPrepared

    /// <summary>
    /// Adds a handler to the `RowPrepared` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowPreparedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.TreeDataGridRowEventArgs>> handler) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.TreeDataGridRowEventArgs>, Avalonia.Controls.TreeDataGridRowEventArgs>(
                h => obj.RowPrepared += h, 
                h => obj.RowPrepared -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `RowPrepared` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `RowPrepared` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.TreeDataGridRowEventArgs> ObserveOnRowPreparedEvent(this Avalonia.Controls.TreeDataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.TreeDataGridRowEventArgs>, Avalonia.Controls.TreeDataGridRowEventArgs>(
                h => obj.RowPrepared += h, 
                h => obj.RowPrepared -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.TreeDataGrid.RowDragStarted

    /// <summary>
    /// Adds a handler to the `RowDragStarted` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowDragStartedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.TreeDataGridRowDragStartedEventArgs>> handler) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.TreeDataGridRowDragStartedEventArgs>, Avalonia.Controls.TreeDataGridRowDragStartedEventArgs>(
                h => obj.RowDragStarted += h, 
                h => obj.RowDragStarted -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `RowDragStarted` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `RowDragStarted` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.TreeDataGridRowDragStartedEventArgs> ObserveOnRowDragStartedEvent(this Avalonia.Controls.TreeDataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.TreeDataGridRowDragStartedEventArgs>, Avalonia.Controls.TreeDataGridRowDragStartedEventArgs>(
                h => obj.RowDragStarted += h, 
                h => obj.RowDragStarted -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.TreeDataGrid.RowDragOver

    /// <summary>
    /// Adds a handler to the `RowDragOver` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowDragOverEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.TreeDataGridRowDragEventArgs>> handler) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.TreeDataGridRowDragEventArgs>, Avalonia.Controls.TreeDataGridRowDragEventArgs>(
                h => obj.RowDragOver += h, 
                h => obj.RowDragOver -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `RowDragOver` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `RowDragOver` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.TreeDataGridRowDragEventArgs> ObserveOnRowDragOverEvent(this Avalonia.Controls.TreeDataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.TreeDataGridRowDragEventArgs>, Avalonia.Controls.TreeDataGridRowDragEventArgs>(
                h => obj.RowDragOver += h, 
                h => obj.RowDragOver -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.TreeDataGrid.RowDrop

    /// <summary>
    /// Adds a handler to the `RowDrop` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowDropEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.TreeDataGridRowDragEventArgs>> handler) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.TreeDataGridRowDragEventArgs>, Avalonia.Controls.TreeDataGridRowDragEventArgs>(
                h => obj.RowDrop += h, 
                h => obj.RowDrop -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `RowDrop` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `RowDrop` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.TreeDataGridRowDragEventArgs> ObserveOnRowDropEvent(this Avalonia.Controls.TreeDataGrid obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Controls.TreeDataGridRowDragEventArgs>, Avalonia.Controls.TreeDataGridRowDragEventArgs>(
                h => obj.RowDrop += h, 
                h => obj.RowDrop -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.TreeDataGrid.SelectionChanging

    /// <summary>
    /// Adds a handler to the `SelectionChanging` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectionChangingEvent<T>(this T obj, Action<T, IObservable<System.ComponentModel.CancelEventArgs>> handler) where T : Avalonia.Controls.TreeDataGrid
    {
        var observable = Observable
            .FromEventPattern<System.ComponentModel.CancelEventHandler, System.ComponentModel.CancelEventArgs>(
                h => obj.SelectionChanging += h, 
                h => obj.SelectionChanging -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `SelectionChanging` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `SelectionChanging` event on the specified object.</returns>
    public static IObservable<System.ComponentModel.CancelEventArgs> ObserveOnSelectionChangingEvent(this Avalonia.Controls.TreeDataGrid obj)
    {
        return Observable
            .FromEventPattern<System.ComponentModel.CancelEventHandler, System.ComponentModel.CancelEventArgs>(
                h => obj.SelectionChanging += h, 
                h => obj.SelectionChanging -= h)
            .Select(x => x.EventArgs);
    }
}
