// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Layout.Layoutable"/> class property extension methods.
/// </summary>
public static partial class LayoutableExtensions
{
    // Avalonia.Layout.Layoutable.DesiredSizeProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.Layoutable.DesiredSizeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.Layoutable.DesiredSizeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDesiredSize(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.Layoutable.DesiredSizeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.Layoutable.DesiredSizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Size> ObserveDesiredSize(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Layout.Layoutable.DesiredSizeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.Layoutable.DesiredSizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Layout.Layoutable OnDesiredSize(this Avalonia.Layout.Layoutable obj, Action<Avalonia.Layout.Layoutable, IObservable<Avalonia.Size>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Layout.Layoutable.DesiredSizeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.Layoutable.DesiredSizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Size>> ObserveBindingDesiredSize(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.Layoutable.DesiredSizeProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.Layoutable.DesiredSizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Layout.Layoutable OnBindingDesiredSize(this Avalonia.Layout.Layoutable obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<Avalonia.Size>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.Layoutable.DesiredSizeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.Layoutable.DesiredSizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDesiredSizeChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.DesiredSizeProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.Layoutable.DesiredSizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Layout.Layoutable OnDesiredSizeChanged(this Avalonia.Layout.Layoutable obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.DesiredSizeProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Layout.Layoutable.WidthProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.WidthProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Width<T>(this T obj, System.Double value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.WidthProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.WidthProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Width<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.WidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.WidthProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Width<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.WidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.Layoutable.WidthProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.Layoutable.WidthProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindWidth(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.Layoutable.WidthProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.Layoutable.WidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveWidth(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Layout.Layoutable.WidthProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.Layoutable.WidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnWidth<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Double>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Layout.Layoutable.WidthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.Layoutable.WidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingWidth(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.Layoutable.WidthProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.Layoutable.WidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingWidth<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.Layoutable.WidthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.Layoutable.WidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveWidthChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.WidthProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.Layoutable.WidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnWidthChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.WidthProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Layout.Layoutable.HeightProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.HeightProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Height<T>(this T obj, System.Double value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.HeightProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.HeightProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Height<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.HeightProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.HeightProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Height<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.HeightProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.Layoutable.HeightProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.Layoutable.HeightProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHeight(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.Layoutable.HeightProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.Layoutable.HeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveHeight(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Layout.Layoutable.HeightProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.Layoutable.HeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHeight<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Double>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Layout.Layoutable.HeightProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.Layoutable.HeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingHeight(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.Layoutable.HeightProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.Layoutable.HeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingHeight<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.Layoutable.HeightProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.Layoutable.HeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveHeightChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.HeightProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.Layoutable.HeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHeightChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.HeightProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Layout.Layoutable.MinWidthProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.MinWidthProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinWidth<T>(this T obj, System.Double value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.MinWidthProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.MinWidthProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinWidth<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.MinWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.MinWidthProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinWidth<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.MinWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.Layoutable.MinWidthProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.Layoutable.MinWidthProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinWidth(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.Layoutable.MinWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.Layoutable.MinWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveMinWidth(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Layout.Layoutable.MinWidthProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.Layoutable.MinWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinWidth<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Double>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Layout.Layoutable.MinWidthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.Layoutable.MinWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingMinWidth(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.Layoutable.MinWidthProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.Layoutable.MinWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMinWidth<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.Layoutable.MinWidthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.Layoutable.MinWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMinWidthChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.MinWidthProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.Layoutable.MinWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinWidthChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.MinWidthProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Layout.Layoutable.MaxWidthProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.MaxWidthProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxWidth<T>(this T obj, System.Double value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.MaxWidthProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.MaxWidthProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxWidth<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.MaxWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.MaxWidthProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxWidth<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.MaxWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.Layoutable.MaxWidthProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.Layoutable.MaxWidthProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMaxWidth(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.Layoutable.MaxWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.Layoutable.MaxWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveMaxWidth(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Layout.Layoutable.MaxWidthProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.Layoutable.MaxWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxWidth<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Double>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Layout.Layoutable.MaxWidthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.Layoutable.MaxWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingMaxWidth(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.Layoutable.MaxWidthProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.Layoutable.MaxWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMaxWidth<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.Layoutable.MaxWidthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.Layoutable.MaxWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMaxWidthChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.MaxWidthProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.Layoutable.MaxWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxWidthChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.MaxWidthProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Layout.Layoutable.MinHeightProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.MinHeightProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinHeight<T>(this T obj, System.Double value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.MinHeightProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.MinHeightProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinHeight<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.MinHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.MinHeightProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinHeight<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.MinHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.Layoutable.MinHeightProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.Layoutable.MinHeightProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinHeight(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.Layoutable.MinHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.Layoutable.MinHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveMinHeight(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Layout.Layoutable.MinHeightProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.Layoutable.MinHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinHeight<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Double>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Layout.Layoutable.MinHeightProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.Layoutable.MinHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingMinHeight(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.Layoutable.MinHeightProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.Layoutable.MinHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMinHeight<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.Layoutable.MinHeightProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.Layoutable.MinHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMinHeightChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.MinHeightProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.Layoutable.MinHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinHeightChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.MinHeightProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Layout.Layoutable.MaxHeightProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.MaxHeightProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxHeight<T>(this T obj, System.Double value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.MaxHeightProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.MaxHeightProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxHeight<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.MaxHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.MaxHeightProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxHeight<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.MaxHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.Layoutable.MaxHeightProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.Layoutable.MaxHeightProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMaxHeight(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.Layoutable.MaxHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.Layoutable.MaxHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveMaxHeight(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Layout.Layoutable.MaxHeightProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.Layoutable.MaxHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxHeight<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Double>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Layout.Layoutable.MaxHeightProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.Layoutable.MaxHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingMaxHeight(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.Layoutable.MaxHeightProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.Layoutable.MaxHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMaxHeight<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.Layoutable.MaxHeightProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.Layoutable.MaxHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMaxHeightChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.MaxHeightProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.Layoutable.MaxHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxHeightChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.MaxHeightProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Layout.Layoutable.MarginProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.MarginProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Margin<T>(this T obj, Avalonia.Thickness value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.MarginProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.MarginProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Margin<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.MarginProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.MarginProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Margin<T>(
        this T obj,
        IObservable<Avalonia.Thickness> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.MarginProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.Layoutable.MarginProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.Layoutable.MarginProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMargin(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.Layoutable.MarginProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.Layoutable.MarginProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Thickness> ObserveMargin(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Layout.Layoutable.MarginProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.Layoutable.MarginProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMargin<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<Avalonia.Thickness>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Layout.Layoutable.MarginProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.Layoutable.MarginProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Thickness>> ObserveBindingMargin(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.Layoutable.MarginProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.Layoutable.MarginProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMargin<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<Avalonia.Thickness>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.Layoutable.MarginProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.Layoutable.MarginProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMarginChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.MarginProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.Layoutable.MarginProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMarginChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.MarginProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Layout.Layoutable.HorizontalAlignmentProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.HorizontalAlignmentProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalAlignment<T>(this T obj, Avalonia.Layout.HorizontalAlignment value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.HorizontalAlignmentProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.HorizontalAlignmentProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalAlignment<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.HorizontalAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.HorizontalAlignmentProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalAlignment<T>(
        this T obj,
        IObservable<Avalonia.Layout.HorizontalAlignment> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.HorizontalAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.Layoutable.HorizontalAlignmentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.Layoutable.HorizontalAlignmentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHorizontalAlignment(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.Layoutable.HorizontalAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.Layoutable.HorizontalAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Layout.HorizontalAlignment> ObserveHorizontalAlignment(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Layout.Layoutable.HorizontalAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.Layoutable.HorizontalAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHorizontalAlignment<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<Avalonia.Layout.HorizontalAlignment>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Layout.Layoutable.HorizontalAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.Layoutable.HorizontalAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Layout.HorizontalAlignment>> ObserveBindingHorizontalAlignment(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.Layoutable.HorizontalAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.Layoutable.HorizontalAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingHorizontalAlignment<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<Avalonia.Layout.HorizontalAlignment>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.Layoutable.HorizontalAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.Layoutable.HorizontalAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveHorizontalAlignmentChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.HorizontalAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.Layoutable.HorizontalAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHorizontalAlignmentChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.HorizontalAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.HorizontalAlignmentProperty"/> property value to <see cref="Avalonia.Layout.HorizontalAlignment.Stretch"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalAlignmentStretch<T>(this T obj) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.HorizontalAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Stretch;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.HorizontalAlignmentProperty"/> property value to <see cref="Avalonia.Layout.HorizontalAlignment.Left"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalAlignmentLeft<T>(this T obj) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.HorizontalAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Left;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.HorizontalAlignmentProperty"/> property value to <see cref="Avalonia.Layout.HorizontalAlignment.Center"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalAlignmentCenter<T>(this T obj) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.HorizontalAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Center;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.HorizontalAlignmentProperty"/> property value to <see cref="Avalonia.Layout.HorizontalAlignment.Right"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalAlignmentRight<T>(this T obj) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.HorizontalAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Right;
        return obj;
    }

    // Avalonia.Layout.Layoutable.VerticalAlignmentProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.VerticalAlignmentProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalAlignment<T>(this T obj, Avalonia.Layout.VerticalAlignment value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.VerticalAlignmentProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.VerticalAlignmentProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalAlignment<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.VerticalAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.VerticalAlignmentProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalAlignment<T>(
        this T obj,
        IObservable<Avalonia.Layout.VerticalAlignment> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.VerticalAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.Layoutable.VerticalAlignmentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.Layoutable.VerticalAlignmentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindVerticalAlignment(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.Layoutable.VerticalAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.Layoutable.VerticalAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Layout.VerticalAlignment> ObserveVerticalAlignment(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Layout.Layoutable.VerticalAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.Layoutable.VerticalAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnVerticalAlignment<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<Avalonia.Layout.VerticalAlignment>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Layout.Layoutable.VerticalAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.Layoutable.VerticalAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Layout.VerticalAlignment>> ObserveBindingVerticalAlignment(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.Layoutable.VerticalAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.Layoutable.VerticalAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingVerticalAlignment<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<Avalonia.Layout.VerticalAlignment>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.Layoutable.VerticalAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.Layoutable.VerticalAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveVerticalAlignmentChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.VerticalAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.Layoutable.VerticalAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnVerticalAlignmentChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.VerticalAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.VerticalAlignmentProperty"/> property value to <see cref="Avalonia.Layout.VerticalAlignment.Stretch"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalAlignmentStretch<T>(this T obj) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.VerticalAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Stretch;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.VerticalAlignmentProperty"/> property value to <see cref="Avalonia.Layout.VerticalAlignment.Top"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalAlignmentTop<T>(this T obj) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.VerticalAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Top;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.VerticalAlignmentProperty"/> property value to <see cref="Avalonia.Layout.VerticalAlignment.Center"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalAlignmentCenter<T>(this T obj) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.VerticalAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Center;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.VerticalAlignmentProperty"/> property value to <see cref="Avalonia.Layout.VerticalAlignment.Bottom"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalAlignmentBottom<T>(this T obj) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.VerticalAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Bottom;
        return obj;
    }

    // Avalonia.Layout.Layoutable.UseLayoutRoundingProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.Layoutable.UseLayoutRoundingProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T UseLayoutRounding<T>(this T obj, System.Boolean value) where T : Avalonia.Layout.Layoutable
    {
        obj[Avalonia.Layout.Layoutable.UseLayoutRoundingProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.UseLayoutRoundingProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T UseLayoutRounding<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.UseLayoutRoundingProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.Layoutable.UseLayoutRoundingProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T UseLayoutRounding<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.Layoutable
    {
        var descriptor = Avalonia.Layout.Layoutable.UseLayoutRoundingProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.Layoutable.UseLayoutRoundingProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.Layoutable.UseLayoutRoundingProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindUseLayoutRounding(
        this Avalonia.Layout.Layoutable obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.Layoutable.UseLayoutRoundingProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.Layoutable.UseLayoutRoundingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveUseLayoutRounding(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetObservable(Avalonia.Layout.Layoutable.UseLayoutRoundingProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.Layoutable.UseLayoutRoundingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnUseLayoutRounding<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<System.Boolean>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetObservable(Avalonia.Layout.Layoutable.UseLayoutRoundingProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.Layoutable.UseLayoutRoundingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingUseLayoutRounding(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.Layoutable.UseLayoutRoundingProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.Layoutable.UseLayoutRoundingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingUseLayoutRounding<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.Layoutable.UseLayoutRoundingProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.Layoutable.UseLayoutRoundingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveUseLayoutRoundingChanged(this Avalonia.Layout.Layoutable obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.UseLayoutRoundingProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.Layoutable.UseLayoutRoundingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnUseLayoutRoundingChanged<T>(this T obj, Action<Avalonia.Layout.Layoutable, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.Layoutable
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.Layoutable.UseLayoutRoundingProperty);
        handler(obj, observable);
        return obj;
    }
}
