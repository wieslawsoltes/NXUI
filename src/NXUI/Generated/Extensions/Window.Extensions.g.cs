// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.Window"/> class property extension methods.
/// </summary>
public static partial class WindowExtensions
{
    // Avalonia.Controls.Window.SizeToContentProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.SizeToContentProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SizeToContent<T>(this T obj, Avalonia.Controls.SizeToContent value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SizeToContentProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.SizeToContentProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SizeToContent<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.SizeToContentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.SizeToContentProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SizeToContent<T>(
        this T obj,
        IObservable<Avalonia.Controls.SizeToContent> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.SizeToContentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Window.SizeToContentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Window.SizeToContentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSizeToContent(
        this Avalonia.Controls.Window obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Window.SizeToContentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Window.SizeToContentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.SizeToContent> ObserveSizeToContent(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.SizeToContentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Window.SizeToContentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSizeToContent<T>(this T obj, Action<Avalonia.Controls.Window, IObservable<Avalonia.Controls.SizeToContent>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.SizeToContentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.SizeToContentProperty"/> property value to <see cref="Avalonia.Controls.SizeToContent.Manual"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SizeToContentManual<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SizeToContentProperty] = Avalonia.Controls.SizeToContent.Manual;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.SizeToContentProperty"/> property value to <see cref="Avalonia.Controls.SizeToContent.Width"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SizeToContentWidth<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SizeToContentProperty] = Avalonia.Controls.SizeToContent.Width;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.SizeToContentProperty"/> property value to <see cref="Avalonia.Controls.SizeToContent.Height"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SizeToContentHeight<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SizeToContentProperty] = Avalonia.Controls.SizeToContent.Height;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.SizeToContentProperty"/> property value to <see cref="Avalonia.Controls.SizeToContent.WidthAndHeight"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SizeToContentWidthAndHeight<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SizeToContentProperty] = Avalonia.Controls.SizeToContent.WidthAndHeight;
        return obj;
    }

    // Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ExtendClientAreaToDecorationsHint<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ExtendClientAreaToDecorationsHint<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ExtendClientAreaToDecorationsHint<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindExtendClientAreaToDecorationsHint(
        this Avalonia.Controls.Window obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveExtendClientAreaToDecorationsHint(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnExtendClientAreaToDecorationsHint<T>(this T obj, Action<Avalonia.Controls.Window, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.ExtendClientAreaToDecorationsHintProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ExtendClientAreaChromeHints<T>(this T obj, Avalonia.Platform.ExtendClientAreaChromeHints value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ExtendClientAreaChromeHints<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ExtendClientAreaChromeHints<T>(
        this T obj,
        IObservable<Avalonia.Platform.ExtendClientAreaChromeHints> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindExtendClientAreaChromeHints(
        this Avalonia.Controls.Window obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Platform.ExtendClientAreaChromeHints> ObserveExtendClientAreaChromeHints(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnExtendClientAreaChromeHints<T>(this T obj, Action<Avalonia.Controls.Window, IObservable<Avalonia.Platform.ExtendClientAreaChromeHints>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty"/> property value to <see cref="Avalonia.Platform.ExtendClientAreaChromeHints.NoChrome"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ExtendClientAreaChromeHintsNoChrome<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty] = Avalonia.Platform.ExtendClientAreaChromeHints.NoChrome;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty"/> property value to <see cref="Avalonia.Platform.ExtendClientAreaChromeHints.SystemChrome"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ExtendClientAreaChromeHintsSystemChrome<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty] = Avalonia.Platform.ExtendClientAreaChromeHints.SystemChrome;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty"/> property value to <see cref="Avalonia.Platform.ExtendClientAreaChromeHints.Default"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ExtendClientAreaChromeHintsDefault<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty] = Avalonia.Platform.ExtendClientAreaChromeHints.Default;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty"/> property value to <see cref="Avalonia.Platform.ExtendClientAreaChromeHints.PreferSystemChrome"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ExtendClientAreaChromeHintsPreferSystemChrome<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty] = Avalonia.Platform.ExtendClientAreaChromeHints.PreferSystemChrome;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty"/> property value to <see cref="Avalonia.Platform.ExtendClientAreaChromeHints.OSXThickTitleBar"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ExtendClientAreaChromeHintsOSXThickTitleBar<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaChromeHintsProperty] = Avalonia.Platform.ExtendClientAreaChromeHints.OSXThickTitleBar;
        return obj;
    }

    // Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ExtendClientAreaTitleBarHeightHint<T>(this T obj, System.Double value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ExtendClientAreaTitleBarHeightHint<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ExtendClientAreaTitleBarHeightHint<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindExtendClientAreaTitleBarHeightHint(
        this Avalonia.Controls.Window obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveExtendClientAreaTitleBarHeightHint(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnExtendClientAreaTitleBarHeightHint<T>(this T obj, Action<Avalonia.Controls.Window, IObservable<System.Double>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.ExtendClientAreaTitleBarHeightHintProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsExtendedIntoWindowDecorations(
        this Avalonia.Controls.Window obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsExtendedIntoWindowDecorations(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Window OnIsExtendedIntoWindowDecorations(this Avalonia.Controls.Window obj, Action<Avalonia.Controls.Window, IObservable<System.Boolean>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.IsExtendedIntoWindowDecorationsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Window.WindowDecorationMarginProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Window.WindowDecorationMarginProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Window.WindowDecorationMarginProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindWindowDecorationMargin(
        this Avalonia.Controls.Window obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Window.WindowDecorationMarginProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Window.WindowDecorationMarginProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Thickness> ObserveWindowDecorationMargin(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.WindowDecorationMarginProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Window.WindowDecorationMarginProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Window OnWindowDecorationMargin(this Avalonia.Controls.Window obj, Action<Avalonia.Controls.Window, IObservable<Avalonia.Thickness>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.WindowDecorationMarginProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Window.OffScreenMarginProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Window.OffScreenMarginProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Window.OffScreenMarginProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindOffScreenMargin(
        this Avalonia.Controls.Window obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Window.OffScreenMarginProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Window.OffScreenMarginProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Thickness> ObserveOffScreenMargin(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.OffScreenMarginProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Window.OffScreenMarginProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Window OnOffScreenMargin(this Avalonia.Controls.Window obj, Action<Avalonia.Controls.Window, IObservable<Avalonia.Thickness>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.OffScreenMarginProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Window.SystemDecorationsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.SystemDecorationsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SystemDecorations<T>(this T obj, Avalonia.Controls.SystemDecorations value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SystemDecorationsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.SystemDecorationsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SystemDecorations<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.SystemDecorationsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.SystemDecorationsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SystemDecorations<T>(
        this T obj,
        IObservable<Avalonia.Controls.SystemDecorations> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.SystemDecorationsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Window.SystemDecorationsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Window.SystemDecorationsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSystemDecorations(
        this Avalonia.Controls.Window obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Window.SystemDecorationsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Window.SystemDecorationsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.SystemDecorations> ObserveSystemDecorations(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.SystemDecorationsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Window.SystemDecorationsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSystemDecorations<T>(this T obj, Action<Avalonia.Controls.Window, IObservable<Avalonia.Controls.SystemDecorations>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.SystemDecorationsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.SystemDecorationsProperty"/> property value to <see cref="Avalonia.Controls.SystemDecorations.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SystemDecorationsNone<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SystemDecorationsProperty] = Avalonia.Controls.SystemDecorations.None;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.SystemDecorationsProperty"/> property value to <see cref="Avalonia.Controls.SystemDecorations.BorderOnly"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SystemDecorationsBorderOnly<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SystemDecorationsProperty] = Avalonia.Controls.SystemDecorations.BorderOnly;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.SystemDecorationsProperty"/> property value to <see cref="Avalonia.Controls.SystemDecorations.Full"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SystemDecorationsFull<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.SystemDecorationsProperty] = Avalonia.Controls.SystemDecorations.Full;
        return obj;
    }

    // Avalonia.Controls.Window.ShowActivatedProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.ShowActivatedProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ShowActivated<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ShowActivatedProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.ShowActivatedProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ShowActivated<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.ShowActivatedProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.ShowActivatedProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ShowActivated<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.ShowActivatedProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Window.ShowActivatedProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Window.ShowActivatedProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindShowActivated(
        this Avalonia.Controls.Window obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Window.ShowActivatedProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Window.ShowActivatedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveShowActivated(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.ShowActivatedProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Window.ShowActivatedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnShowActivated<T>(this T obj, Action<Avalonia.Controls.Window, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.ShowActivatedProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Window.ShowInTaskbarProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.ShowInTaskbarProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ShowInTaskbar<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ShowInTaskbarProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.ShowInTaskbarProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ShowInTaskbar<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.ShowInTaskbarProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.ShowInTaskbarProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ShowInTaskbar<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.ShowInTaskbarProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Window.ShowInTaskbarProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Window.ShowInTaskbarProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindShowInTaskbar(
        this Avalonia.Controls.Window obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Window.ShowInTaskbarProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Window.ShowInTaskbarProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveShowInTaskbar(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.ShowInTaskbarProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Window.ShowInTaskbarProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnShowInTaskbar<T>(this T obj, Action<Avalonia.Controls.Window, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.ShowInTaskbarProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Window.ClosingBehaviorProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.ClosingBehaviorProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ClosingBehavior<T>(this T obj, Avalonia.Controls.WindowClosingBehavior value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ClosingBehaviorProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.ClosingBehaviorProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ClosingBehavior<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.ClosingBehaviorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.ClosingBehaviorProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ClosingBehavior<T>(
        this T obj,
        IObservable<Avalonia.Controls.WindowClosingBehavior> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.ClosingBehaviorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Window.ClosingBehaviorProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Window.ClosingBehaviorProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindClosingBehavior(
        this Avalonia.Controls.Window obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Window.ClosingBehaviorProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Window.ClosingBehaviorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.WindowClosingBehavior> ObserveClosingBehavior(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.ClosingBehaviorProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Window.ClosingBehaviorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnClosingBehavior<T>(this T obj, Action<Avalonia.Controls.Window, IObservable<Avalonia.Controls.WindowClosingBehavior>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.ClosingBehaviorProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.ClosingBehaviorProperty"/> property value to <see cref="Avalonia.Controls.WindowClosingBehavior.OwnerAndChildWindows"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ClosingBehaviorOwnerAndChildWindows<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ClosingBehaviorProperty] = Avalonia.Controls.WindowClosingBehavior.OwnerAndChildWindows;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.ClosingBehaviorProperty"/> property value to <see cref="Avalonia.Controls.WindowClosingBehavior.OwnerWindowOnly"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ClosingBehaviorOwnerWindowOnly<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.ClosingBehaviorProperty] = Avalonia.Controls.WindowClosingBehavior.OwnerWindowOnly;
        return obj;
    }

    // Avalonia.Controls.Window.WindowStateProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.WindowStateProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T WindowState<T>(this T obj, Avalonia.Controls.WindowState value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStateProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.WindowStateProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T WindowState<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.WindowStateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.WindowStateProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T WindowState<T>(
        this T obj,
        IObservable<Avalonia.Controls.WindowState> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.WindowStateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Window.WindowStateProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Window.WindowStateProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindWindowState(
        this Avalonia.Controls.Window obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Window.WindowStateProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Window.WindowStateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.WindowState> ObserveWindowState(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.WindowStateProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Window.WindowStateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnWindowState<T>(this T obj, Action<Avalonia.Controls.Window, IObservable<Avalonia.Controls.WindowState>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.WindowStateProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.WindowStateProperty"/> property value to <see cref="Avalonia.Controls.WindowState.Normal"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T WindowStateNormal<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStateProperty] = Avalonia.Controls.WindowState.Normal;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.WindowStateProperty"/> property value to <see cref="Avalonia.Controls.WindowState.Minimized"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T WindowStateMinimized<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStateProperty] = Avalonia.Controls.WindowState.Minimized;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.WindowStateProperty"/> property value to <see cref="Avalonia.Controls.WindowState.Maximized"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T WindowStateMaximized<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStateProperty] = Avalonia.Controls.WindowState.Maximized;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.WindowStateProperty"/> property value to <see cref="Avalonia.Controls.WindowState.FullScreen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T WindowStateFullScreen<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStateProperty] = Avalonia.Controls.WindowState.FullScreen;
        return obj;
    }

    // Avalonia.Controls.Window.TitleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.TitleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Title<T>(this T obj, System.String value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.TitleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.TitleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Title<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.TitleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.TitleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Title<T>(
        this T obj,
        IObservable<System.String> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.TitleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Window.TitleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Window.TitleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindTitle(
        this Avalonia.Controls.Window obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Window.TitleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Window.TitleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.String> ObserveTitle(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.TitleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Window.TitleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnTitle<T>(this T obj, Action<Avalonia.Controls.Window, IObservable<System.String>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.TitleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Window.IconProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.IconProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Icon<T>(this T obj, Avalonia.Controls.WindowIcon value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.IconProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.IconProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Icon<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.IconProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.IconProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Icon<T>(
        this T obj,
        IObservable<Avalonia.Controls.WindowIcon> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.IconProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Window.IconProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Window.IconProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIcon(
        this Avalonia.Controls.Window obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Window.IconProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Window.IconProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.WindowIcon> ObserveIcon(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.IconProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Window.IconProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIcon<T>(this T obj, Action<Avalonia.Controls.Window, IObservable<Avalonia.Controls.WindowIcon>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.IconProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Window.WindowStartupLocationProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.WindowStartupLocationProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T WindowStartupLocation<T>(this T obj, Avalonia.Controls.WindowStartupLocation value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStartupLocationProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.WindowStartupLocationProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T WindowStartupLocation<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.WindowStartupLocationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.WindowStartupLocationProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T WindowStartupLocation<T>(
        this T obj,
        IObservable<Avalonia.Controls.WindowStartupLocation> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.WindowStartupLocationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Window.WindowStartupLocationProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Window.WindowStartupLocationProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindWindowStartupLocation(
        this Avalonia.Controls.Window obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Window.WindowStartupLocationProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Window.WindowStartupLocationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.WindowStartupLocation> ObserveWindowStartupLocation(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.WindowStartupLocationProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Window.WindowStartupLocationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnWindowStartupLocation<T>(this T obj, Action<Avalonia.Controls.Window, IObservable<Avalonia.Controls.WindowStartupLocation>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.WindowStartupLocationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.WindowStartupLocationProperty"/> property value to <see cref="Avalonia.Controls.WindowStartupLocation.Manual"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T WindowStartupLocationManual<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStartupLocationProperty] = Avalonia.Controls.WindowStartupLocation.Manual;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.WindowStartupLocationProperty"/> property value to <see cref="Avalonia.Controls.WindowStartupLocation.CenterScreen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T WindowStartupLocationCenterScreen<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStartupLocationProperty] = Avalonia.Controls.WindowStartupLocation.CenterScreen;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.WindowStartupLocationProperty"/> property value to <see cref="Avalonia.Controls.WindowStartupLocation.CenterOwner"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T WindowStartupLocationCenterOwner<T>(this T obj) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.WindowStartupLocationProperty] = Avalonia.Controls.WindowStartupLocation.CenterOwner;
        return obj;
    }

    // Avalonia.Controls.Window.CanResizeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Window.CanResizeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanResize<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.Window
    {
        obj[Avalonia.Controls.Window.CanResizeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.CanResizeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanResize<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.CanResizeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Window.CanResizeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CanResize<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Window
    {
        var descriptor = Avalonia.Controls.Window.CanResizeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Window.CanResizeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Window.CanResizeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCanResize(
        this Avalonia.Controls.Window obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Window.CanResizeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Window.CanResizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveCanResize(this Avalonia.Controls.Window obj)
    {
        return obj.GetObservable(Avalonia.Controls.Window.CanResizeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Window.CanResizeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCanResize<T>(this T obj, Action<Avalonia.Controls.Window, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.CanResizeProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Window.WindowClosedEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.Window.WindowClosedEvent"/> event on an object of type <see cref="Avalonia.Controls.Window"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnWindowClosedHandler<T>(
        this T obj,
        Action<T, Avalonia.Interactivity.RoutedEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct) where T : Avalonia.Controls.Window
    {
        obj.AddHandler(Avalonia.Controls.Window.WindowClosedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.Window.WindowClosedEvent"/> event on an object of type <see cref="Avalonia.Controls.Window"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnWindowClosed<T>(
        this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.WindowClosedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.Window.WindowClosedEvent"/> event on an object of type <see cref="Avalonia.Controls.Window"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnWindowClosed(
        this Avalonia.Controls.Window obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct)
    {
        return obj.GetObservable(Avalonia.Controls.Window.WindowClosedEvent, routes);
    }

    // Avalonia.Controls.Window.WindowOpenedEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.Window.WindowOpenedEvent"/> event on an object of type <see cref="Avalonia.Controls.Window"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnWindowOpenedHandler<T>(
        this T obj,
        Action<T, Avalonia.Interactivity.RoutedEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct) where T : Avalonia.Controls.Window
    {
        obj.AddHandler(Avalonia.Controls.Window.WindowOpenedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.Window.WindowOpenedEvent"/> event on an object of type <see cref="Avalonia.Controls.Window"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnWindowOpened<T>(
        this T obj, Action<T, IObservable<Avalonia.Interactivity.RoutedEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct) where T : Avalonia.Controls.Window
    {
        var observable = obj.GetObservable(Avalonia.Controls.Window.WindowOpenedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.Window.WindowOpenedEvent"/> event on an object of type <see cref="Avalonia.Controls.Window"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Interactivity.RoutedEventArgs> ObserveOnWindowOpened(
        this Avalonia.Controls.Window obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Direct)
    {
        return obj.GetObservable(Avalonia.Controls.Window.WindowOpenedEvent, routes);
    }

    // Avalonia.Controls.Window.Closing

    /// <summary>
    /// Adds a handler to the `Closing` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnClosingEvent<T>(this T obj, Action<T, IObservable<Avalonia.Controls.WindowClosingEventArgs>> handler) where T : Avalonia.Controls.Window
    {
        var observable = Observable
            .FromEventPattern<EventHandler<Avalonia.Controls.WindowClosingEventArgs>, Avalonia.Controls.WindowClosingEventArgs>(
                h => obj.Closing += h, 
                h => obj.Closing -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `Closing` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `Closing` event on the specified object.</returns>
    public static IObservable<Avalonia.Controls.WindowClosingEventArgs> ObserveOnClosingEvent(this Avalonia.Controls.Window obj)
    {
        return Observable
            .FromEventPattern<EventHandler<Avalonia.Controls.WindowClosingEventArgs>, Avalonia.Controls.WindowClosingEventArgs>(
                h => obj.Closing += h, 
                h => obj.Closing -= h)
            .Select(x => x.EventArgs);
    }
}
