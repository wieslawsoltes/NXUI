// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.DataGridRowGroupHeader"/> class property extension methods.
/// </summary>
public static partial class DataGridRowGroupHeaderExtensions
{
    // Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsItemCountVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        obj[Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsItemCountVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var descriptor = Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsItemCountVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var descriptor = Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsItemCountVisible(
        this Avalonia.Controls.DataGridRowGroupHeader obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsItemCountVisible(this Avalonia.Controls.DataGridRowGroupHeader obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsItemCountVisible<T>(this T obj, Action<Avalonia.Controls.DataGridRowGroupHeader, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsItemCountVisible(this Avalonia.Controls.DataGridRowGroupHeader obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsItemCountVisible<T>(this T obj, Action<Avalonia.Controls.DataGridRowGroupHeader, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsItemCountVisibleChanged(this Avalonia.Controls.DataGridRowGroupHeader obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsItemCountVisibleChanged<T>(this T obj, Action<Avalonia.Controls.DataGridRowGroupHeader, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRowGroupHeader.IsItemCountVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemCountFormat<T>(this T obj, System.String value) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        obj[Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemCountFormat<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var descriptor = Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemCountFormat<T>(
        this T obj,
        IObservable<System.String> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var descriptor = Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindItemCountFormat(
        this Avalonia.Controls.DataGridRowGroupHeader obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.String> ObserveItemCountFormat(this Avalonia.Controls.DataGridRowGroupHeader obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnItemCountFormat<T>(this T obj, Action<Avalonia.Controls.DataGridRowGroupHeader, IObservable<System.String>> handler) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.String>> ObserveBindingItemCountFormat(this Avalonia.Controls.DataGridRowGroupHeader obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingItemCountFormat<T>(this T obj, Action<Avalonia.Controls.DataGridRowGroupHeader, IObservable<BindingValue<System.String>>> handler) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveItemCountFormatChanged(this Avalonia.Controls.DataGridRowGroupHeader obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnItemCountFormatChanged<T>(this T obj, Action<Avalonia.Controls.DataGridRowGroupHeader, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRowGroupHeader.ItemCountFormatProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PropertyName<T>(this T obj, System.String value) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        obj[Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PropertyName<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var descriptor = Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PropertyName<T>(
        this T obj,
        IObservable<System.String> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var descriptor = Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPropertyName(
        this Avalonia.Controls.DataGridRowGroupHeader obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.String> ObservePropertyName(this Avalonia.Controls.DataGridRowGroupHeader obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPropertyName<T>(this T obj, Action<Avalonia.Controls.DataGridRowGroupHeader, IObservable<System.String>> handler) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.String>> ObserveBindingPropertyName(this Avalonia.Controls.DataGridRowGroupHeader obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingPropertyName<T>(this T obj, Action<Avalonia.Controls.DataGridRowGroupHeader, IObservable<BindingValue<System.String>>> handler) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObservePropertyNameChanged(this Avalonia.Controls.DataGridRowGroupHeader obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPropertyNameChanged<T>(this T obj, Action<Avalonia.Controls.DataGridRowGroupHeader, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRowGroupHeader.PropertyNameProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsPropertyNameVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        obj[Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsPropertyNameVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var descriptor = Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsPropertyNameVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var descriptor = Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsPropertyNameVisible(
        this Avalonia.Controls.DataGridRowGroupHeader obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsPropertyNameVisible(this Avalonia.Controls.DataGridRowGroupHeader obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsPropertyNameVisible<T>(this T obj, Action<Avalonia.Controls.DataGridRowGroupHeader, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsPropertyNameVisible(this Avalonia.Controls.DataGridRowGroupHeader obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsPropertyNameVisible<T>(this T obj, Action<Avalonia.Controls.DataGridRowGroupHeader, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsPropertyNameVisibleChanged(this Avalonia.Controls.DataGridRowGroupHeader obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsPropertyNameVisibleChanged<T>(this T obj, Action<Avalonia.Controls.DataGridRowGroupHeader, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRowGroupHeader.IsPropertyNameVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SublevelIndent<T>(this T obj, System.Double value) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        obj[Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SublevelIndent<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var descriptor = Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SublevelIndent<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var descriptor = Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSublevelIndent(
        this Avalonia.Controls.DataGridRowGroupHeader obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveSublevelIndent(this Avalonia.Controls.DataGridRowGroupHeader obj)
    {
        return obj.GetObservable(Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSublevelIndent<T>(this T obj, Action<Avalonia.Controls.DataGridRowGroupHeader, IObservable<System.Double>> handler) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var observable = obj.GetObservable(Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingSublevelIndent(this Avalonia.Controls.DataGridRowGroupHeader obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingSublevelIndent<T>(this T obj, Action<Avalonia.Controls.DataGridRowGroupHeader, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveSublevelIndentChanged(this Avalonia.Controls.DataGridRowGroupHeader obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSublevelIndentChanged<T>(this T obj, Action<Avalonia.Controls.DataGridRowGroupHeader, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DataGridRowGroupHeader
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DataGridRowGroupHeader.SublevelIndentProperty);
        handler(obj, observable);
        return obj;
    }
}
