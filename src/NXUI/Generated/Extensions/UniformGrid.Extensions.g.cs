// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.Primitives.UniformGrid"/> class property extension methods.
/// </summary>
public static partial class UniformGridExtensions
{
    // Avalonia.Controls.Primitives.UniformGrid.RowsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.UniformGrid.RowsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Rows<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        obj[Avalonia.Controls.Primitives.UniformGrid.RowsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.UniformGrid.RowsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Rows<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var descriptor = Avalonia.Controls.Primitives.UniformGrid.RowsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.UniformGrid.RowsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Rows<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var descriptor = Avalonia.Controls.Primitives.UniformGrid.RowsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.UniformGrid.RowsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.UniformGrid.RowsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRows(
        this Avalonia.Controls.Primitives.UniformGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.UniformGrid.RowsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.UniformGrid.RowsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveRows(this Avalonia.Controls.Primitives.UniformGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.UniformGrid.RowsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.UniformGrid.RowsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRows<T>(this T obj, Action<Avalonia.Controls.Primitives.UniformGrid, IObservable<System.Int32>> handler) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.UniformGrid.RowsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.RowsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingRows(this Avalonia.Controls.Primitives.UniformGrid obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.UniformGrid.RowsProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.RowsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingRows<T>(this T obj, Action<Avalonia.Controls.Primitives.UniformGrid, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.UniformGrid.RowsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.RowsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveRowsChanged(this Avalonia.Controls.Primitives.UniformGrid obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.UniformGrid.RowsProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.RowsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowsChanged<T>(this T obj, Action<Avalonia.Controls.Primitives.UniformGrid, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.UniformGrid.RowsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Columns<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        obj[Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Columns<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var descriptor = Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Columns<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var descriptor = Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindColumns(
        this Avalonia.Controls.Primitives.UniformGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveColumns(this Avalonia.Controls.Primitives.UniformGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColumns<T>(this T obj, Action<Avalonia.Controls.Primitives.UniformGrid, IObservable<System.Int32>> handler) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingColumns(this Avalonia.Controls.Primitives.UniformGrid obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingColumns<T>(this T obj, Action<Avalonia.Controls.Primitives.UniformGrid, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveColumnsChanged(this Avalonia.Controls.Primitives.UniformGrid obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColumnsChanged<T>(this T obj, Action<Avalonia.Controls.Primitives.UniformGrid, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.UniformGrid.ColumnsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstColumn<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        obj[Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstColumn<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var descriptor = Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstColumn<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var descriptor = Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindFirstColumn(
        this Avalonia.Controls.Primitives.UniformGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveFirstColumn(this Avalonia.Controls.Primitives.UniformGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFirstColumn<T>(this T obj, Action<Avalonia.Controls.Primitives.UniformGrid, IObservable<System.Int32>> handler) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingFirstColumn(this Avalonia.Controls.Primitives.UniformGrid obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingFirstColumn<T>(this T obj, Action<Avalonia.Controls.Primitives.UniformGrid, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveFirstColumnChanged(this Avalonia.Controls.Primitives.UniformGrid obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFirstColumnChanged<T>(this T obj, Action<Avalonia.Controls.Primitives.UniformGrid, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.UniformGrid.FirstColumnProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowSpacing<T>(this T obj, System.Double value) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        obj[Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowSpacing<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var descriptor = Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RowSpacing<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var descriptor = Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRowSpacing(
        this Avalonia.Controls.Primitives.UniformGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveRowSpacing(this Avalonia.Controls.Primitives.UniformGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowSpacing<T>(this T obj, Action<Avalonia.Controls.Primitives.UniformGrid, IObservable<System.Double>> handler) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingRowSpacing(this Avalonia.Controls.Primitives.UniformGrid obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingRowSpacing<T>(this T obj, Action<Avalonia.Controls.Primitives.UniformGrid, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveRowSpacingChanged(this Avalonia.Controls.Primitives.UniformGrid obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRowSpacingChanged<T>(this T obj, Action<Avalonia.Controls.Primitives.UniformGrid, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.UniformGrid.RowSpacingProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColumnSpacing<T>(this T obj, System.Double value) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        obj[Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColumnSpacing<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var descriptor = Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColumnSpacing<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var descriptor = Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindColumnSpacing(
        this Avalonia.Controls.Primitives.UniformGrid obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveColumnSpacing(this Avalonia.Controls.Primitives.UniformGrid obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColumnSpacing<T>(this T obj, Action<Avalonia.Controls.Primitives.UniformGrid, IObservable<System.Double>> handler) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingColumnSpacing(this Avalonia.Controls.Primitives.UniformGrid obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingColumnSpacing<T>(this T obj, Action<Avalonia.Controls.Primitives.UniformGrid, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveColumnSpacingChanged(this Avalonia.Controls.Primitives.UniformGrid obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColumnSpacingChanged<T>(this T obj, Action<Avalonia.Controls.Primitives.UniformGrid, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Primitives.UniformGrid
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.UniformGrid.ColumnSpacingProperty);
        handler(obj, observable);
        return obj;
    }
}
