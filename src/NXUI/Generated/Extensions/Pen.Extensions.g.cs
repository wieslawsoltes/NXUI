// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Media.Pen"/> class property extension methods.
/// </summary>
public static partial class PenExtensions
{
    // Avalonia.Media.Pen.BrushProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Pen.BrushProperty"/> value on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen Brush(this Avalonia.Media.Pen obj, Avalonia.Media.IBrush value)
    {
        obj[Avalonia.Media.Pen.BrushProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Pen.BrushProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen Brush(
        this Avalonia.Media.Pen obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.BrushProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Pen.BrushProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen Brush(
        this Avalonia.Media.Pen obj,
        IObservable<Avalonia.Media.IBrush> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.BrushProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Pen.BrushProperty"/> binding on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Pen.BrushProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindBrush(
        this Avalonia.Media.Pen obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.BrushProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Pen.BrushProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IBrush> ObserveBrush(this Avalonia.Media.Pen obj)
    {
        return obj.GetObservable(Avalonia.Media.Pen.BrushProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.Pen.BrushProperty"/> property on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnBrush(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<Avalonia.Media.IBrush>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.Pen.BrushProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.Pen.BrushProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.IBrush>> ObserveBindingBrush(this Avalonia.Media.Pen obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.Pen.BrushProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.Pen.BrushProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnBindingBrush(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<BindingValue<Avalonia.Media.IBrush>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.Pen.BrushProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.Pen.BrushProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveBrushChanged(this Avalonia.Media.Pen obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.Pen.BrushProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.Pen.BrushProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnBrushChanged(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.Pen.BrushProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.Pen.ThicknessProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Pen.ThicknessProperty"/> value on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen Thickness(this Avalonia.Media.Pen obj, System.Double value)
    {
        obj[Avalonia.Media.Pen.ThicknessProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Pen.ThicknessProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen Thickness(
        this Avalonia.Media.Pen obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.ThicknessProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Pen.ThicknessProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen Thickness(
        this Avalonia.Media.Pen obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.ThicknessProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Pen.ThicknessProperty"/> binding on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Pen.ThicknessProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindThickness(
        this Avalonia.Media.Pen obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.ThicknessProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Pen.ThicknessProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.Double> ObserveThickness(this Avalonia.Media.Pen obj)
    {
        return obj.GetObservable(Avalonia.Media.Pen.ThicknessProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.Pen.ThicknessProperty"/> property on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnThickness(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.Pen.ThicknessProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.Pen.ThicknessProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingThickness(this Avalonia.Media.Pen obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.Pen.ThicknessProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.Pen.ThicknessProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnBindingThickness(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<BindingValue<System.Double>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.Pen.ThicknessProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.Pen.ThicknessProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveThicknessChanged(this Avalonia.Media.Pen obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.Pen.ThicknessProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.Pen.ThicknessProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnThicknessChanged(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.Pen.ThicknessProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.Pen.DashStyleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Pen.DashStyleProperty"/> value on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen DashStyle(this Avalonia.Media.Pen obj, Avalonia.Media.IDashStyle value)
    {
        obj[Avalonia.Media.Pen.DashStyleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Pen.DashStyleProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen DashStyle(
        this Avalonia.Media.Pen obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.DashStyleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Pen.DashStyleProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen DashStyle(
        this Avalonia.Media.Pen obj,
        IObservable<Avalonia.Media.IDashStyle> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.DashStyleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Pen.DashStyleProperty"/> binding on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Pen.DashStyleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDashStyle(
        this Avalonia.Media.Pen obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.DashStyleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Pen.DashStyleProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IDashStyle> ObserveDashStyle(this Avalonia.Media.Pen obj)
    {
        return obj.GetObservable(Avalonia.Media.Pen.DashStyleProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.Pen.DashStyleProperty"/> property on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnDashStyle(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<Avalonia.Media.IDashStyle>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.Pen.DashStyleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.Pen.DashStyleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.IDashStyle>> ObserveBindingDashStyle(this Avalonia.Media.Pen obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.Pen.DashStyleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.Pen.DashStyleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnBindingDashStyle(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<BindingValue<Avalonia.Media.IDashStyle>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.Pen.DashStyleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.Pen.DashStyleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDashStyleChanged(this Avalonia.Media.Pen obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.Pen.DashStyleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.Pen.DashStyleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnDashStyleChanged(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.Pen.DashStyleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.Pen.LineCapProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Pen.LineCapProperty"/> value on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen LineCap(this Avalonia.Media.Pen obj, Avalonia.Media.PenLineCap value)
    {
        obj[Avalonia.Media.Pen.LineCapProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Pen.LineCapProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen LineCap(
        this Avalonia.Media.Pen obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.LineCapProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Pen.LineCapProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen LineCap(
        this Avalonia.Media.Pen obj,
        IObservable<Avalonia.Media.PenLineCap> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.LineCapProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Pen.LineCapProperty"/> binding on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Pen.LineCapProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindLineCap(
        this Avalonia.Media.Pen obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.LineCapProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Pen.LineCapProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<Avalonia.Media.PenLineCap> ObserveLineCap(this Avalonia.Media.Pen obj)
    {
        return obj.GetObservable(Avalonia.Media.Pen.LineCapProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.Pen.LineCapProperty"/> property on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnLineCap(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<Avalonia.Media.PenLineCap>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.Pen.LineCapProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.Pen.LineCapProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.PenLineCap>> ObserveBindingLineCap(this Avalonia.Media.Pen obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.Pen.LineCapProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.Pen.LineCapProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnBindingLineCap(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<BindingValue<Avalonia.Media.PenLineCap>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.Pen.LineCapProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.Pen.LineCapProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveLineCapChanged(this Avalonia.Media.Pen obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.Pen.LineCapProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.Pen.LineCapProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnLineCapChanged(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.Pen.LineCapProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Pen.LineCapProperty"/> property value to <see cref="Avalonia.Media.PenLineCap.Flat"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen LineCapFlat(this Avalonia.Media.Pen obj)
    {
        obj[Avalonia.Media.Pen.LineCapProperty] = Avalonia.Media.PenLineCap.Flat;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Pen.LineCapProperty"/> property value to <see cref="Avalonia.Media.PenLineCap.Round"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen LineCapRound(this Avalonia.Media.Pen obj)
    {
        obj[Avalonia.Media.Pen.LineCapProperty] = Avalonia.Media.PenLineCap.Round;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Pen.LineCapProperty"/> property value to <see cref="Avalonia.Media.PenLineCap.Square"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen LineCapSquare(this Avalonia.Media.Pen obj)
    {
        obj[Avalonia.Media.Pen.LineCapProperty] = Avalonia.Media.PenLineCap.Square;
        return obj;
    }

    // Avalonia.Media.Pen.LineJoinProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Pen.LineJoinProperty"/> value on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen LineJoin(this Avalonia.Media.Pen obj, Avalonia.Media.PenLineJoin value)
    {
        obj[Avalonia.Media.Pen.LineJoinProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Pen.LineJoinProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen LineJoin(
        this Avalonia.Media.Pen obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.LineJoinProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Pen.LineJoinProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen LineJoin(
        this Avalonia.Media.Pen obj,
        IObservable<Avalonia.Media.PenLineJoin> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.LineJoinProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Pen.LineJoinProperty"/> binding on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Pen.LineJoinProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindLineJoin(
        this Avalonia.Media.Pen obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.LineJoinProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Pen.LineJoinProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<Avalonia.Media.PenLineJoin> ObserveLineJoin(this Avalonia.Media.Pen obj)
    {
        return obj.GetObservable(Avalonia.Media.Pen.LineJoinProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.Pen.LineJoinProperty"/> property on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnLineJoin(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<Avalonia.Media.PenLineJoin>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.Pen.LineJoinProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.Pen.LineJoinProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.PenLineJoin>> ObserveBindingLineJoin(this Avalonia.Media.Pen obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.Pen.LineJoinProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.Pen.LineJoinProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnBindingLineJoin(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<BindingValue<Avalonia.Media.PenLineJoin>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.Pen.LineJoinProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.Pen.LineJoinProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveLineJoinChanged(this Avalonia.Media.Pen obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.Pen.LineJoinProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.Pen.LineJoinProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnLineJoinChanged(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.Pen.LineJoinProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Pen.LineJoinProperty"/> property value to <see cref="Avalonia.Media.PenLineJoin.Bevel"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen LineJoinBevel(this Avalonia.Media.Pen obj)
    {
        obj[Avalonia.Media.Pen.LineJoinProperty] = Avalonia.Media.PenLineJoin.Bevel;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Pen.LineJoinProperty"/> property value to <see cref="Avalonia.Media.PenLineJoin.Miter"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen LineJoinMiter(this Avalonia.Media.Pen obj)
    {
        obj[Avalonia.Media.Pen.LineJoinProperty] = Avalonia.Media.PenLineJoin.Miter;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Pen.LineJoinProperty"/> property value to <see cref="Avalonia.Media.PenLineJoin.Round"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen LineJoinRound(this Avalonia.Media.Pen obj)
    {
        obj[Avalonia.Media.Pen.LineJoinProperty] = Avalonia.Media.PenLineJoin.Round;
        return obj;
    }

    // Avalonia.Media.Pen.MiterLimitProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.Pen.MiterLimitProperty"/> value on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen MiterLimit(this Avalonia.Media.Pen obj, System.Double value)
    {
        obj[Avalonia.Media.Pen.MiterLimitProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Pen.MiterLimitProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen MiterLimit(
        this Avalonia.Media.Pen obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.MiterLimitProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.Pen.MiterLimitProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.Pen MiterLimit(
        this Avalonia.Media.Pen obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.MiterLimitProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.Pen.MiterLimitProperty"/> binding on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.Pen.MiterLimitProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMiterLimit(
        this Avalonia.Media.Pen obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.Pen.MiterLimitProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.Pen.MiterLimitProperty"/> on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.Double> ObserveMiterLimit(this Avalonia.Media.Pen obj)
    {
        return obj.GetObservable(Avalonia.Media.Pen.MiterLimitProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.Pen.MiterLimitProperty"/> property on an object of type <see cref="Avalonia.Media.Pen"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnMiterLimit(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.Pen.MiterLimitProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.Pen.MiterLimitProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingMiterLimit(this Avalonia.Media.Pen obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.Pen.MiterLimitProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.Pen.MiterLimitProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnBindingMiterLimit(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<BindingValue<System.Double>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.Pen.MiterLimitProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.Pen.MiterLimitProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMiterLimitChanged(this Avalonia.Media.Pen obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.Pen.MiterLimitProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.Pen.MiterLimitProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.Pen OnMiterLimitChanged(this Avalonia.Media.Pen obj, Action<Avalonia.Media.Pen, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.Pen.MiterLimitProperty);
        handler(obj, observable);
        return obj;
    }
}
