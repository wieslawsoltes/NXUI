// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Layout.UniformGridLayout"/> class property extension methods.
/// </summary>
public static partial class UniformGridLayoutExtensions
{
    // Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsJustification<T>(this T obj, Avalonia.Layout.UniformGridLayoutItemsJustification value) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsJustification<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.UniformGridLayout
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsJustification<T>(
        this T obj,
        IObservable<Avalonia.Layout.UniformGridLayoutItemsJustification> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.UniformGridLayout
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindItemsJustification(
        this Avalonia.Layout.UniformGridLayout obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Layout.UniformGridLayoutItemsJustification> ObserveItemsJustification(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetObservable(Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnItemsJustification<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<Avalonia.Layout.UniformGridLayoutItemsJustification>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetObservable(Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Layout.UniformGridLayoutItemsJustification>> ObserveBindingItemsJustification(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingItemsJustification<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<BindingValue<Avalonia.Layout.UniformGridLayoutItemsJustification>>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveItemsJustificationChanged(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnItemsJustificationChanged<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty"/> property value to <see cref="Avalonia.Layout.UniformGridLayoutItemsJustification.Start"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsJustificationStart<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty] = Avalonia.Layout.UniformGridLayoutItemsJustification.Start;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty"/> property value to <see cref="Avalonia.Layout.UniformGridLayoutItemsJustification.Center"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsJustificationCenter<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty] = Avalonia.Layout.UniformGridLayoutItemsJustification.Center;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty"/> property value to <see cref="Avalonia.Layout.UniformGridLayoutItemsJustification.End"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsJustificationEnd<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty] = Avalonia.Layout.UniformGridLayoutItemsJustification.End;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty"/> property value to <see cref="Avalonia.Layout.UniformGridLayoutItemsJustification.SpaceAround"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsJustificationSpaceAround<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty] = Avalonia.Layout.UniformGridLayoutItemsJustification.SpaceAround;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty"/> property value to <see cref="Avalonia.Layout.UniformGridLayoutItemsJustification.SpaceBetween"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsJustificationSpaceBetween<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty] = Avalonia.Layout.UniformGridLayoutItemsJustification.SpaceBetween;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty"/> property value to <see cref="Avalonia.Layout.UniformGridLayoutItemsJustification.SpaceEvenly"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsJustificationSpaceEvenly<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsJustificationProperty] = Avalonia.Layout.UniformGridLayoutItemsJustification.SpaceEvenly;
        return obj;
    }

    // Avalonia.Layout.UniformGridLayout.ItemsStretchProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.ItemsStretchProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsStretch<T>(this T obj, Avalonia.Layout.UniformGridLayoutItemsStretch value) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsStretchProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.UniformGridLayout.ItemsStretchProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsStretch<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.UniformGridLayout
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.ItemsStretchProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.UniformGridLayout.ItemsStretchProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsStretch<T>(
        this T obj,
        IObservable<Avalonia.Layout.UniformGridLayoutItemsStretch> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.UniformGridLayout
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.ItemsStretchProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.UniformGridLayout.ItemsStretchProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.UniformGridLayout.ItemsStretchProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindItemsStretch(
        this Avalonia.Layout.UniformGridLayout obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.ItemsStretchProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.UniformGridLayout.ItemsStretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Layout.UniformGridLayoutItemsStretch> ObserveItemsStretch(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetObservable(Avalonia.Layout.UniformGridLayout.ItemsStretchProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.UniformGridLayout.ItemsStretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnItemsStretch<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<Avalonia.Layout.UniformGridLayoutItemsStretch>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetObservable(Avalonia.Layout.UniformGridLayout.ItemsStretchProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.UniformGridLayout.ItemsStretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Layout.UniformGridLayoutItemsStretch>> ObserveBindingItemsStretch(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.UniformGridLayout.ItemsStretchProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.UniformGridLayout.ItemsStretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingItemsStretch<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<BindingValue<Avalonia.Layout.UniformGridLayoutItemsStretch>>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.UniformGridLayout.ItemsStretchProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.UniformGridLayout.ItemsStretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveItemsStretchChanged(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.UniformGridLayout.ItemsStretchProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.UniformGridLayout.ItemsStretchProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnItemsStretchChanged<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.UniformGridLayout.ItemsStretchProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.ItemsStretchProperty"/> property value to <see cref="Avalonia.Layout.UniformGridLayoutItemsStretch.None"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsStretchNone<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsStretchProperty] = Avalonia.Layout.UniformGridLayoutItemsStretch.None;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.ItemsStretchProperty"/> property value to <see cref="Avalonia.Layout.UniformGridLayoutItemsStretch.Fill"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsStretchFill<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsStretchProperty] = Avalonia.Layout.UniformGridLayoutItemsStretch.Fill;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.ItemsStretchProperty"/> property value to <see cref="Avalonia.Layout.UniformGridLayoutItemsStretch.Uniform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ItemsStretchUniform<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.ItemsStretchProperty] = Avalonia.Layout.UniformGridLayoutItemsStretch.Uniform;
        return obj;
    }

    // Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinColumnSpacing<T>(this T obj, System.Double value) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinColumnSpacing<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.UniformGridLayout
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinColumnSpacing<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.UniformGridLayout
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinColumnSpacing(
        this Avalonia.Layout.UniformGridLayout obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveMinColumnSpacing(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetObservable(Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinColumnSpacing<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<System.Double>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetObservable(Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingMinColumnSpacing(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMinColumnSpacing<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMinColumnSpacingChanged(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinColumnSpacingChanged<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.UniformGridLayout.MinColumnSpacingProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Layout.UniformGridLayout.MinItemHeightProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.MinItemHeightProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinItemHeight<T>(this T obj, System.Double value) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.MinItemHeightProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.UniformGridLayout.MinItemHeightProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinItemHeight<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.UniformGridLayout
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.MinItemHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.UniformGridLayout.MinItemHeightProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinItemHeight<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.UniformGridLayout
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.MinItemHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.UniformGridLayout.MinItemHeightProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.UniformGridLayout.MinItemHeightProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinItemHeight(
        this Avalonia.Layout.UniformGridLayout obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.MinItemHeightProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.UniformGridLayout.MinItemHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveMinItemHeight(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetObservable(Avalonia.Layout.UniformGridLayout.MinItemHeightProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.UniformGridLayout.MinItemHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinItemHeight<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<System.Double>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetObservable(Avalonia.Layout.UniformGridLayout.MinItemHeightProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.UniformGridLayout.MinItemHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingMinItemHeight(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.UniformGridLayout.MinItemHeightProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.UniformGridLayout.MinItemHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMinItemHeight<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.UniformGridLayout.MinItemHeightProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.UniformGridLayout.MinItemHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMinItemHeightChanged(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.UniformGridLayout.MinItemHeightProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.UniformGridLayout.MinItemHeightProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinItemHeightChanged<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.UniformGridLayout.MinItemHeightProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Layout.UniformGridLayout.MinItemWidthProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.MinItemWidthProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinItemWidth<T>(this T obj, System.Double value) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.MinItemWidthProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.UniformGridLayout.MinItemWidthProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinItemWidth<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.UniformGridLayout
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.MinItemWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.UniformGridLayout.MinItemWidthProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinItemWidth<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.UniformGridLayout
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.MinItemWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.UniformGridLayout.MinItemWidthProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.UniformGridLayout.MinItemWidthProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinItemWidth(
        this Avalonia.Layout.UniformGridLayout obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.MinItemWidthProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.UniformGridLayout.MinItemWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveMinItemWidth(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetObservable(Avalonia.Layout.UniformGridLayout.MinItemWidthProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.UniformGridLayout.MinItemWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinItemWidth<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<System.Double>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetObservable(Avalonia.Layout.UniformGridLayout.MinItemWidthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.UniformGridLayout.MinItemWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingMinItemWidth(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.UniformGridLayout.MinItemWidthProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.UniformGridLayout.MinItemWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMinItemWidth<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.UniformGridLayout.MinItemWidthProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.UniformGridLayout.MinItemWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMinItemWidthChanged(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.UniformGridLayout.MinItemWidthProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.UniformGridLayout.MinItemWidthProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinItemWidthChanged<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.UniformGridLayout.MinItemWidthProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinRowSpacing<T>(this T obj, System.Double value) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinRowSpacing<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.UniformGridLayout
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinRowSpacing<T>(
        this T obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.UniformGridLayout
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinRowSpacing(
        this Avalonia.Layout.UniformGridLayout obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Double> ObserveMinRowSpacing(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetObservable(Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinRowSpacing<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<System.Double>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetObservable(Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingMinRowSpacing(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMinRowSpacing<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<BindingValue<System.Double>>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMinRowSpacingChanged(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinRowSpacingChanged<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.UniformGridLayout.MinRowSpacingProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaximumRowsOrColumns<T>(this T obj, System.Int32 value) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaximumRowsOrColumns<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.UniformGridLayout
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaximumRowsOrColumns<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.UniformGridLayout
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMaximumRowsOrColumns(
        this Avalonia.Layout.UniformGridLayout obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveMaximumRowsOrColumns(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetObservable(Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaximumRowsOrColumns<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<System.Int32>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetObservable(Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingMaximumRowsOrColumns(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMaximumRowsOrColumns<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMaximumRowsOrColumnsChanged(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaximumRowsOrColumnsChanged<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.UniformGridLayout.MaximumRowsOrColumnsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Layout.UniformGridLayout.OrientationProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.OrientationProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Orientation<T>(this T obj, Avalonia.Layout.Orientation value) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.OrientationProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.UniformGridLayout.OrientationProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Orientation<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.UniformGridLayout
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.OrientationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Layout.UniformGridLayout.OrientationProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Orientation<T>(
        this T obj,
        IObservable<Avalonia.Layout.Orientation> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Layout.UniformGridLayout
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.OrientationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Layout.UniformGridLayout.OrientationProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Layout.UniformGridLayout.OrientationProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindOrientation(
        this Avalonia.Layout.UniformGridLayout obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Layout.UniformGridLayout.OrientationProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Layout.UniformGridLayout.OrientationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Layout.Orientation> ObserveOrientation(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetObservable(Avalonia.Layout.UniformGridLayout.OrientationProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Layout.UniformGridLayout.OrientationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnOrientation<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<Avalonia.Layout.Orientation>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetObservable(Avalonia.Layout.UniformGridLayout.OrientationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Layout.UniformGridLayout.OrientationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Layout.Orientation>> ObserveBindingOrientation(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetBindingObservable(Avalonia.Layout.UniformGridLayout.OrientationProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Layout.UniformGridLayout.OrientationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingOrientation<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<BindingValue<Avalonia.Layout.Orientation>>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetBindingObservable(Avalonia.Layout.UniformGridLayout.OrientationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Layout.UniformGridLayout.OrientationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveOrientationChanged(this Avalonia.Layout.UniformGridLayout obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Layout.UniformGridLayout.OrientationProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Layout.UniformGridLayout.OrientationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnOrientationChanged<T>(this T obj, Action<Avalonia.Layout.UniformGridLayout, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Layout.UniformGridLayout
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Layout.UniformGridLayout.OrientationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.OrientationProperty"/> property value to <see cref="Avalonia.Layout.Orientation.Horizontal"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OrientationHorizontal<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.OrientationProperty] = Avalonia.Layout.Orientation.Horizontal;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Layout.UniformGridLayout.OrientationProperty"/> property value to <see cref="Avalonia.Layout.Orientation.Vertical"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OrientationVertical<T>(this T obj) where T : Avalonia.Layout.UniformGridLayout
    {
        obj[Avalonia.Layout.UniformGridLayout.OrientationProperty] = Avalonia.Layout.Orientation.Vertical;
        return obj;
    }
}
