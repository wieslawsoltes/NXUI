// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.DatePickerPresenter"/> class property extension methods.
/// </summary>
public static partial class DatePickerPresenterExtensions
{
    // Avalonia.Controls.DatePickerPresenter.DateProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DatePickerPresenter.DateProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Date<T>(this T obj, System.DateTimeOffset value) where T : Avalonia.Controls.DatePickerPresenter
    {
        obj[Avalonia.Controls.DatePickerPresenter.DateProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.DateProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Date<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.DateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.DateProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Date<T>(
        this T obj,
        IObservable<System.DateTimeOffset> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.DateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DatePickerPresenter.DateProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DatePickerPresenter.DateProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDate(
        this Avalonia.Controls.DatePickerPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.DateProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.DateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.DateTimeOffset> ObserveDate(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.DatePickerPresenter.DateProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.DateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDate<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<System.DateTimeOffset>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.DatePickerPresenter.DateProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.DateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.DateTimeOffset>> ObserveBindingDate(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.DateProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.DateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingDate<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<BindingValue<System.DateTimeOffset>>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.DateProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.DateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDateChanged(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.DateProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.DateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDateChanged<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.DateProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DatePickerPresenter.DayFormatProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DatePickerPresenter.DayFormatProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DayFormat<T>(this T obj, System.String value) where T : Avalonia.Controls.DatePickerPresenter
    {
        obj[Avalonia.Controls.DatePickerPresenter.DayFormatProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.DayFormatProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DayFormat<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.DayFormatProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.DayFormatProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DayFormat<T>(
        this T obj,
        IObservable<System.String> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.DayFormatProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DatePickerPresenter.DayFormatProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DatePickerPresenter.DayFormatProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDayFormat(
        this Avalonia.Controls.DatePickerPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.DayFormatProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.DayFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.String> ObserveDayFormat(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.DatePickerPresenter.DayFormatProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.DayFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDayFormat<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<System.String>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.DatePickerPresenter.DayFormatProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.DayFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.String>> ObserveBindingDayFormat(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.DayFormatProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.DayFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingDayFormat<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<BindingValue<System.String>>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.DayFormatProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.DayFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDayFormatChanged(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.DayFormatProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.DayFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDayFormatChanged<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.DayFormatProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DatePickerPresenter.DayVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DatePickerPresenter.DayVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DayVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.DatePickerPresenter
    {
        obj[Avalonia.Controls.DatePickerPresenter.DayVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.DayVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DayVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.DayVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.DayVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DayVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.DayVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DatePickerPresenter.DayVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DatePickerPresenter.DayVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDayVisible(
        this Avalonia.Controls.DatePickerPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.DayVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.DayVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveDayVisible(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.DatePickerPresenter.DayVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.DayVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDayVisible<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.DatePickerPresenter.DayVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.DayVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingDayVisible(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.DayVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.DayVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingDayVisible<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.DayVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.DayVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDayVisibleChanged(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.DayVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.DayVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDayVisibleChanged<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.DayVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DatePickerPresenter.MaxYearProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DatePickerPresenter.MaxYearProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxYear<T>(this T obj, System.DateTimeOffset value) where T : Avalonia.Controls.DatePickerPresenter
    {
        obj[Avalonia.Controls.DatePickerPresenter.MaxYearProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.MaxYearProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxYear<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.MaxYearProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.MaxYearProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxYear<T>(
        this T obj,
        IObservable<System.DateTimeOffset> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.MaxYearProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DatePickerPresenter.MaxYearProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DatePickerPresenter.MaxYearProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMaxYear(
        this Avalonia.Controls.DatePickerPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.MaxYearProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.MaxYearProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.DateTimeOffset> ObserveMaxYear(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.DatePickerPresenter.MaxYearProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.MaxYearProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxYear<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<System.DateTimeOffset>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.DatePickerPresenter.MaxYearProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.MaxYearProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.DateTimeOffset>> ObserveBindingMaxYear(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.MaxYearProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.MaxYearProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMaxYear<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<BindingValue<System.DateTimeOffset>>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.MaxYearProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.MaxYearProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMaxYearChanged(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.MaxYearProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.MaxYearProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxYearChanged<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.MaxYearProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DatePickerPresenter.MinYearProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DatePickerPresenter.MinYearProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinYear<T>(this T obj, System.DateTimeOffset value) where T : Avalonia.Controls.DatePickerPresenter
    {
        obj[Avalonia.Controls.DatePickerPresenter.MinYearProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.MinYearProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinYear<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.MinYearProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.MinYearProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinYear<T>(
        this T obj,
        IObservable<System.DateTimeOffset> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.MinYearProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DatePickerPresenter.MinYearProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DatePickerPresenter.MinYearProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinYear(
        this Avalonia.Controls.DatePickerPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.MinYearProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.MinYearProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.DateTimeOffset> ObserveMinYear(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.DatePickerPresenter.MinYearProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.MinYearProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinYear<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<System.DateTimeOffset>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.DatePickerPresenter.MinYearProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.MinYearProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.DateTimeOffset>> ObserveBindingMinYear(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.MinYearProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.MinYearProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMinYear<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<BindingValue<System.DateTimeOffset>>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.MinYearProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.MinYearProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMinYearChanged(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.MinYearProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.MinYearProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinYearChanged<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.MinYearProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DatePickerPresenter.MonthFormatProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DatePickerPresenter.MonthFormatProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MonthFormat<T>(this T obj, System.String value) where T : Avalonia.Controls.DatePickerPresenter
    {
        obj[Avalonia.Controls.DatePickerPresenter.MonthFormatProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.MonthFormatProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MonthFormat<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.MonthFormatProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.MonthFormatProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MonthFormat<T>(
        this T obj,
        IObservable<System.String> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.MonthFormatProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DatePickerPresenter.MonthFormatProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DatePickerPresenter.MonthFormatProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMonthFormat(
        this Avalonia.Controls.DatePickerPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.MonthFormatProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.MonthFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.String> ObserveMonthFormat(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.DatePickerPresenter.MonthFormatProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.MonthFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMonthFormat<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<System.String>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.DatePickerPresenter.MonthFormatProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.MonthFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.String>> ObserveBindingMonthFormat(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.MonthFormatProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.MonthFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMonthFormat<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<BindingValue<System.String>>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.MonthFormatProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.MonthFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMonthFormatChanged(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.MonthFormatProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.MonthFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMonthFormatChanged<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.MonthFormatProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MonthVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.DatePickerPresenter
    {
        obj[Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MonthVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MonthVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMonthVisible(
        this Avalonia.Controls.DatePickerPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveMonthVisible(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMonthVisible<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingMonthVisible(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMonthVisible<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMonthVisibleChanged(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMonthVisibleChanged<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.MonthVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DatePickerPresenter.YearFormatProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DatePickerPresenter.YearFormatProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T YearFormat<T>(this T obj, System.String value) where T : Avalonia.Controls.DatePickerPresenter
    {
        obj[Avalonia.Controls.DatePickerPresenter.YearFormatProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.YearFormatProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T YearFormat<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.YearFormatProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.YearFormatProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T YearFormat<T>(
        this T obj,
        IObservable<System.String> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.YearFormatProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DatePickerPresenter.YearFormatProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DatePickerPresenter.YearFormatProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindYearFormat(
        this Avalonia.Controls.DatePickerPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.YearFormatProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.YearFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.String> ObserveYearFormat(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.DatePickerPresenter.YearFormatProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.YearFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnYearFormat<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<System.String>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.DatePickerPresenter.YearFormatProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.YearFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.String>> ObserveBindingYearFormat(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.YearFormatProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.YearFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingYearFormat<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<BindingValue<System.String>>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.YearFormatProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.YearFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveYearFormatChanged(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.YearFormatProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.YearFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnYearFormatChanged<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.YearFormatProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.DatePickerPresenter.YearVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.DatePickerPresenter.YearVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T YearVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.DatePickerPresenter
    {
        obj[Avalonia.Controls.DatePickerPresenter.YearVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.YearVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T YearVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.YearVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.DatePickerPresenter.YearVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T YearVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.DatePickerPresenter
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.YearVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.DatePickerPresenter.YearVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.DatePickerPresenter.YearVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindYearVisible(
        this Avalonia.Controls.DatePickerPresenter obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.DatePickerPresenter.YearVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.YearVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveYearVisible(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetObservable(Avalonia.Controls.DatePickerPresenter.YearVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.DatePickerPresenter.YearVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnYearVisible<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetObservable(Avalonia.Controls.DatePickerPresenter.YearVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.YearVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingYearVisible(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.YearVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.DatePickerPresenter.YearVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingYearVisible<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.DatePickerPresenter.YearVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.YearVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveYearVisibleChanged(this Avalonia.Controls.DatePickerPresenter obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.YearVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.DatePickerPresenter.YearVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnYearVisibleChanged<T>(this T obj, Action<Avalonia.Controls.DatePickerPresenter, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.DatePickerPresenter
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.DatePickerPresenter.YearVisibleProperty);
        handler(obj, observable);
        return obj;
    }
}
