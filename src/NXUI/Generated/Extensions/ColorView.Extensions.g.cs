// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.ColorView"/> class property extension methods.
/// </summary>
public static partial class ColorViewExtensions
{
    // Avalonia.Controls.ColorView.ColorProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.ColorProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Color<T>(this T obj, Avalonia.Media.Color value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.ColorProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.ColorProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Color<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.ColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.ColorProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Color<T>(
        this T obj,
        IObservable<Avalonia.Media.Color> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.ColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.ColorProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.ColorProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindColor(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.ColorProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.Color> ObserveColor(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.ColorProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColor<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<Avalonia.Media.Color>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.ColorProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.Color>> ObserveBindingColor(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.ColorProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingColor<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<Avalonia.Media.Color>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.ColorProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveColorChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.ColorProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColorChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.ColorProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.ColorModelProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.ColorModelProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorModel<T>(this T obj, Avalonia.Controls.ColorModel value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.ColorModelProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.ColorModelProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorModel<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.ColorModelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.ColorModelProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorModel<T>(
        this T obj,
        IObservable<Avalonia.Controls.ColorModel> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.ColorModelProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.ColorModelProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.ColorModelProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindColorModel(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.ColorModelProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.ColorModelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.ColorModel> ObserveColorModel(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.ColorModelProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.ColorModelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColorModel<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<Avalonia.Controls.ColorModel>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.ColorModelProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.ColorModelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.ColorModel>> ObserveBindingColorModel(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.ColorModelProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.ColorModelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingColorModel<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<Avalonia.Controls.ColorModel>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.ColorModelProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.ColorModelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveColorModelChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.ColorModelProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.ColorModelProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColorModelChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.ColorModelProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.ColorModelProperty"/> property value to <see cref="Avalonia.Controls.ColorModel.Hsva"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorModelHsva<T>(this T obj) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.ColorModelProperty] = Avalonia.Controls.ColorModel.Hsva;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.ColorModelProperty"/> property value to <see cref="Avalonia.Controls.ColorModel.Rgba"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorModelRgba<T>(this T obj) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.ColorModelProperty] = Avalonia.Controls.ColorModel.Rgba;
        return obj;
    }

    // Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorSpectrumComponents<T>(this T obj, Avalonia.Controls.ColorSpectrumComponents value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorSpectrumComponents<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorSpectrumComponents<T>(
        this T obj,
        IObservable<Avalonia.Controls.ColorSpectrumComponents> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindColorSpectrumComponents(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.ColorSpectrumComponents> ObserveColorSpectrumComponents(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColorSpectrumComponents<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<Avalonia.Controls.ColorSpectrumComponents>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.ColorSpectrumComponents>> ObserveBindingColorSpectrumComponents(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingColorSpectrumComponents<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<Avalonia.Controls.ColorSpectrumComponents>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveColorSpectrumComponentsChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColorSpectrumComponentsChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty"/> property value to <see cref="Avalonia.Controls.ColorSpectrumComponents.HueValue"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorSpectrumComponentsHueValue<T>(this T obj) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty] = Avalonia.Controls.ColorSpectrumComponents.HueValue;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty"/> property value to <see cref="Avalonia.Controls.ColorSpectrumComponents.ValueHue"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorSpectrumComponentsValueHue<T>(this T obj) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty] = Avalonia.Controls.ColorSpectrumComponents.ValueHue;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty"/> property value to <see cref="Avalonia.Controls.ColorSpectrumComponents.HueSaturation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorSpectrumComponentsHueSaturation<T>(this T obj) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty] = Avalonia.Controls.ColorSpectrumComponents.HueSaturation;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty"/> property value to <see cref="Avalonia.Controls.ColorSpectrumComponents.SaturationHue"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorSpectrumComponentsSaturationHue<T>(this T obj) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty] = Avalonia.Controls.ColorSpectrumComponents.SaturationHue;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty"/> property value to <see cref="Avalonia.Controls.ColorSpectrumComponents.SaturationValue"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorSpectrumComponentsSaturationValue<T>(this T obj) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty] = Avalonia.Controls.ColorSpectrumComponents.SaturationValue;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty"/> property value to <see cref="Avalonia.Controls.ColorSpectrumComponents.ValueSaturation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorSpectrumComponentsValueSaturation<T>(this T obj) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.ColorSpectrumComponentsProperty] = Avalonia.Controls.ColorSpectrumComponents.ValueSaturation;
        return obj;
    }

    // Avalonia.Controls.ColorView.ColorSpectrumShapeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.ColorSpectrumShapeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorSpectrumShape<T>(this T obj, Avalonia.Controls.ColorSpectrumShape value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.ColorSpectrumShapeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.ColorSpectrumShapeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorSpectrumShape<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.ColorSpectrumShapeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.ColorSpectrumShapeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorSpectrumShape<T>(
        this T obj,
        IObservable<Avalonia.Controls.ColorSpectrumShape> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.ColorSpectrumShapeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.ColorSpectrumShapeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.ColorSpectrumShapeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindColorSpectrumShape(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.ColorSpectrumShapeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.ColorSpectrumShapeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.ColorSpectrumShape> ObserveColorSpectrumShape(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.ColorSpectrumShapeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.ColorSpectrumShapeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColorSpectrumShape<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<Avalonia.Controls.ColorSpectrumShape>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.ColorSpectrumShapeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.ColorSpectrumShapeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.ColorSpectrumShape>> ObserveBindingColorSpectrumShape(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.ColorSpectrumShapeProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.ColorSpectrumShapeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingColorSpectrumShape<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<Avalonia.Controls.ColorSpectrumShape>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.ColorSpectrumShapeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.ColorSpectrumShapeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveColorSpectrumShapeChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.ColorSpectrumShapeProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.ColorSpectrumShapeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColorSpectrumShapeChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.ColorSpectrumShapeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.ColorSpectrumShapeProperty"/> property value to <see cref="Avalonia.Controls.ColorSpectrumShape.Box"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorSpectrumShapeBox<T>(this T obj) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.ColorSpectrumShapeProperty] = Avalonia.Controls.ColorSpectrumShape.Box;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.ColorSpectrumShapeProperty"/> property value to <see cref="Avalonia.Controls.ColorSpectrumShape.Ring"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ColorSpectrumShapeRing<T>(this T obj) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.ColorSpectrumShapeProperty] = Avalonia.Controls.ColorSpectrumShape.Ring;
        return obj;
    }

    // Avalonia.Controls.ColorView.HexInputAlphaPositionProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.HexInputAlphaPositionProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HexInputAlphaPosition<T>(this T obj, Avalonia.Controls.AlphaComponentPosition value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.HexInputAlphaPositionProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.HexInputAlphaPositionProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HexInputAlphaPosition<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.HexInputAlphaPositionProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.HexInputAlphaPositionProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HexInputAlphaPosition<T>(
        this T obj,
        IObservable<Avalonia.Controls.AlphaComponentPosition> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.HexInputAlphaPositionProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.HexInputAlphaPositionProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.HexInputAlphaPositionProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHexInputAlphaPosition(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.HexInputAlphaPositionProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.HexInputAlphaPositionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.AlphaComponentPosition> ObserveHexInputAlphaPosition(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.HexInputAlphaPositionProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.HexInputAlphaPositionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHexInputAlphaPosition<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<Avalonia.Controls.AlphaComponentPosition>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.HexInputAlphaPositionProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.HexInputAlphaPositionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.AlphaComponentPosition>> ObserveBindingHexInputAlphaPosition(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.HexInputAlphaPositionProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.HexInputAlphaPositionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingHexInputAlphaPosition<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<Avalonia.Controls.AlphaComponentPosition>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.HexInputAlphaPositionProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.HexInputAlphaPositionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveHexInputAlphaPositionChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.HexInputAlphaPositionProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.HexInputAlphaPositionProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHexInputAlphaPositionChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.HexInputAlphaPositionProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.HexInputAlphaPositionProperty"/> property value to <see cref="Avalonia.Controls.AlphaComponentPosition.Leading"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HexInputAlphaPositionLeading<T>(this T obj) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.HexInputAlphaPositionProperty] = Avalonia.Controls.AlphaComponentPosition.Leading;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.HexInputAlphaPositionProperty"/> property value to <see cref="Avalonia.Controls.AlphaComponentPosition.Trailing"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HexInputAlphaPositionTrailing<T>(this T obj) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.HexInputAlphaPositionProperty] = Avalonia.Controls.AlphaComponentPosition.Trailing;
        return obj;
    }

    // Avalonia.Controls.ColorView.HsvColorProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.HsvColorProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HsvColor<T>(this T obj, Avalonia.Media.HsvColor value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.HsvColorProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.HsvColorProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HsvColor<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.HsvColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.HsvColorProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HsvColor<T>(
        this T obj,
        IObservable<Avalonia.Media.HsvColor> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.HsvColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.HsvColorProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.HsvColorProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHsvColor(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.HsvColorProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.HsvColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.HsvColor> ObserveHsvColor(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.HsvColorProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.HsvColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHsvColor<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<Avalonia.Media.HsvColor>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.HsvColorProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.HsvColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.HsvColor>> ObserveBindingHsvColor(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.HsvColorProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.HsvColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingHsvColor<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<Avalonia.Media.HsvColor>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.HsvColorProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.HsvColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveHsvColorChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.HsvColorProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.HsvColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHsvColorChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.HsvColorProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsAccentColorsVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsAccentColorsVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsAccentColorsVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsAccentColorsVisible(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsAccentColorsVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsAccentColorsVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsAccentColorsVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsAccentColorsVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsAccentColorsVisibleChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsAccentColorsVisibleChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsAccentColorsVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.IsAlphaEnabledProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.IsAlphaEnabledProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsAlphaEnabled<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.IsAlphaEnabledProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsAlphaEnabledProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsAlphaEnabled<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsAlphaEnabledProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsAlphaEnabledProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsAlphaEnabled<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsAlphaEnabledProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.IsAlphaEnabledProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.IsAlphaEnabledProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsAlphaEnabled(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.IsAlphaEnabledProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.IsAlphaEnabledProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsAlphaEnabled(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.IsAlphaEnabledProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.IsAlphaEnabledProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsAlphaEnabled<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.IsAlphaEnabledProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.IsAlphaEnabledProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsAlphaEnabled(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.IsAlphaEnabledProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.IsAlphaEnabledProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsAlphaEnabled<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.IsAlphaEnabledProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.IsAlphaEnabledProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsAlphaEnabledChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsAlphaEnabledProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.IsAlphaEnabledProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsAlphaEnabledChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsAlphaEnabledProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.IsAlphaVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.IsAlphaVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsAlphaVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.IsAlphaVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsAlphaVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsAlphaVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsAlphaVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsAlphaVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsAlphaVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsAlphaVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.IsAlphaVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.IsAlphaVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsAlphaVisible(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.IsAlphaVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.IsAlphaVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsAlphaVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.IsAlphaVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.IsAlphaVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsAlphaVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.IsAlphaVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.IsAlphaVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsAlphaVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.IsAlphaVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.IsAlphaVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsAlphaVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.IsAlphaVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.IsAlphaVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsAlphaVisibleChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsAlphaVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.IsAlphaVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsAlphaVisibleChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsAlphaVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorComponentsVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorComponentsVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorComponentsVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsColorComponentsVisible(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsColorComponentsVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsColorComponentsVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsColorComponentsVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsColorComponentsVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsColorComponentsVisibleChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsColorComponentsVisibleChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsColorComponentsVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.IsColorModelVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.IsColorModelVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorModelVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.IsColorModelVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsColorModelVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorModelVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorModelVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsColorModelVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorModelVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorModelVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.IsColorModelVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.IsColorModelVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsColorModelVisible(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorModelVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.IsColorModelVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsColorModelVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.IsColorModelVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.IsColorModelVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsColorModelVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.IsColorModelVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.IsColorModelVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsColorModelVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.IsColorModelVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.IsColorModelVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsColorModelVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.IsColorModelVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.IsColorModelVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsColorModelVisibleChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsColorModelVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.IsColorModelVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsColorModelVisibleChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsColorModelVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorPaletteVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorPaletteVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorPaletteVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsColorPaletteVisible(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsColorPaletteVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsColorPaletteVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsColorPaletteVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsColorPaletteVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsColorPaletteVisibleChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsColorPaletteVisibleChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsColorPaletteVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorPreviewVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorPreviewVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorPreviewVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsColorPreviewVisible(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsColorPreviewVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsColorPreviewVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsColorPreviewVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsColorPreviewVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsColorPreviewVisibleChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsColorPreviewVisibleChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsColorPreviewVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorSpectrumVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorSpectrumVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorSpectrumVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsColorSpectrumVisible(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsColorSpectrumVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsColorSpectrumVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsColorSpectrumVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsColorSpectrumVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsColorSpectrumVisibleChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsColorSpectrumVisibleChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsColorSpectrumVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorSpectrumSliderVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorSpectrumSliderVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsColorSpectrumSliderVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsColorSpectrumSliderVisible(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsColorSpectrumSliderVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsColorSpectrumSliderVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsColorSpectrumSliderVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsColorSpectrumSliderVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsColorSpectrumSliderVisibleChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsColorSpectrumSliderVisibleChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsColorSpectrumSliderVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsComponentSliderVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsComponentSliderVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsComponentSliderVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsComponentSliderVisible(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsComponentSliderVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsComponentSliderVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsComponentSliderVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsComponentSliderVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsComponentSliderVisibleChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsComponentSliderVisibleChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsComponentSliderVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsComponentTextInputVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsComponentTextInputVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsComponentTextInputVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsComponentTextInputVisible(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsComponentTextInputVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsComponentTextInputVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsComponentTextInputVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsComponentTextInputVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsComponentTextInputVisibleChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsComponentTextInputVisibleChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsComponentTextInputVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.IsHexInputVisibleProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.IsHexInputVisibleProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsHexInputVisible<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.IsHexInputVisibleProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsHexInputVisibleProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsHexInputVisible<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsHexInputVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.IsHexInputVisibleProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsHexInputVisible<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.IsHexInputVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.IsHexInputVisibleProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.IsHexInputVisibleProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsHexInputVisible(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.IsHexInputVisibleProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.IsHexInputVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsHexInputVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.IsHexInputVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.IsHexInputVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsHexInputVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.IsHexInputVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.IsHexInputVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsHexInputVisible(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.IsHexInputVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.IsHexInputVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsHexInputVisible<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.IsHexInputVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.IsHexInputVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsHexInputVisibleChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsHexInputVisibleProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.IsHexInputVisibleProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsHexInputVisibleChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.IsHexInputVisibleProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.MaxHueProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.MaxHueProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxHue<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.MaxHueProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.MaxHueProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxHue<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.MaxHueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.MaxHueProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxHue<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.MaxHueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.MaxHueProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.MaxHueProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMaxHue(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.MaxHueProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.MaxHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveMaxHue(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.MaxHueProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.MaxHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxHue<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Int32>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.MaxHueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.MaxHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingMaxHue(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.MaxHueProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.MaxHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMaxHue<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.MaxHueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.MaxHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMaxHueChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.MaxHueProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.MaxHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxHueChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.MaxHueProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.MaxSaturationProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.MaxSaturationProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxSaturation<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.MaxSaturationProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.MaxSaturationProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxSaturation<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.MaxSaturationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.MaxSaturationProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxSaturation<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.MaxSaturationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.MaxSaturationProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.MaxSaturationProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMaxSaturation(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.MaxSaturationProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.MaxSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveMaxSaturation(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.MaxSaturationProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.MaxSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxSaturation<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Int32>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.MaxSaturationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.MaxSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingMaxSaturation(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.MaxSaturationProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.MaxSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMaxSaturation<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.MaxSaturationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.MaxSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMaxSaturationChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.MaxSaturationProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.MaxSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxSaturationChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.MaxSaturationProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.MaxValueProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.MaxValueProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxValue<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.MaxValueProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.MaxValueProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxValue<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.MaxValueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.MaxValueProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxValue<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.MaxValueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.MaxValueProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.MaxValueProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMaxValue(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.MaxValueProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.MaxValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveMaxValue(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.MaxValueProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.MaxValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxValue<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Int32>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.MaxValueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.MaxValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingMaxValue(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.MaxValueProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.MaxValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMaxValue<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.MaxValueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.MaxValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMaxValueChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.MaxValueProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.MaxValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxValueChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.MaxValueProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.MinHueProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.MinHueProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinHue<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.MinHueProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.MinHueProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinHue<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.MinHueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.MinHueProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinHue<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.MinHueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.MinHueProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.MinHueProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinHue(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.MinHueProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.MinHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveMinHue(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.MinHueProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.MinHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinHue<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Int32>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.MinHueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.MinHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingMinHue(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.MinHueProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.MinHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMinHue<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.MinHueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.MinHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMinHueChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.MinHueProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.MinHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinHueChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.MinHueProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.MinSaturationProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.MinSaturationProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinSaturation<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.MinSaturationProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.MinSaturationProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinSaturation<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.MinSaturationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.MinSaturationProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinSaturation<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.MinSaturationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.MinSaturationProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.MinSaturationProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinSaturation(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.MinSaturationProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.MinSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveMinSaturation(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.MinSaturationProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.MinSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinSaturation<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Int32>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.MinSaturationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.MinSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingMinSaturation(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.MinSaturationProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.MinSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMinSaturation<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.MinSaturationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.MinSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMinSaturationChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.MinSaturationProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.MinSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinSaturationChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.MinSaturationProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.MinValueProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.MinValueProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinValue<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.MinValueProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.MinValueProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinValue<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.MinValueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.MinValueProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinValue<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.MinValueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.MinValueProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.MinValueProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinValue(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.MinValueProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.MinValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveMinValue(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.MinValueProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.MinValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinValue<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Int32>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.MinValueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.MinValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingMinValue(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.MinValueProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.MinValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMinValue<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.MinValueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.MinValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMinValueChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.MinValueProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.MinValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinValueChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.MinValueProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.PaletteColorsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.PaletteColorsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PaletteColors<T>(this T obj, System.Collections.Generic.IEnumerable<Avalonia.Media.Color> value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.PaletteColorsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.PaletteColorsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PaletteColors<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.PaletteColorsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.PaletteColorsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PaletteColors<T>(
        this T obj,
        IObservable<System.Collections.Generic.IEnumerable<Avalonia.Media.Color>> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.PaletteColorsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.PaletteColorsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.PaletteColorsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPaletteColors(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.PaletteColorsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.PaletteColorsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Collections.Generic.IEnumerable<Avalonia.Media.Color>> ObservePaletteColors(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.PaletteColorsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.PaletteColorsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPaletteColors<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Collections.Generic.IEnumerable<Avalonia.Media.Color>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.PaletteColorsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.PaletteColorsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Collections.Generic.IEnumerable<Avalonia.Media.Color>>> ObserveBindingPaletteColors(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.PaletteColorsProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.PaletteColorsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingPaletteColors<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Collections.Generic.IEnumerable<Avalonia.Media.Color>>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.PaletteColorsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.PaletteColorsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObservePaletteColorsChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.PaletteColorsProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.PaletteColorsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPaletteColorsChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.PaletteColorsProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.PaletteColumnCountProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.PaletteColumnCountProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PaletteColumnCount<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.PaletteColumnCountProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.PaletteColumnCountProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PaletteColumnCount<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.PaletteColumnCountProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.PaletteColumnCountProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T PaletteColumnCount<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.PaletteColumnCountProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.PaletteColumnCountProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.PaletteColumnCountProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPaletteColumnCount(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.PaletteColumnCountProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.PaletteColumnCountProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObservePaletteColumnCount(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.PaletteColumnCountProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.PaletteColumnCountProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPaletteColumnCount<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Int32>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.PaletteColumnCountProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.PaletteColumnCountProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingPaletteColumnCount(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.PaletteColumnCountProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.PaletteColumnCountProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingPaletteColumnCount<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.PaletteColumnCountProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.PaletteColumnCountProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObservePaletteColumnCountChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.PaletteColumnCountProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.PaletteColumnCountProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPaletteColumnCountChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.PaletteColumnCountProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.PaletteProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.PaletteProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Palette<T>(this T obj, Avalonia.Controls.IColorPalette value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.PaletteProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.PaletteProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Palette<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.PaletteProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.PaletteProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Palette<T>(
        this T obj,
        IObservable<Avalonia.Controls.IColorPalette> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.PaletteProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.PaletteProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.PaletteProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindPalette(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.PaletteProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.PaletteProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.IColorPalette> ObservePalette(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.PaletteProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.PaletteProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPalette<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<Avalonia.Controls.IColorPalette>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.PaletteProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.PaletteProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.IColorPalette>> ObserveBindingPalette(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.PaletteProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.PaletteProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingPalette<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<Avalonia.Controls.IColorPalette>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.PaletteProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.PaletteProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObservePaletteChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.PaletteProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.PaletteProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnPaletteChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.PaletteProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.ColorView.SelectedIndexProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.ColorView.SelectedIndexProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedIndex<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.ColorView
    {
        obj[Avalonia.Controls.ColorView.SelectedIndexProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.SelectedIndexProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedIndex<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.SelectedIndexProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.ColorView.SelectedIndexProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedIndex<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.ColorView
    {
        var descriptor = Avalonia.Controls.ColorView.SelectedIndexProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.ColorView.SelectedIndexProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.ColorView.SelectedIndexProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectedIndex(
        this Avalonia.Controls.ColorView obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.ColorView.SelectedIndexProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.ColorView.SelectedIndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveSelectedIndex(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetObservable(Avalonia.Controls.ColorView.SelectedIndexProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.ColorView.SelectedIndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectedIndex<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<System.Int32>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetObservable(Avalonia.Controls.ColorView.SelectedIndexProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.ColorView.SelectedIndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingSelectedIndex(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.ColorView.SelectedIndexProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.ColorView.SelectedIndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingSelectedIndex<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.ColorView.SelectedIndexProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.ColorView.SelectedIndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveSelectedIndexChanged(this Avalonia.Controls.ColorView obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.SelectedIndexProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.ColorView.SelectedIndexProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectedIndexChanged<T>(this T obj, Action<Avalonia.Controls.ColorView, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.ColorView
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.ColorView.SelectedIndexProperty);
        handler(obj, observable);
        return obj;
    }
}
