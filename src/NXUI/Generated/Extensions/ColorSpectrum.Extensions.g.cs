// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.Primitives.ColorSpectrum"/> class property extension methods.
/// </summary>
public static partial class ColorSpectrumExtensions
{
    // Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Color<T>(this T obj, Avalonia.Media.Color value) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Color<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Color<T>(
        this T obj,
        IObservable<Avalonia.Media.Color> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindColor(
        this Avalonia.Controls.Primitives.ColorSpectrum obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.Color> ObserveColor(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColor<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<Avalonia.Media.Color>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.Color>> ObserveBindingColor(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingColor<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<BindingValue<Avalonia.Media.Color>>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveColorChanged(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnColorChanged<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.ColorProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Components<T>(this T obj, Avalonia.Controls.ColorSpectrumComponents value) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Components<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Components<T>(
        this T obj,
        IObservable<Avalonia.Controls.ColorSpectrumComponents> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindComponents(
        this Avalonia.Controls.Primitives.ColorSpectrum obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.ColorSpectrumComponents> ObserveComponents(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnComponents<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<Avalonia.Controls.ColorSpectrumComponents>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.ColorSpectrumComponents>> ObserveBindingComponents(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingComponents<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<BindingValue<Avalonia.Controls.ColorSpectrumComponents>>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveComponentsChanged(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnComponentsChanged<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty"/> property value to <see cref="Avalonia.Controls.ColorSpectrumComponents.HueValue"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ComponentsHueValue<T>(this T obj) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty] = Avalonia.Controls.ColorSpectrumComponents.HueValue;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty"/> property value to <see cref="Avalonia.Controls.ColorSpectrumComponents.ValueHue"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ComponentsValueHue<T>(this T obj) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty] = Avalonia.Controls.ColorSpectrumComponents.ValueHue;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty"/> property value to <see cref="Avalonia.Controls.ColorSpectrumComponents.HueSaturation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ComponentsHueSaturation<T>(this T obj) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty] = Avalonia.Controls.ColorSpectrumComponents.HueSaturation;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty"/> property value to <see cref="Avalonia.Controls.ColorSpectrumComponents.SaturationHue"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ComponentsSaturationHue<T>(this T obj) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty] = Avalonia.Controls.ColorSpectrumComponents.SaturationHue;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty"/> property value to <see cref="Avalonia.Controls.ColorSpectrumComponents.SaturationValue"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ComponentsSaturationValue<T>(this T obj) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty] = Avalonia.Controls.ColorSpectrumComponents.SaturationValue;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty"/> property value to <see cref="Avalonia.Controls.ColorSpectrumComponents.ValueSaturation"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ComponentsValueSaturation<T>(this T obj) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.ComponentsProperty] = Avalonia.Controls.ColorSpectrumComponents.ValueSaturation;
        return obj;
    }

    // Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HsvColor<T>(this T obj, Avalonia.Media.HsvColor value) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HsvColor<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HsvColor<T>(
        this T obj,
        IObservable<Avalonia.Media.HsvColor> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHsvColor(
        this Avalonia.Controls.Primitives.ColorSpectrum obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Media.HsvColor> ObserveHsvColor(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHsvColor<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<Avalonia.Media.HsvColor>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.HsvColor>> ObserveBindingHsvColor(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingHsvColor<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<BindingValue<Avalonia.Media.HsvColor>>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveHsvColorChanged(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHsvColorChanged<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.HsvColorProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxHue<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxHue<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxHue<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMaxHue(
        this Avalonia.Controls.Primitives.ColorSpectrum obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveMaxHue(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxHue<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<System.Int32>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingMaxHue(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMaxHue<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMaxHueChanged(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxHueChanged<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxHueProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxSaturation<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxSaturation<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxSaturation<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMaxSaturation(
        this Avalonia.Controls.Primitives.ColorSpectrum obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveMaxSaturation(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxSaturation<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<System.Int32>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingMaxSaturation(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMaxSaturation<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMaxSaturationChanged(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxSaturationChanged<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxSaturationProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxValue<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxValue<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MaxValue<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMaxValue(
        this Avalonia.Controls.Primitives.ColorSpectrum obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveMaxValue(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxValue<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<System.Int32>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingMaxValue(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMaxValue<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMaxValueChanged(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMaxValueChanged<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.MaxValueProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinHue<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinHue<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinHue<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinHue(
        this Avalonia.Controls.Primitives.ColorSpectrum obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveMinHue(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinHue<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<System.Int32>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingMinHue(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMinHue<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMinHueChanged(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinHueChanged<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinHueProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinSaturation<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinSaturation<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinSaturation<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinSaturation(
        this Avalonia.Controls.Primitives.ColorSpectrum obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveMinSaturation(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinSaturation<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<System.Int32>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingMinSaturation(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMinSaturation<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMinSaturationChanged(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinSaturationChanged<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinSaturationProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinValue<T>(this T obj, System.Int32 value) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinValue<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T MinValue<T>(
        this T obj,
        IObservable<System.Int32> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindMinValue(
        this Avalonia.Controls.Primitives.ColorSpectrum obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Int32> ObserveMinValue(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinValue<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<System.Int32>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Int32>> ObserveBindingMinValue(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingMinValue<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<BindingValue<System.Int32>>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveMinValueChanged(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnMinValueChanged<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.MinValueProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Shape<T>(this T obj, Avalonia.Controls.ColorSpectrumShape value) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Shape<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Shape<T>(
        this T obj,
        IObservable<Avalonia.Controls.ColorSpectrumShape> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindShape(
        this Avalonia.Controls.Primitives.ColorSpectrum obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.ColorSpectrumShape> ObserveShape(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnShape<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<Avalonia.Controls.ColorSpectrumShape>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.ColorSpectrumShape>> ObserveBindingShape(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingShape<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<BindingValue<Avalonia.Controls.ColorSpectrumShape>>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveShapeChanged(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnShapeChanged<T>(this T obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty"/> property value to <see cref="Avalonia.Controls.ColorSpectrumShape.Box"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ShapeBox<T>(this T obj) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty] = Avalonia.Controls.ColorSpectrumShape.Box;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty"/> property value to <see cref="Avalonia.Controls.ColorSpectrumShape.Ring"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ShapeRing<T>(this T obj) where T : Avalonia.Controls.Primitives.ColorSpectrum
    {
        obj[Avalonia.Controls.Primitives.ColorSpectrum.ShapeProperty] = Avalonia.Controls.ColorSpectrumShape.Ring;
        return obj;
    }

    // Avalonia.Controls.Primitives.ColorSpectrum.ThirdComponentProperty

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ThirdComponentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ThirdComponentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindThirdComponent(
        this Avalonia.Controls.Primitives.ColorSpectrum obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.OneWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.Primitives.ColorSpectrum.ThirdComponentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ThirdComponentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.ColorComponent> ObserveThirdComponent(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.ThirdComponentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ThirdComponentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.ColorSpectrum OnThirdComponent(this Avalonia.Controls.Primitives.ColorSpectrum obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<Avalonia.Controls.ColorComponent>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.ColorSpectrum.ThirdComponentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ThirdComponentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.ColorComponent>> ObserveBindingThirdComponent(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.ThirdComponentProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ThirdComponentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.ColorSpectrum OnBindingThirdComponent(this Avalonia.Controls.Primitives.ColorSpectrum obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<BindingValue<Avalonia.Controls.ColorComponent>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.Primitives.ColorSpectrum.ThirdComponentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ThirdComponentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveThirdComponentChanged(this Avalonia.Controls.Primitives.ColorSpectrum obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.ThirdComponentProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.Primitives.ColorSpectrum.ThirdComponentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Controls.Primitives.ColorSpectrum OnThirdComponentChanged(this Avalonia.Controls.Primitives.ColorSpectrum obj, Action<Avalonia.Controls.Primitives.ColorSpectrum, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.Primitives.ColorSpectrum.ThirdComponentProperty);
        handler(obj, observable);
        return obj;
    }
}
