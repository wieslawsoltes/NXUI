// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.Primitives.Thumb"/> class property extension methods.
/// </summary>
public static partial class ThumbExtensions
{
    // Avalonia.Controls.Primitives.Thumb.DragStartedEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.Primitives.Thumb.DragStartedEvent"/> event on an object of type <see cref="Avalonia.Controls.Primitives.Thumb"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnDragStartedHandler<T>(
        this T obj,
        Action<T, Avalonia.Input.VectorEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Primitives.Thumb
    {
        obj.AddHandler(Avalonia.Controls.Primitives.Thumb.DragStartedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.Primitives.Thumb.DragStartedEvent"/> event on an object of type <see cref="Avalonia.Controls.Primitives.Thumb"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnDragStarted<T>(
        this T obj, Action<T, IObservable<Avalonia.Input.VectorEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Primitives.Thumb
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Thumb.DragStartedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.Primitives.Thumb.DragStartedEvent"/> event on an object of type <see cref="Avalonia.Controls.Primitives.Thumb"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Input.VectorEventArgs> ObserveOnDragStarted(
        this Avalonia.Controls.Primitives.Thumb obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Thumb.DragStartedEvent, routes);
    }

    // Avalonia.Controls.Primitives.Thumb.DragDeltaEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.Primitives.Thumb.DragDeltaEvent"/> event on an object of type <see cref="Avalonia.Controls.Primitives.Thumb"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnDragDeltaHandler<T>(
        this T obj,
        Action<T, Avalonia.Input.VectorEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Primitives.Thumb
    {
        obj.AddHandler(Avalonia.Controls.Primitives.Thumb.DragDeltaEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.Primitives.Thumb.DragDeltaEvent"/> event on an object of type <see cref="Avalonia.Controls.Primitives.Thumb"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnDragDelta<T>(
        this T obj, Action<T, IObservable<Avalonia.Input.VectorEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Primitives.Thumb
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Thumb.DragDeltaEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.Primitives.Thumb.DragDeltaEvent"/> event on an object of type <see cref="Avalonia.Controls.Primitives.Thumb"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Input.VectorEventArgs> ObserveOnDragDelta(
        this Avalonia.Controls.Primitives.Thumb obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Thumb.DragDeltaEvent, routes);
    }

    // Avalonia.Controls.Primitives.Thumb.DragCompletedEvent

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.Primitives.Thumb.DragCompletedEvent"/> event on an object of type <see cref="Avalonia.Controls.Primitives.Thumb"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="action">The action to be performed when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnDragCompletedHandler<T>(
        this T obj,
        Action<T, Avalonia.Input.VectorEventArgs> action,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Primitives.Thumb
    {
        obj.AddHandler(Avalonia.Controls.Primitives.Thumb.DragCompletedEvent, (_, args) => action(obj, args), routes);
        return obj;
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Controls.Primitives.Thumb.DragCompletedEvent"/> event on an object of type <see cref="Avalonia.Controls.Primitives.Thumb"/> and returns an observable for the event.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object.</returns>
    public static T OnDragCompleted<T>(
        this T obj, Action<T, IObservable<Avalonia.Input.VectorEventArgs>> handler,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble) where T : Avalonia.Controls.Primitives.Thumb
    {
        var observable = obj.GetObservable(Avalonia.Controls.Primitives.Thumb.DragCompletedEvent, routes);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets an observable for the <see cref="Avalonia.Controls.Primitives.Thumb.DragCompletedEvent"/> event on an object of type <see cref="Avalonia.Controls.Primitives.Thumb"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="routes">The routing strategies for the event.</param>
    /// <returns>An observable for the event.</returns>
    public static IObservable<Avalonia.Input.VectorEventArgs> ObserveOnDragCompleted(
        this Avalonia.Controls.Primitives.Thumb obj,
        Avalonia.Interactivity.RoutingStrategies routes = Avalonia.Interactivity.RoutingStrategies.Bubble)
    {
        return obj.GetObservable(Avalonia.Controls.Primitives.Thumb.DragCompletedEvent, routes);
    }

    // Avalonia.Controls.Primitives.Thumb.DragStarted

    /// <summary>
    /// Adds a handler to the `DragStarted` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDragStartedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.VectorEventArgs>> handler) where T : Avalonia.Controls.Primitives.Thumb
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Input.VectorEventArgs>, Avalonia.Input.VectorEventArgs>(
                h => obj.DragStarted += h, 
                h => obj.DragStarted -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `DragStarted` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `DragStarted` event on the specified object.</returns>
    public static IObservable<Avalonia.Input.VectorEventArgs> ObserveOnDragStartedEvent(this Avalonia.Controls.Primitives.Thumb obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Input.VectorEventArgs>, Avalonia.Input.VectorEventArgs>(
                h => obj.DragStarted += h, 
                h => obj.DragStarted -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.Primitives.Thumb.DragDelta

    /// <summary>
    /// Adds a handler to the `DragDelta` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDragDeltaEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.VectorEventArgs>> handler) where T : Avalonia.Controls.Primitives.Thumb
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Input.VectorEventArgs>, Avalonia.Input.VectorEventArgs>(
                h => obj.DragDelta += h, 
                h => obj.DragDelta -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `DragDelta` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `DragDelta` event on the specified object.</returns>
    public static IObservable<Avalonia.Input.VectorEventArgs> ObserveOnDragDeltaEvent(this Avalonia.Controls.Primitives.Thumb obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Input.VectorEventArgs>, Avalonia.Input.VectorEventArgs>(
                h => obj.DragDelta += h, 
                h => obj.DragDelta -= h)
            .Select(x => x.EventArgs);
    }

    // Avalonia.Controls.Primitives.Thumb.DragCompleted

    /// <summary>
    /// Adds a handler to the `DragCompleted` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the event is raised.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDragCompletedEvent<T>(this T obj, Action<T, IObservable<Avalonia.Input.VectorEventArgs>> handler) where T : Avalonia.Controls.Primitives.Thumb
    {
        var observable = Observable
            .FromEventPattern<System.EventHandler<Avalonia.Input.VectorEventArgs>, Avalonia.Input.VectorEventArgs>(
                h => obj.DragCompleted += h, 
                h => obj.DragCompleted -= h)
            .Select(x => x.EventArgs);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Returns an observable for the `DragCompleted` event on the specified object.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable for the `DragCompleted` event on the specified object.</returns>
    public static IObservable<Avalonia.Input.VectorEventArgs> ObserveOnDragCompletedEvent(this Avalonia.Controls.Primitives.Thumb obj)
    {
        return Observable
            .FromEventPattern<System.EventHandler<Avalonia.Input.VectorEventArgs>, Avalonia.Input.VectorEventArgs>(
                h => obj.DragCompleted += h, 
                h => obj.DragCompleted -= h)
            .Select(x => x.EventArgs);
    }
}
