// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Media.ImageDrawing"/> class property extension methods.
/// </summary>
public static partial class ImageDrawingExtensions
{
    // Avalonia.Media.ImageDrawing.ImageSourceProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.ImageDrawing.ImageSourceProperty"/> value on an object of type <see cref="Avalonia.Media.ImageDrawing"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ImageDrawing ImageSource(this Avalonia.Media.ImageDrawing obj, Avalonia.Media.IImage value)
    {
        obj[Avalonia.Media.ImageDrawing.ImageSourceProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ImageDrawing.ImageSourceProperty"/> on an object of type <see cref="Avalonia.Media.ImageDrawing"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ImageDrawing ImageSource(
        this Avalonia.Media.ImageDrawing obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ImageDrawing.ImageSourceProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ImageDrawing.ImageSourceProperty"/> on an object of type <see cref="Avalonia.Media.ImageDrawing"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ImageDrawing ImageSource(
        this Avalonia.Media.ImageDrawing obj,
        IObservable<Avalonia.Media.IImage> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ImageDrawing.ImageSourceProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.ImageDrawing.ImageSourceProperty"/> binding on an object of type <see cref="Avalonia.Media.ImageDrawing"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.ImageDrawing.ImageSourceProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindImageSource(
        this Avalonia.Media.ImageDrawing obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ImageDrawing.ImageSourceProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.ImageDrawing.ImageSourceProperty"/> on an object of type <see cref="Avalonia.Media.ImageDrawing"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<Avalonia.Media.IImage> ObserveImageSource(this Avalonia.Media.ImageDrawing obj)
    {
        return obj.GetObservable(Avalonia.Media.ImageDrawing.ImageSourceProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.ImageDrawing.ImageSourceProperty"/> property on an object of type <see cref="Avalonia.Media.ImageDrawing"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.ImageDrawing OnImageSource(this Avalonia.Media.ImageDrawing obj, Action<Avalonia.Media.ImageDrawing, IObservable<Avalonia.Media.IImage>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.ImageDrawing.ImageSourceProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.ImageDrawing.ImageSourceProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Media.IImage>> ObserveBindingImageSource(this Avalonia.Media.ImageDrawing obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.ImageDrawing.ImageSourceProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.ImageDrawing.ImageSourceProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.ImageDrawing OnBindingImageSource(this Avalonia.Media.ImageDrawing obj, Action<Avalonia.Media.ImageDrawing, IObservable<BindingValue<Avalonia.Media.IImage>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.ImageDrawing.ImageSourceProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.ImageDrawing.ImageSourceProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveImageSourceChanged(this Avalonia.Media.ImageDrawing obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.ImageDrawing.ImageSourceProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.ImageDrawing.ImageSourceProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.ImageDrawing OnImageSourceChanged(this Avalonia.Media.ImageDrawing obj, Action<Avalonia.Media.ImageDrawing, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.ImageDrawing.ImageSourceProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.ImageDrawing.RectProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.ImageDrawing.RectProperty"/> value on an object of type <see cref="Avalonia.Media.ImageDrawing"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ImageDrawing Rect(this Avalonia.Media.ImageDrawing obj, Avalonia.Rect value)
    {
        obj[Avalonia.Media.ImageDrawing.RectProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ImageDrawing.RectProperty"/> on an object of type <see cref="Avalonia.Media.ImageDrawing"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ImageDrawing Rect(
        this Avalonia.Media.ImageDrawing obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ImageDrawing.RectProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.ImageDrawing.RectProperty"/> on an object of type <see cref="Avalonia.Media.ImageDrawing"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.ImageDrawing Rect(
        this Avalonia.Media.ImageDrawing obj,
        IObservable<Avalonia.Rect> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ImageDrawing.RectProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.ImageDrawing.RectProperty"/> binding on an object of type <see cref="Avalonia.Media.ImageDrawing"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.ImageDrawing.RectProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRect(
        this Avalonia.Media.ImageDrawing obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.ImageDrawing.RectProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.ImageDrawing.RectProperty"/> on an object of type <see cref="Avalonia.Media.ImageDrawing"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<Avalonia.Rect> ObserveRect(this Avalonia.Media.ImageDrawing obj)
    {
        return obj.GetObservable(Avalonia.Media.ImageDrawing.RectProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.ImageDrawing.RectProperty"/> property on an object of type <see cref="Avalonia.Media.ImageDrawing"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.ImageDrawing OnRect(this Avalonia.Media.ImageDrawing obj, Action<Avalonia.Media.ImageDrawing, IObservable<Avalonia.Rect>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.ImageDrawing.RectProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.ImageDrawing.RectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Rect>> ObserveBindingRect(this Avalonia.Media.ImageDrawing obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.ImageDrawing.RectProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.ImageDrawing.RectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.ImageDrawing OnBindingRect(this Avalonia.Media.ImageDrawing obj, Action<Avalonia.Media.ImageDrawing, IObservable<BindingValue<Avalonia.Rect>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.ImageDrawing.RectProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.ImageDrawing.RectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveRectChanged(this Avalonia.Media.ImageDrawing obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.ImageDrawing.RectProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.ImageDrawing.RectProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.ImageDrawing OnRectChanged(this Avalonia.Media.ImageDrawing obj, Action<Avalonia.Media.ImageDrawing, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.ImageDrawing.RectProperty);
        handler(obj, observable);
        return obj;
    }
}
