// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Controls.CalendarDatePicker"/> class property extension methods.
/// </summary>
public static partial class CalendarDatePickerExtensions
{
    // Avalonia.Controls.CalendarDatePicker.DisplayDateProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDate<T>(this T obj, System.DateTime value) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.DisplayDateProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDate<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.DisplayDateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDate<T>(
        this T obj,
        IObservable<System.DateTime> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.DisplayDateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDisplayDate(
        this Avalonia.Controls.CalendarDatePicker obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.DisplayDateProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.DateTime> ObserveDisplayDate(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDisplayDate<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<System.DateTime>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.DateTime>> ObserveBindingDisplayDate(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingDisplayDate<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<BindingValue<System.DateTime>>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDisplayDateChanged(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDisplayDateChanged<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDateStart<T>(this T obj, System.Nullable<System.DateTime> value) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDateStart<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDateStart<T>(
        this T obj,
        IObservable<System.Nullable<System.DateTime>> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDisplayDateStart(
        this Avalonia.Controls.CalendarDatePicker obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Nullable<System.DateTime>> ObserveDisplayDateStart(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDisplayDateStart<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<System.Nullable<System.DateTime>>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Nullable<System.DateTime>>> ObserveBindingDisplayDateStart(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingDisplayDateStart<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<BindingValue<System.Nullable<System.DateTime>>>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDisplayDateStartChanged(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDisplayDateStartChanged<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateStartProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDateEnd<T>(this T obj, System.Nullable<System.DateTime> value) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDateEnd<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DisplayDateEnd<T>(
        this T obj,
        IObservable<System.Nullable<System.DateTime>> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDisplayDateEnd(
        this Avalonia.Controls.CalendarDatePicker obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Nullable<System.DateTime>> ObserveDisplayDateEnd(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDisplayDateEnd<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<System.Nullable<System.DateTime>>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Nullable<System.DateTime>>> ObserveBindingDisplayDateEnd(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingDisplayDateEnd<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<BindingValue<System.Nullable<System.DateTime>>>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDisplayDateEndChanged(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDisplayDateEndChanged<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.DisplayDateEndProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeek<T>(this T obj, System.DayOfWeek value) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeek<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeek<T>(
        this T obj,
        IObservable<System.DayOfWeek> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindFirstDayOfWeek(
        this Avalonia.Controls.CalendarDatePicker obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.DayOfWeek> ObserveFirstDayOfWeek(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetObservable(Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFirstDayOfWeek<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<System.DayOfWeek>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetObservable(Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.DayOfWeek>> ObserveBindingFirstDayOfWeek(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingFirstDayOfWeek<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<BindingValue<System.DayOfWeek>>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveFirstDayOfWeekChanged(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnFirstDayOfWeekChanged<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/> property value to <see cref="System.DayOfWeek.Sunday"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeekSunday<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty] = System.DayOfWeek.Sunday;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/> property value to <see cref="System.DayOfWeek.Monday"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeekMonday<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty] = System.DayOfWeek.Monday;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/> property value to <see cref="System.DayOfWeek.Tuesday"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeekTuesday<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty] = System.DayOfWeek.Tuesday;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/> property value to <see cref="System.DayOfWeek.Wednesday"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeekWednesday<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty] = System.DayOfWeek.Wednesday;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/> property value to <see cref="System.DayOfWeek.Thursday"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeekThursday<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty] = System.DayOfWeek.Thursday;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/> property value to <see cref="System.DayOfWeek.Friday"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeekFriday<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty] = System.DayOfWeek.Friday;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty"/> property value to <see cref="System.DayOfWeek.Saturday"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T FirstDayOfWeekSaturday<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.FirstDayOfWeekProperty] = System.DayOfWeek.Saturday;
        return obj;
    }

    // Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsDropDownOpen<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsDropDownOpen<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsDropDownOpen<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsDropDownOpen(
        this Avalonia.Controls.CalendarDatePicker obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsDropDownOpen(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetObservable(Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsDropDownOpen<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetObservable(Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsDropDownOpen(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsDropDownOpen<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsDropDownOpenChanged(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsDropDownOpenChanged<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.IsDropDownOpenProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsTodayHighlighted<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsTodayHighlighted<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T IsTodayHighlighted<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindIsTodayHighlighted(
        this Avalonia.Controls.CalendarDatePicker obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveIsTodayHighlighted(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetObservable(Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsTodayHighlighted<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetObservable(Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingIsTodayHighlighted(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingIsTodayHighlighted<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveIsTodayHighlightedChanged(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnIsTodayHighlightedChanged<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.IsTodayHighlightedProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.CalendarDatePicker.SelectedDateProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedDate<T>(this T obj, System.Nullable<System.DateTime> value) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.SelectedDateProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedDate<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.SelectedDateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedDate<T>(
        this T obj,
        IObservable<System.Nullable<System.DateTime>> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.SelectedDateProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectedDate(
        this Avalonia.Controls.CalendarDatePicker obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.SelectedDateProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Nullable<System.DateTime>> ObserveSelectedDate(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetObservable(Avalonia.Controls.CalendarDatePicker.SelectedDateProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectedDate<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<System.Nullable<System.DateTime>>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetObservable(Avalonia.Controls.CalendarDatePicker.SelectedDateProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Nullable<System.DateTime>>> ObserveBindingSelectedDate(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.SelectedDateProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingSelectedDate<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<BindingValue<System.Nullable<System.DateTime>>>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.SelectedDateProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveSelectedDateChanged(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.SelectedDateProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectedDateChanged<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.SelectedDateProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedDateFormat<T>(this T obj, Avalonia.Controls.CalendarDatePickerFormat value) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedDateFormat<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedDateFormat<T>(
        this T obj,
        IObservable<Avalonia.Controls.CalendarDatePickerFormat> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindSelectedDateFormat(
        this Avalonia.Controls.CalendarDatePicker obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Controls.CalendarDatePickerFormat> ObserveSelectedDateFormat(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetObservable(Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectedDateFormat<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<Avalonia.Controls.CalendarDatePickerFormat>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetObservable(Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Controls.CalendarDatePickerFormat>> ObserveBindingSelectedDateFormat(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingSelectedDateFormat<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<BindingValue<Avalonia.Controls.CalendarDatePickerFormat>>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveSelectedDateFormatChanged(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnSelectedDateFormatChanged<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty"/> property value to <see cref="Avalonia.Controls.CalendarDatePickerFormat.Long"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedDateFormatLong<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty] = Avalonia.Controls.CalendarDatePickerFormat.Long;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty"/> property value to <see cref="Avalonia.Controls.CalendarDatePickerFormat.Short"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedDateFormatShort<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty] = Avalonia.Controls.CalendarDatePickerFormat.Short;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty"/> property value to <see cref="Avalonia.Controls.CalendarDatePickerFormat.Custom"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T SelectedDateFormatCustom<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.SelectedDateFormatProperty] = Avalonia.Controls.CalendarDatePickerFormat.Custom;
        return obj;
    }

    // Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CustomDateFormatString<T>(this T obj, System.String value) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CustomDateFormatString<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T CustomDateFormatString<T>(
        this T obj,
        IObservable<System.String> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindCustomDateFormatString(
        this Avalonia.Controls.CalendarDatePicker obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.String> ObserveCustomDateFormatString(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetObservable(Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCustomDateFormatString<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<System.String>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetObservable(Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.String>> ObserveBindingCustomDateFormatString(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingCustomDateFormatString<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<BindingValue<System.String>>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveCustomDateFormatStringChanged(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnCustomDateFormatStringChanged<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.CustomDateFormatStringProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.CalendarDatePicker.TextProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.TextProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Text<T>(this T obj, System.String value) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.TextProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.TextProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Text<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.TextProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.TextProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Text<T>(
        this T obj,
        IObservable<System.String> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.TextProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.CalendarDatePicker.TextProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.CalendarDatePicker.TextProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindText(
        this Avalonia.Controls.CalendarDatePicker obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.TextProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.TextProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.String> ObserveText(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetObservable(Avalonia.Controls.CalendarDatePicker.TextProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.TextProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnText<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<System.String>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetObservable(Avalonia.Controls.CalendarDatePicker.TextProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.TextProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.String>> ObserveBindingText(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.TextProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.TextProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingText<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<BindingValue<System.String>>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.TextProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.TextProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveTextChanged(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.TextProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.TextProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnTextChanged<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.TextProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.CalendarDatePicker.WatermarkProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.WatermarkProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Watermark<T>(this T obj, System.String value) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.WatermarkProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.WatermarkProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Watermark<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.WatermarkProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.WatermarkProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Watermark<T>(
        this T obj,
        IObservable<System.String> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.WatermarkProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.CalendarDatePicker.WatermarkProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.CalendarDatePicker.WatermarkProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindWatermark(
        this Avalonia.Controls.CalendarDatePicker obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.WatermarkProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.WatermarkProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.String> ObserveWatermark(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetObservable(Avalonia.Controls.CalendarDatePicker.WatermarkProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.WatermarkProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnWatermark<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<System.String>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetObservable(Avalonia.Controls.CalendarDatePicker.WatermarkProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.WatermarkProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.String>> ObserveBindingWatermark(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.WatermarkProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.WatermarkProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingWatermark<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<BindingValue<System.String>>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.WatermarkProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.WatermarkProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveWatermarkChanged(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.WatermarkProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.WatermarkProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnWatermarkChanged<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.WatermarkProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T UseFloatingWatermark<T>(this T obj, System.Boolean value) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T UseFloatingWatermark<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T UseFloatingWatermark<T>(
        this T obj,
        IObservable<System.Boolean> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindUseFloatingWatermark(
        this Avalonia.Controls.CalendarDatePicker obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Boolean> ObserveUseFloatingWatermark(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetObservable(Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnUseFloatingWatermark<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<System.Boolean>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetObservable(Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Boolean>> ObserveBindingUseFloatingWatermark(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingUseFloatingWatermark<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<BindingValue<System.Boolean>>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveUseFloatingWatermarkChanged(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnUseFloatingWatermarkChanged<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.UseFloatingWatermarkProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignment<T>(this T obj, Avalonia.Layout.HorizontalAlignment value) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignment<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignment<T>(
        this T obj,
        IObservable<Avalonia.Layout.HorizontalAlignment> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindHorizontalContentAlignment(
        this Avalonia.Controls.CalendarDatePicker obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Layout.HorizontalAlignment> ObserveHorizontalContentAlignment(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetObservable(Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHorizontalContentAlignment<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<Avalonia.Layout.HorizontalAlignment>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetObservable(Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Layout.HorizontalAlignment>> ObserveBindingHorizontalContentAlignment(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingHorizontalContentAlignment<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<BindingValue<Avalonia.Layout.HorizontalAlignment>>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveHorizontalContentAlignmentChanged(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnHorizontalContentAlignmentChanged<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.HorizontalAlignment.Stretch"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignmentStretch<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Stretch;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.HorizontalAlignment.Left"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignmentLeft<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Left;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.HorizontalAlignment.Center"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignmentCenter<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Center;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.HorizontalAlignment.Right"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T HorizontalContentAlignmentRight<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.HorizontalContentAlignmentProperty] = Avalonia.Layout.HorizontalAlignment.Right;
        return obj;
    }

    // Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignment<T>(this T obj, Avalonia.Layout.VerticalAlignment value) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignment<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignment<T>(
        this T obj,
        IObservable<Avalonia.Layout.VerticalAlignment> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Controls.CalendarDatePicker
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindVerticalContentAlignment(
        this Avalonia.Controls.CalendarDatePicker obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Layout.VerticalAlignment> ObserveVerticalContentAlignment(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetObservable(Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnVerticalContentAlignment<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<Avalonia.Layout.VerticalAlignment>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetObservable(Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Layout.VerticalAlignment>> ObserveBindingVerticalContentAlignment(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingVerticalContentAlignment<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<BindingValue<Avalonia.Layout.VerticalAlignment>>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetBindingObservable(Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveVerticalContentAlignmentChanged(this Avalonia.Controls.CalendarDatePicker obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnVerticalContentAlignmentChanged<T>(this T obj, Action<Avalonia.Controls.CalendarDatePicker, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Controls.CalendarDatePicker
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.VerticalAlignment.Stretch"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignmentStretch<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Stretch;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.VerticalAlignment.Top"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignmentTop<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Top;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.VerticalAlignment.Center"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignmentCenter<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Center;
        return obj;
    }

    /// <summary>
    /// Sets a <see cref="Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty"/> property value to <see cref="Avalonia.Layout.VerticalAlignment.Bottom"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T VerticalContentAlignmentBottom<T>(this T obj) where T : Avalonia.Controls.CalendarDatePicker
    {
        obj[Avalonia.Controls.CalendarDatePicker.VerticalContentAlignmentProperty] = Avalonia.Layout.VerticalAlignment.Bottom;
        return obj;
    }
}
