// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Media.SkewTransform"/> class property extension methods.
/// </summary>
public static partial class SkewTransformExtensions
{
    // Avalonia.Media.SkewTransform.AngleXProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.SkewTransform.AngleXProperty"/> value on an object of type <see cref="Avalonia.Media.SkewTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.SkewTransform AngleX(this Avalonia.Media.SkewTransform obj, System.Double value)
    {
        obj[Avalonia.Media.SkewTransform.AngleXProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.SkewTransform.AngleXProperty"/> on an object of type <see cref="Avalonia.Media.SkewTransform"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.SkewTransform AngleX(
        this Avalonia.Media.SkewTransform obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.SkewTransform.AngleXProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.SkewTransform.AngleXProperty"/> on an object of type <see cref="Avalonia.Media.SkewTransform"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.SkewTransform AngleX(
        this Avalonia.Media.SkewTransform obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.SkewTransform.AngleXProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.SkewTransform.AngleXProperty"/> binding on an object of type <see cref="Avalonia.Media.SkewTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.SkewTransform.AngleXProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAngleX(
        this Avalonia.Media.SkewTransform obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.SkewTransform.AngleXProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.SkewTransform.AngleXProperty"/> on an object of type <see cref="Avalonia.Media.SkewTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.Double> ObserveAngleX(this Avalonia.Media.SkewTransform obj)
    {
        return obj.GetObservable(Avalonia.Media.SkewTransform.AngleXProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.SkewTransform.AngleXProperty"/> property on an object of type <see cref="Avalonia.Media.SkewTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.SkewTransform OnAngleX(this Avalonia.Media.SkewTransform obj, Action<Avalonia.Media.SkewTransform, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.SkewTransform.AngleXProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.SkewTransform.AngleXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingAngleX(this Avalonia.Media.SkewTransform obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.SkewTransform.AngleXProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.SkewTransform.AngleXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.SkewTransform OnBindingAngleX(this Avalonia.Media.SkewTransform obj, Action<Avalonia.Media.SkewTransform, IObservable<BindingValue<System.Double>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.SkewTransform.AngleXProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.SkewTransform.AngleXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAngleXChanged(this Avalonia.Media.SkewTransform obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.SkewTransform.AngleXProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.SkewTransform.AngleXProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.SkewTransform OnAngleXChanged(this Avalonia.Media.SkewTransform obj, Action<Avalonia.Media.SkewTransform, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.SkewTransform.AngleXProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Media.SkewTransform.AngleYProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Media.SkewTransform.AngleYProperty"/> value on an object of type <see cref="Avalonia.Media.SkewTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value to set for the property.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.SkewTransform AngleY(this Avalonia.Media.SkewTransform obj, System.Double value)
    {
        obj[Avalonia.Media.SkewTransform.AngleYProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.SkewTransform.AngleYProperty"/> on an object of type <see cref="Avalonia.Media.SkewTransform"/> with a source binding specified as a parameter.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.SkewTransform AngleY(
        this Avalonia.Media.SkewTransform obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.SkewTransform.AngleYProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Media.SkewTransform.AngleYProperty"/> on an object of type <see cref="Avalonia.Media.SkewTransform"/> with a source binding specified as an observable.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>The target object reference.</returns>
    public static Avalonia.Media.SkewTransform AngleY(
        this Avalonia.Media.SkewTransform obj,
        IObservable<System.Double> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.SkewTransform.AngleYProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Media.SkewTransform.AngleYProperty"/> binding on an object of type <see cref="Avalonia.Media.SkewTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Media.SkewTransform.AngleYProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindAngleY(
        this Avalonia.Media.SkewTransform obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Media.SkewTransform.AngleYProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Media.SkewTransform.AngleYProperty"/> on an object of type <see cref="Avalonia.Media.SkewTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the object, and thereafter whenever the property changes.
    /// </returns>
    public static IObservable<System.Double> ObserveAngleY(this Avalonia.Media.SkewTransform obj)
    {
        return obj.GetObservable(Avalonia.Media.SkewTransform.AngleYProperty);
    }

    /// <summary>
    /// Registers a handler for the <see cref="Avalonia.Media.SkewTransform.AngleYProperty"/> property on an object of type <see cref="Avalonia.Media.SkewTransform"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler to be called when the property changes.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.SkewTransform OnAngleY(this Avalonia.Media.SkewTransform obj, Action<Avalonia.Media.SkewTransform, IObservable<System.Double>> handler)
    {
        var observable = obj.GetObservable(Avalonia.Media.SkewTransform.AngleYProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Media.SkewTransform.AngleYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Double>> ObserveBindingAngleY(this Avalonia.Media.SkewTransform obj)
    {
        return obj.GetBindingObservable(Avalonia.Media.SkewTransform.AngleYProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Media.SkewTransform.AngleYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.SkewTransform OnBindingAngleY(this Avalonia.Media.SkewTransform obj, Action<Avalonia.Media.SkewTransform, IObservable<BindingValue<System.Double>>> handler)
    {
        var observable = obj.GetBindingObservable(Avalonia.Media.SkewTransform.AngleYProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Media.SkewTransform.AngleYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveAngleYChanged(this Avalonia.Media.SkewTransform obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Media.SkewTransform.AngleYProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Media.SkewTransform.AngleYProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <returns>The target object.</returns>
    public static Avalonia.Media.SkewTransform OnAngleYChanged(this Avalonia.Media.SkewTransform obj, Action<Avalonia.Media.SkewTransform, IObservable<AvaloniaPropertyChangedEventArgs>> handler)
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Media.SkewTransform.AngleYProperty);
        handler(obj, observable);
        return obj;
    }
}
