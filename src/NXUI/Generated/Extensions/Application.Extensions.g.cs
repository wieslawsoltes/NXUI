// <auto-generated />
namespace NXUI.Extensions;

/// <summary>
/// The avalonia <see cref="Avalonia.Application"/> class property extension methods.
/// </summary>
public static partial class ApplicationExtensions
{
    // Avalonia.Application.DataContextProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Application.DataContextProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DataContext<T>(this T obj, System.Object value) where T : Avalonia.Application
    {
        obj[Avalonia.Application.DataContextProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Application.DataContextProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DataContext<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Application
    {
        var descriptor = Avalonia.Application.DataContextProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Application.DataContextProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T DataContext<T>(
        this T obj,
        IObservable<System.Object> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Application
    {
        var descriptor = Avalonia.Application.DataContextProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Application.DataContextProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Application.DataContextProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindDataContext(
        this Avalonia.Application obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Application.DataContextProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Application.DataContextProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.Object> ObserveDataContext(this Avalonia.Application obj)
    {
        return obj.GetObservable(Avalonia.Application.DataContextProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Application.DataContextProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDataContext<T>(this T obj, Action<Avalonia.Application, IObservable<System.Object>> handler) where T : Avalonia.Application
    {
        var observable = obj.GetObservable(Avalonia.Application.DataContextProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Application.DataContextProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.Object>> ObserveBindingDataContext(this Avalonia.Application obj)
    {
        return obj.GetBindingObservable(Avalonia.Application.DataContextProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Application.DataContextProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingDataContext<T>(this T obj, Action<Avalonia.Application, IObservable<BindingValue<System.Object>>> handler) where T : Avalonia.Application
    {
        var observable = obj.GetBindingObservable(Avalonia.Application.DataContextProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Application.DataContextProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveDataContextChanged(this Avalonia.Application obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Application.DataContextProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Application.DataContextProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnDataContextChanged<T>(this T obj, Action<Avalonia.Application, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Application
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Application.DataContextProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Application.ActualThemeVariantProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Application.ActualThemeVariantProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ActualThemeVariant<T>(this T obj, Avalonia.Styling.ThemeVariant value) where T : Avalonia.Application
    {
        obj[Avalonia.Application.ActualThemeVariantProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Application.ActualThemeVariantProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ActualThemeVariant<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Application
    {
        var descriptor = Avalonia.Application.ActualThemeVariantProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Application.ActualThemeVariantProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T ActualThemeVariant<T>(
        this T obj,
        IObservable<Avalonia.Styling.ThemeVariant> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Application
    {
        var descriptor = Avalonia.Application.ActualThemeVariantProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Application.ActualThemeVariantProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Application.ActualThemeVariantProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindActualThemeVariant(
        this Avalonia.Application obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Application.ActualThemeVariantProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Application.ActualThemeVariantProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Styling.ThemeVariant> ObserveActualThemeVariant(this Avalonia.Application obj)
    {
        return obj.GetObservable(Avalonia.Application.ActualThemeVariantProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Application.ActualThemeVariantProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnActualThemeVariant<T>(this T obj, Action<Avalonia.Application, IObservable<Avalonia.Styling.ThemeVariant>> handler) where T : Avalonia.Application
    {
        var observable = obj.GetObservable(Avalonia.Application.ActualThemeVariantProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Application.ActualThemeVariantProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Styling.ThemeVariant>> ObserveBindingActualThemeVariant(this Avalonia.Application obj)
    {
        return obj.GetBindingObservable(Avalonia.Application.ActualThemeVariantProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Application.ActualThemeVariantProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingActualThemeVariant<T>(this T obj, Action<Avalonia.Application, IObservable<BindingValue<Avalonia.Styling.ThemeVariant>>> handler) where T : Avalonia.Application
    {
        var observable = obj.GetBindingObservable(Avalonia.Application.ActualThemeVariantProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Application.ActualThemeVariantProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveActualThemeVariantChanged(this Avalonia.Application obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Application.ActualThemeVariantProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Application.ActualThemeVariantProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnActualThemeVariantChanged<T>(this T obj, Action<Avalonia.Application, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Application
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Application.ActualThemeVariantProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Application.RequestedThemeVariantProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Application.RequestedThemeVariantProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RequestedThemeVariant<T>(this T obj, Avalonia.Styling.ThemeVariant value) where T : Avalonia.Application
    {
        obj[Avalonia.Application.RequestedThemeVariantProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Application.RequestedThemeVariantProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RequestedThemeVariant<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Application
    {
        var descriptor = Avalonia.Application.RequestedThemeVariantProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Application.RequestedThemeVariantProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T RequestedThemeVariant<T>(
        this T obj,
        IObservable<Avalonia.Styling.ThemeVariant> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Application
    {
        var descriptor = Avalonia.Application.RequestedThemeVariantProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Application.RequestedThemeVariantProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Application.RequestedThemeVariantProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindRequestedThemeVariant(
        this Avalonia.Application obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Application.RequestedThemeVariantProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Application.RequestedThemeVariantProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<Avalonia.Styling.ThemeVariant> ObserveRequestedThemeVariant(this Avalonia.Application obj)
    {
        return obj.GetObservable(Avalonia.Application.RequestedThemeVariantProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Application.RequestedThemeVariantProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRequestedThemeVariant<T>(this T obj, Action<Avalonia.Application, IObservable<Avalonia.Styling.ThemeVariant>> handler) where T : Avalonia.Application
    {
        var observable = obj.GetObservable(Avalonia.Application.RequestedThemeVariantProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Application.RequestedThemeVariantProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<Avalonia.Styling.ThemeVariant>> ObserveBindingRequestedThemeVariant(this Avalonia.Application obj)
    {
        return obj.GetBindingObservable(Avalonia.Application.RequestedThemeVariantProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Application.RequestedThemeVariantProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingRequestedThemeVariant<T>(this T obj, Action<Avalonia.Application, IObservable<BindingValue<Avalonia.Styling.ThemeVariant>>> handler) where T : Avalonia.Application
    {
        var observable = obj.GetBindingObservable(Avalonia.Application.RequestedThemeVariantProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Application.RequestedThemeVariantProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveRequestedThemeVariantChanged(this Avalonia.Application obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Application.RequestedThemeVariantProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Application.RequestedThemeVariantProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnRequestedThemeVariantChanged<T>(this T obj, Action<Avalonia.Application, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Application
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Application.RequestedThemeVariantProperty);
        handler(obj, observable);
        return obj;
    }

    // Avalonia.Application.NameProperty

    /// <summary>
    /// Sets a <see cref="Avalonia.Application.NameProperty"/> value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="value">The value.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Name<T>(this T obj, System.String value) where T : Avalonia.Application
    {
        obj[Avalonia.Application.NameProperty] = value;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Application.NameProperty"/> with binding source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="binding">The source binding.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Name<T>(
        this T obj,
        Avalonia.Data.IBinding binding,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Application
    {
        var descriptor = Avalonia.Application.NameProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = binding;
        return obj;
    }

    /// <summary>
    /// Sets a binding to <see cref="Avalonia.Application.NameProperty"/> with observable source value.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="observable">The source observable.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T Name<T>(
        this T obj,
        IObservable<System.String> observable,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue) where T : Avalonia.Application
    {
        var descriptor = Avalonia.Application.NameProperty.Bind().WithMode(mode).WithPriority(priority);
        obj[descriptor] = observable.ToBinding();
        return obj;
    }

    /// <summary>
    /// Makes a <see cref="Avalonia.Application.NameProperty"/> binding.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="mode">The target binding mode.</param>
    /// <param name="priority">The target binding priority.</param>
    /// <returns>A <see cref="Avalonia.Application.NameProperty"/> binding.</returns>
    public static Avalonia.Data.IBinding BindName(
        this Avalonia.Application obj,
        Avalonia.Data.BindingMode mode = Avalonia.Data.BindingMode.TwoWay,
        Avalonia.Data.BindingPriority priority = Avalonia.Data.BindingPriority.LocalValue)
    {
        var descriptor = Avalonia.Application.NameProperty.Bind().WithMode(mode).WithPriority(priority);
        return obj[descriptor];
    }

    /// <summary>
    /// Gets an observable for an <see cref="Avalonia.Application.NameProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>
    /// An observable which fires immediately with the current value of the property on the
    /// object and subsequently each time the property value changes.
    /// </returns>
    public static IObservable<System.String> ObserveName(this Avalonia.Application obj)
    {
        return obj.GetObservable(Avalonia.Application.NameProperty);
    }

    /// <summary>
    /// Sets a handler with an observable for an <see cref="Avalonia.Application.NameProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and observable with the current value of the property.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnName<T>(this T obj, Action<Avalonia.Application, IObservable<System.String>> handler) where T : Avalonia.Application
    {
        var observable = obj.GetObservable(Avalonia.Application.NameProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a binding observable for <see cref="Avalonia.Application.NameProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable including binding errors.</returns>
    public static IObservable<BindingValue<System.String>> ObserveBindingName(this Avalonia.Application obj)
    {
        return obj.GetBindingObservable(Avalonia.Application.NameProperty);
    }

    /// <summary>
    /// Sets a handler with a binding observable for <see cref="Avalonia.Application.NameProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and binding observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnBindingName<T>(this T obj, Action<Avalonia.Application, IObservable<BindingValue<System.String>>> handler) where T : Avalonia.Application
    {
        var observable = obj.GetBindingObservable(Avalonia.Application.NameProperty);
        handler(obj, observable);
        return obj;
    }

    /// <summary>
    /// Gets a property change observable for <see cref="Avalonia.Application.NameProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <returns>An observable with property change details.</returns>
    public static IObservable<AvaloniaPropertyChangedEventArgs> ObserveNameChanged(this Avalonia.Application obj)
    {
        return obj.GetPropertyChangedObservable(Avalonia.Application.NameProperty);
    }

    /// <summary>
    /// Sets a handler with property change observable for <see cref="Avalonia.Application.NameProperty"/>.
    /// </summary>
    /// <param name="obj">The target object.</param>
    /// <param name="handler">The handler with target object and property change observable.</param>
    /// <typeparam name="T">The type of the target object.</typeparam>
    /// <returns>The target object reference.</returns>
    public static T OnNameChanged<T>(this T obj, Action<Avalonia.Application, IObservable<AvaloniaPropertyChangedEventArgs>> handler) where T : Avalonia.Application
    {
        var observable = obj.GetPropertyChangedObservable(Avalonia.Application.NameProperty);
        handler(obj, observable);
        return obj;
    }
}
